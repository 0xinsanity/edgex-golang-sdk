/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CheckUserNicknameExist type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckUserNicknameExist{}

// CheckUserNicknameExist 检测用户昵称是否存在-响应
type CheckUserNicknameExist struct {
	// 昵称是否存在
	IsNicknameExist *bool `json:"isNicknameExist,omitempty"`
}

// NewCheckUserNicknameExist instantiates a new CheckUserNicknameExist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckUserNicknameExist() *CheckUserNicknameExist {
	this := CheckUserNicknameExist{}
	return &this
}

// NewCheckUserNicknameExistWithDefaults instantiates a new CheckUserNicknameExist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckUserNicknameExistWithDefaults() *CheckUserNicknameExist {
	this := CheckUserNicknameExist{}
	return &this
}

// GetIsNicknameExist returns the IsNicknameExist field value if set, zero value otherwise.
func (o *CheckUserNicknameExist) GetIsNicknameExist() bool {
	if o == nil || IsNil(o.IsNicknameExist) {
		var ret bool
		return ret
	}
	return *o.IsNicknameExist
}

// GetIsNicknameExistOk returns a tuple with the IsNicknameExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckUserNicknameExist) GetIsNicknameExistOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNicknameExist) {
		return nil, false
	}
	return o.IsNicknameExist, true
}

// HasIsNicknameExist returns a boolean if a field has been set.
func (o *CheckUserNicknameExist) HasIsNicknameExist() bool {
	if o != nil && !IsNil(o.IsNicknameExist) {
		return true
	}

	return false
}

// SetIsNicknameExist gets a reference to the given bool and assigns it to the IsNicknameExist field.
func (o *CheckUserNicknameExist) SetIsNicknameExist(v bool) {
	o.IsNicknameExist = &v
}

func (o CheckUserNicknameExist) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckUserNicknameExist) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsNicknameExist) {
		toSerialize["isNicknameExist"] = o.IsNicknameExist
	}
	return toSerialize, nil
}

type NullableCheckUserNicknameExist struct {
	value *CheckUserNicknameExist
	isSet bool
}

func (v NullableCheckUserNicknameExist) Get() *CheckUserNicknameExist {
	return v.value
}

func (v *NullableCheckUserNicknameExist) Set(val *CheckUserNicknameExist) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckUserNicknameExist) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckUserNicknameExist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckUserNicknameExist(val *CheckUserNicknameExist) *NullableCheckUserNicknameExist {
	return &NullableCheckUserNicknameExist{value: val, isSet: true}
}

func (v NullableCheckUserNicknameExist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckUserNicknameExist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


