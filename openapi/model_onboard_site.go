/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OnboardSite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnboardSite{}

// OnboardSite 用户登录站点-响应
type OnboardSite struct {
	User *User `json:"user,omitempty"`
	UserPreference *UserPreference `json:"userPreference,omitempty"`
	// 是否新用户第一次注册
	IsNewUser *bool `json:"isNewUser,omitempty"`
}

// NewOnboardSite instantiates a new OnboardSite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnboardSite() *OnboardSite {
	this := OnboardSite{}
	return &this
}

// NewOnboardSiteWithDefaults instantiates a new OnboardSite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnboardSiteWithDefaults() *OnboardSite {
	this := OnboardSite{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *OnboardSite) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardSite) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *OnboardSite) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *OnboardSite) SetUser(v User) {
	o.User = &v
}

// GetUserPreference returns the UserPreference field value if set, zero value otherwise.
func (o *OnboardSite) GetUserPreference() UserPreference {
	if o == nil || IsNil(o.UserPreference) {
		var ret UserPreference
		return ret
	}
	return *o.UserPreference
}

// GetUserPreferenceOk returns a tuple with the UserPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardSite) GetUserPreferenceOk() (*UserPreference, bool) {
	if o == nil || IsNil(o.UserPreference) {
		return nil, false
	}
	return o.UserPreference, true
}

// HasUserPreference returns a boolean if a field has been set.
func (o *OnboardSite) HasUserPreference() bool {
	if o != nil && !IsNil(o.UserPreference) {
		return true
	}

	return false
}

// SetUserPreference gets a reference to the given UserPreference and assigns it to the UserPreference field.
func (o *OnboardSite) SetUserPreference(v UserPreference) {
	o.UserPreference = &v
}

// GetIsNewUser returns the IsNewUser field value if set, zero value otherwise.
func (o *OnboardSite) GetIsNewUser() bool {
	if o == nil || IsNil(o.IsNewUser) {
		var ret bool
		return ret
	}
	return *o.IsNewUser
}

// GetIsNewUserOk returns a tuple with the IsNewUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnboardSite) GetIsNewUserOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNewUser) {
		return nil, false
	}
	return o.IsNewUser, true
}

// HasIsNewUser returns a boolean if a field has been set.
func (o *OnboardSite) HasIsNewUser() bool {
	if o != nil && !IsNil(o.IsNewUser) {
		return true
	}

	return false
}

// SetIsNewUser gets a reference to the given bool and assigns it to the IsNewUser field.
func (o *OnboardSite) SetIsNewUser(v bool) {
	o.IsNewUser = &v
}

func (o OnboardSite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnboardSite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserPreference) {
		toSerialize["userPreference"] = o.UserPreference
	}
	if !IsNil(o.IsNewUser) {
		toSerialize["isNewUser"] = o.IsNewUser
	}
	return toSerialize, nil
}

type NullableOnboardSite struct {
	value *OnboardSite
	isSet bool
}

func (v NullableOnboardSite) Get() *OnboardSite {
	return v.value
}

func (v *NullableOnboardSite) Set(val *OnboardSite) {
	v.value = val
	v.isSet = true
}

func (v NullableOnboardSite) IsSet() bool {
	return v.isSet
}

func (v *NullableOnboardSite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnboardSite(val *OnboardSite) *NullableOnboardSite {
	return &NullableOnboardSite{value: val, isSet: true}
}

func (v NullableOnboardSite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnboardSite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


