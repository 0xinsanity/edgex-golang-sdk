/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PositionTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PositionTransaction{}

// PositionTransaction 永续合约持仓变动明细
type PositionTransaction struct {
	// 唯一标识
	Id *string `json:"id,omitempty"`
	// 所属用户id
	UserId *string `json:"userId,omitempty"`
	// 所属账户id
	AccountId *string `json:"accountId,omitempty"`
	// 所属抵押品币种id
	CoinId *string `json:"coinId,omitempty"`
	// 所属合约id
	ContractId *string `json:"contractId,omitempty"`
	// 明细类型
	Type *string `json:"type,omitempty"`
	// 持有数量变动值
	DeltaOpenSize *string `json:"deltaOpenSize,omitempty"`
	// 开仓价值变动值
	DeltaOpenValue *string `json:"deltaOpenValue,omitempty"`
	// 开仓手续费用变动值
	DeltaOpenFee *string `json:"deltaOpenFee,omitempty"`
	// 资金费用变动值
	DeltaFundingFee *string `json:"deltaFundingFee,omitempty"`
	// 变动前的持有数量
	BeforeOpenSize *string `json:"beforeOpenSize,omitempty"`
	// 变动前的开仓价值
	BeforeOpenValue *string `json:"beforeOpenValue,omitempty"`
	// 变动前的开仓手续费用
	BeforeOpenFee *string `json:"beforeOpenFee,omitempty"`
	// 变动前的资金费用
	BeforeFundingFee *string `json:"beforeFundingFee,omitempty"`
	// 成交平仓数量 (正数为买入，负数为卖出)
	FillCloseSize *string `json:"fillCloseSize,omitempty"`
	// 成交平仓价值 (正数为买入，负数为卖出)
	FillCloseValue *string `json:"fillCloseValue,omitempty"`
	// 成交平仓手续费 (一般为零或负数)
	FillCloseFee *string `json:"fillCloseFee,omitempty"`
	// 成交开仓数量 (正数为买入，负数为卖出)
	FillOpenSize *string `json:"fillOpenSize,omitempty"`
	// 成交开仓价值 (正数为买入，负数为卖出)
	FillOpenValue *string `json:"fillOpenValue,omitempty"`
	// 成交开仓手续费 (一般为零或负数)
	FillOpenFee *string `json:"fillOpenFee,omitempty"`
	// 成交价格 (非精确值，仅展示使用)
	FillPrice *string `json:"fillPrice,omitempty"`
	// 清算费 (强平费) (有平仓成交时存在。一般为零或负数)
	LiquidateFee *string `json:"liquidateFee,omitempty"`
	// 已实现盈亏 (有平仓成交时存在。非精确值，仅展示使用)
	RealizePnl *string `json:"realizePnl,omitempty"`
	// 是否是强平成交
	IsLiquidate *bool `json:"isLiquidate,omitempty"`
	// 是否是自动减仓成交
	IsDeleverage *bool `json:"isDeleverage,omitempty"`
	// 资金费率结算时间
	FundingTime *string `json:"fundingTime,omitempty"`
	// 资金费率
	FundingRate *string `json:"fundingRate,omitempty"`
	// 资金费率相关的指数价格
	FundingIndexPrice *string `json:"fundingIndexPrice,omitempty"`
	// 资金费率相关的预言机价格
	FundingOraclePrice *string `json:"fundingOraclePrice,omitempty"`
	// 资金费用结算时仓位大小 (正数为多仓，负数为空仓)
	FundingPositionSize *string `json:"fundingPositionSize,omitempty"`
	// 此字段为关联的委托单id
	OrderId *string `json:"orderId,omitempty"`
	// 此字段为关联的委托单成交交易id
	OrderFillTransactionId *string `json:"orderFillTransactionId,omitempty"`
	// 关联的抵押品明细id
	CollateralTransactionId *string `json:"collateralTransactionId,omitempty"`
	// 此字段为关联的强制交易id
	ForceTradeId *string `json:"forceTradeId,omitempty"`
	// 附加类型，供上层业务使用
	ExtraType *string `json:"extraType,omitempty"`
	// 附加数据，json格式，默认为空串
	ExtraDataJson *string `json:"extraDataJson,omitempty"`
	// 当前审查状态
	CensorStatus *string `json:"censorStatus,omitempty"`
	// 审查处理序号。当 censor_status=CENSOR_SUCCESS/CENSOR_FAILURE/L2_APPROVED/L2_REJECT/L2_REJECT_APPROVED 时存在
	CensorTxId *string `json:"censorTxId,omitempty"`
	// 审查处理时间。当 censor_status=CENSOR_SUCCESS/CENSOR_FAILURE/L2_APPROVED/L2_REJECT/L2_REJECT_APPROVED 时存在
	CensorTime *string `json:"censorTime,omitempty"`
	// 审查失败错误码。当 censor_status=CENSOR_FAILURE 时存在
	CensorFailCode *string `json:"censorFailCode,omitempty"`
	// 审查失败原因。当 censor_status=CENSOR_FAILURE 时存在
	CensorFailReason *string `json:"censorFailReason,omitempty"`
	// l2推送交易id。当 censor_status=CENSOR_SUCCESS/L2_APPROVED/L2_REJECT/L2_REJECT_APPROVED 时存在
	L2TxId *string `json:"l2TxId,omitempty"`
	// l2拒绝时间。当 censor_status=L2_REJECT/L2_REJECT_APPROVED 时存在
	L2RejectTime *string `json:"l2RejectTime,omitempty"`
	// l2拒绝错误码。当 censor_status=L2_REJECT/L2_REJECT_APPROVED 时存在
	L2RejectCode *string `json:"l2RejectCode,omitempty"`
	// l2拒绝原因。当 censor_status=L2_REJECT/L2_REJECT_APPROVED 时存在
	L2RejectReason *string `json:"l2RejectReason,omitempty"`
	// l2批次验证时间。当 status=L2_APPROVED/L2_REJECT_APPROVED 时存在
	L2ApprovedTime *string `json:"l2ApprovedTime,omitempty"`
	// 创建时间
	CreatedTime *string `json:"createdTime,omitempty"`
	// 更新时间
	UpdatedTime *string `json:"updatedTime,omitempty"`
}

// NewPositionTransaction instantiates a new PositionTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPositionTransaction() *PositionTransaction {
	this := PositionTransaction{}
	return &this
}

// NewPositionTransactionWithDefaults instantiates a new PositionTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionTransactionWithDefaults() *PositionTransaction {
	this := PositionTransaction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PositionTransaction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PositionTransaction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PositionTransaction) SetId(v string) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PositionTransaction) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PositionTransaction) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *PositionTransaction) SetUserId(v string) {
	o.UserId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *PositionTransaction) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *PositionTransaction) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *PositionTransaction) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCoinId returns the CoinId field value if set, zero value otherwise.
func (o *PositionTransaction) GetCoinId() string {
	if o == nil || IsNil(o.CoinId) {
		var ret string
		return ret
	}
	return *o.CoinId
}

// GetCoinIdOk returns a tuple with the CoinId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetCoinIdOk() (*string, bool) {
	if o == nil || IsNil(o.CoinId) {
		return nil, false
	}
	return o.CoinId, true
}

// HasCoinId returns a boolean if a field has been set.
func (o *PositionTransaction) HasCoinId() bool {
	if o != nil && !IsNil(o.CoinId) {
		return true
	}

	return false
}

// SetCoinId gets a reference to the given string and assigns it to the CoinId field.
func (o *PositionTransaction) SetCoinId(v string) {
	o.CoinId = &v
}

// GetContractId returns the ContractId field value if set, zero value otherwise.
func (o *PositionTransaction) GetContractId() string {
	if o == nil || IsNil(o.ContractId) {
		var ret string
		return ret
	}
	return *o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetContractIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContractId) {
		return nil, false
	}
	return o.ContractId, true
}

// HasContractId returns a boolean if a field has been set.
func (o *PositionTransaction) HasContractId() bool {
	if o != nil && !IsNil(o.ContractId) {
		return true
	}

	return false
}

// SetContractId gets a reference to the given string and assigns it to the ContractId field.
func (o *PositionTransaction) SetContractId(v string) {
	o.ContractId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PositionTransaction) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PositionTransaction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PositionTransaction) SetType(v string) {
	o.Type = &v
}

// GetDeltaOpenSize returns the DeltaOpenSize field value if set, zero value otherwise.
func (o *PositionTransaction) GetDeltaOpenSize() string {
	if o == nil || IsNil(o.DeltaOpenSize) {
		var ret string
		return ret
	}
	return *o.DeltaOpenSize
}

// GetDeltaOpenSizeOk returns a tuple with the DeltaOpenSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetDeltaOpenSizeOk() (*string, bool) {
	if o == nil || IsNil(o.DeltaOpenSize) {
		return nil, false
	}
	return o.DeltaOpenSize, true
}

// HasDeltaOpenSize returns a boolean if a field has been set.
func (o *PositionTransaction) HasDeltaOpenSize() bool {
	if o != nil && !IsNil(o.DeltaOpenSize) {
		return true
	}

	return false
}

// SetDeltaOpenSize gets a reference to the given string and assigns it to the DeltaOpenSize field.
func (o *PositionTransaction) SetDeltaOpenSize(v string) {
	o.DeltaOpenSize = &v
}

// GetDeltaOpenValue returns the DeltaOpenValue field value if set, zero value otherwise.
func (o *PositionTransaction) GetDeltaOpenValue() string {
	if o == nil || IsNil(o.DeltaOpenValue) {
		var ret string
		return ret
	}
	return *o.DeltaOpenValue
}

// GetDeltaOpenValueOk returns a tuple with the DeltaOpenValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetDeltaOpenValueOk() (*string, bool) {
	if o == nil || IsNil(o.DeltaOpenValue) {
		return nil, false
	}
	return o.DeltaOpenValue, true
}

// HasDeltaOpenValue returns a boolean if a field has been set.
func (o *PositionTransaction) HasDeltaOpenValue() bool {
	if o != nil && !IsNil(o.DeltaOpenValue) {
		return true
	}

	return false
}

// SetDeltaOpenValue gets a reference to the given string and assigns it to the DeltaOpenValue field.
func (o *PositionTransaction) SetDeltaOpenValue(v string) {
	o.DeltaOpenValue = &v
}

// GetDeltaOpenFee returns the DeltaOpenFee field value if set, zero value otherwise.
func (o *PositionTransaction) GetDeltaOpenFee() string {
	if o == nil || IsNil(o.DeltaOpenFee) {
		var ret string
		return ret
	}
	return *o.DeltaOpenFee
}

// GetDeltaOpenFeeOk returns a tuple with the DeltaOpenFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetDeltaOpenFeeOk() (*string, bool) {
	if o == nil || IsNil(o.DeltaOpenFee) {
		return nil, false
	}
	return o.DeltaOpenFee, true
}

// HasDeltaOpenFee returns a boolean if a field has been set.
func (o *PositionTransaction) HasDeltaOpenFee() bool {
	if o != nil && !IsNil(o.DeltaOpenFee) {
		return true
	}

	return false
}

// SetDeltaOpenFee gets a reference to the given string and assigns it to the DeltaOpenFee field.
func (o *PositionTransaction) SetDeltaOpenFee(v string) {
	o.DeltaOpenFee = &v
}

// GetDeltaFundingFee returns the DeltaFundingFee field value if set, zero value otherwise.
func (o *PositionTransaction) GetDeltaFundingFee() string {
	if o == nil || IsNil(o.DeltaFundingFee) {
		var ret string
		return ret
	}
	return *o.DeltaFundingFee
}

// GetDeltaFundingFeeOk returns a tuple with the DeltaFundingFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetDeltaFundingFeeOk() (*string, bool) {
	if o == nil || IsNil(o.DeltaFundingFee) {
		return nil, false
	}
	return o.DeltaFundingFee, true
}

// HasDeltaFundingFee returns a boolean if a field has been set.
func (o *PositionTransaction) HasDeltaFundingFee() bool {
	if o != nil && !IsNil(o.DeltaFundingFee) {
		return true
	}

	return false
}

// SetDeltaFundingFee gets a reference to the given string and assigns it to the DeltaFundingFee field.
func (o *PositionTransaction) SetDeltaFundingFee(v string) {
	o.DeltaFundingFee = &v
}

// GetBeforeOpenSize returns the BeforeOpenSize field value if set, zero value otherwise.
func (o *PositionTransaction) GetBeforeOpenSize() string {
	if o == nil || IsNil(o.BeforeOpenSize) {
		var ret string
		return ret
	}
	return *o.BeforeOpenSize
}

// GetBeforeOpenSizeOk returns a tuple with the BeforeOpenSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetBeforeOpenSizeOk() (*string, bool) {
	if o == nil || IsNil(o.BeforeOpenSize) {
		return nil, false
	}
	return o.BeforeOpenSize, true
}

// HasBeforeOpenSize returns a boolean if a field has been set.
func (o *PositionTransaction) HasBeforeOpenSize() bool {
	if o != nil && !IsNil(o.BeforeOpenSize) {
		return true
	}

	return false
}

// SetBeforeOpenSize gets a reference to the given string and assigns it to the BeforeOpenSize field.
func (o *PositionTransaction) SetBeforeOpenSize(v string) {
	o.BeforeOpenSize = &v
}

// GetBeforeOpenValue returns the BeforeOpenValue field value if set, zero value otherwise.
func (o *PositionTransaction) GetBeforeOpenValue() string {
	if o == nil || IsNil(o.BeforeOpenValue) {
		var ret string
		return ret
	}
	return *o.BeforeOpenValue
}

// GetBeforeOpenValueOk returns a tuple with the BeforeOpenValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetBeforeOpenValueOk() (*string, bool) {
	if o == nil || IsNil(o.BeforeOpenValue) {
		return nil, false
	}
	return o.BeforeOpenValue, true
}

// HasBeforeOpenValue returns a boolean if a field has been set.
func (o *PositionTransaction) HasBeforeOpenValue() bool {
	if o != nil && !IsNil(o.BeforeOpenValue) {
		return true
	}

	return false
}

// SetBeforeOpenValue gets a reference to the given string and assigns it to the BeforeOpenValue field.
func (o *PositionTransaction) SetBeforeOpenValue(v string) {
	o.BeforeOpenValue = &v
}

// GetBeforeOpenFee returns the BeforeOpenFee field value if set, zero value otherwise.
func (o *PositionTransaction) GetBeforeOpenFee() string {
	if o == nil || IsNil(o.BeforeOpenFee) {
		var ret string
		return ret
	}
	return *o.BeforeOpenFee
}

// GetBeforeOpenFeeOk returns a tuple with the BeforeOpenFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetBeforeOpenFeeOk() (*string, bool) {
	if o == nil || IsNil(o.BeforeOpenFee) {
		return nil, false
	}
	return o.BeforeOpenFee, true
}

// HasBeforeOpenFee returns a boolean if a field has been set.
func (o *PositionTransaction) HasBeforeOpenFee() bool {
	if o != nil && !IsNil(o.BeforeOpenFee) {
		return true
	}

	return false
}

// SetBeforeOpenFee gets a reference to the given string and assigns it to the BeforeOpenFee field.
func (o *PositionTransaction) SetBeforeOpenFee(v string) {
	o.BeforeOpenFee = &v
}

// GetBeforeFundingFee returns the BeforeFundingFee field value if set, zero value otherwise.
func (o *PositionTransaction) GetBeforeFundingFee() string {
	if o == nil || IsNil(o.BeforeFundingFee) {
		var ret string
		return ret
	}
	return *o.BeforeFundingFee
}

// GetBeforeFundingFeeOk returns a tuple with the BeforeFundingFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetBeforeFundingFeeOk() (*string, bool) {
	if o == nil || IsNil(o.BeforeFundingFee) {
		return nil, false
	}
	return o.BeforeFundingFee, true
}

// HasBeforeFundingFee returns a boolean if a field has been set.
func (o *PositionTransaction) HasBeforeFundingFee() bool {
	if o != nil && !IsNil(o.BeforeFundingFee) {
		return true
	}

	return false
}

// SetBeforeFundingFee gets a reference to the given string and assigns it to the BeforeFundingFee field.
func (o *PositionTransaction) SetBeforeFundingFee(v string) {
	o.BeforeFundingFee = &v
}

// GetFillCloseSize returns the FillCloseSize field value if set, zero value otherwise.
func (o *PositionTransaction) GetFillCloseSize() string {
	if o == nil || IsNil(o.FillCloseSize) {
		var ret string
		return ret
	}
	return *o.FillCloseSize
}

// GetFillCloseSizeOk returns a tuple with the FillCloseSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFillCloseSizeOk() (*string, bool) {
	if o == nil || IsNil(o.FillCloseSize) {
		return nil, false
	}
	return o.FillCloseSize, true
}

// HasFillCloseSize returns a boolean if a field has been set.
func (o *PositionTransaction) HasFillCloseSize() bool {
	if o != nil && !IsNil(o.FillCloseSize) {
		return true
	}

	return false
}

// SetFillCloseSize gets a reference to the given string and assigns it to the FillCloseSize field.
func (o *PositionTransaction) SetFillCloseSize(v string) {
	o.FillCloseSize = &v
}

// GetFillCloseValue returns the FillCloseValue field value if set, zero value otherwise.
func (o *PositionTransaction) GetFillCloseValue() string {
	if o == nil || IsNil(o.FillCloseValue) {
		var ret string
		return ret
	}
	return *o.FillCloseValue
}

// GetFillCloseValueOk returns a tuple with the FillCloseValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFillCloseValueOk() (*string, bool) {
	if o == nil || IsNil(o.FillCloseValue) {
		return nil, false
	}
	return o.FillCloseValue, true
}

// HasFillCloseValue returns a boolean if a field has been set.
func (o *PositionTransaction) HasFillCloseValue() bool {
	if o != nil && !IsNil(o.FillCloseValue) {
		return true
	}

	return false
}

// SetFillCloseValue gets a reference to the given string and assigns it to the FillCloseValue field.
func (o *PositionTransaction) SetFillCloseValue(v string) {
	o.FillCloseValue = &v
}

// GetFillCloseFee returns the FillCloseFee field value if set, zero value otherwise.
func (o *PositionTransaction) GetFillCloseFee() string {
	if o == nil || IsNil(o.FillCloseFee) {
		var ret string
		return ret
	}
	return *o.FillCloseFee
}

// GetFillCloseFeeOk returns a tuple with the FillCloseFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFillCloseFeeOk() (*string, bool) {
	if o == nil || IsNil(o.FillCloseFee) {
		return nil, false
	}
	return o.FillCloseFee, true
}

// HasFillCloseFee returns a boolean if a field has been set.
func (o *PositionTransaction) HasFillCloseFee() bool {
	if o != nil && !IsNil(o.FillCloseFee) {
		return true
	}

	return false
}

// SetFillCloseFee gets a reference to the given string and assigns it to the FillCloseFee field.
func (o *PositionTransaction) SetFillCloseFee(v string) {
	o.FillCloseFee = &v
}

// GetFillOpenSize returns the FillOpenSize field value if set, zero value otherwise.
func (o *PositionTransaction) GetFillOpenSize() string {
	if o == nil || IsNil(o.FillOpenSize) {
		var ret string
		return ret
	}
	return *o.FillOpenSize
}

// GetFillOpenSizeOk returns a tuple with the FillOpenSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFillOpenSizeOk() (*string, bool) {
	if o == nil || IsNil(o.FillOpenSize) {
		return nil, false
	}
	return o.FillOpenSize, true
}

// HasFillOpenSize returns a boolean if a field has been set.
func (o *PositionTransaction) HasFillOpenSize() bool {
	if o != nil && !IsNil(o.FillOpenSize) {
		return true
	}

	return false
}

// SetFillOpenSize gets a reference to the given string and assigns it to the FillOpenSize field.
func (o *PositionTransaction) SetFillOpenSize(v string) {
	o.FillOpenSize = &v
}

// GetFillOpenValue returns the FillOpenValue field value if set, zero value otherwise.
func (o *PositionTransaction) GetFillOpenValue() string {
	if o == nil || IsNil(o.FillOpenValue) {
		var ret string
		return ret
	}
	return *o.FillOpenValue
}

// GetFillOpenValueOk returns a tuple with the FillOpenValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFillOpenValueOk() (*string, bool) {
	if o == nil || IsNil(o.FillOpenValue) {
		return nil, false
	}
	return o.FillOpenValue, true
}

// HasFillOpenValue returns a boolean if a field has been set.
func (o *PositionTransaction) HasFillOpenValue() bool {
	if o != nil && !IsNil(o.FillOpenValue) {
		return true
	}

	return false
}

// SetFillOpenValue gets a reference to the given string and assigns it to the FillOpenValue field.
func (o *PositionTransaction) SetFillOpenValue(v string) {
	o.FillOpenValue = &v
}

// GetFillOpenFee returns the FillOpenFee field value if set, zero value otherwise.
func (o *PositionTransaction) GetFillOpenFee() string {
	if o == nil || IsNil(o.FillOpenFee) {
		var ret string
		return ret
	}
	return *o.FillOpenFee
}

// GetFillOpenFeeOk returns a tuple with the FillOpenFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFillOpenFeeOk() (*string, bool) {
	if o == nil || IsNil(o.FillOpenFee) {
		return nil, false
	}
	return o.FillOpenFee, true
}

// HasFillOpenFee returns a boolean if a field has been set.
func (o *PositionTransaction) HasFillOpenFee() bool {
	if o != nil && !IsNil(o.FillOpenFee) {
		return true
	}

	return false
}

// SetFillOpenFee gets a reference to the given string and assigns it to the FillOpenFee field.
func (o *PositionTransaction) SetFillOpenFee(v string) {
	o.FillOpenFee = &v
}

// GetFillPrice returns the FillPrice field value if set, zero value otherwise.
func (o *PositionTransaction) GetFillPrice() string {
	if o == nil || IsNil(o.FillPrice) {
		var ret string
		return ret
	}
	return *o.FillPrice
}

// GetFillPriceOk returns a tuple with the FillPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFillPriceOk() (*string, bool) {
	if o == nil || IsNil(o.FillPrice) {
		return nil, false
	}
	return o.FillPrice, true
}

// HasFillPrice returns a boolean if a field has been set.
func (o *PositionTransaction) HasFillPrice() bool {
	if o != nil && !IsNil(o.FillPrice) {
		return true
	}

	return false
}

// SetFillPrice gets a reference to the given string and assigns it to the FillPrice field.
func (o *PositionTransaction) SetFillPrice(v string) {
	o.FillPrice = &v
}

// GetLiquidateFee returns the LiquidateFee field value if set, zero value otherwise.
func (o *PositionTransaction) GetLiquidateFee() string {
	if o == nil || IsNil(o.LiquidateFee) {
		var ret string
		return ret
	}
	return *o.LiquidateFee
}

// GetLiquidateFeeOk returns a tuple with the LiquidateFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetLiquidateFeeOk() (*string, bool) {
	if o == nil || IsNil(o.LiquidateFee) {
		return nil, false
	}
	return o.LiquidateFee, true
}

// HasLiquidateFee returns a boolean if a field has been set.
func (o *PositionTransaction) HasLiquidateFee() bool {
	if o != nil && !IsNil(o.LiquidateFee) {
		return true
	}

	return false
}

// SetLiquidateFee gets a reference to the given string and assigns it to the LiquidateFee field.
func (o *PositionTransaction) SetLiquidateFee(v string) {
	o.LiquidateFee = &v
}

// GetRealizePnl returns the RealizePnl field value if set, zero value otherwise.
func (o *PositionTransaction) GetRealizePnl() string {
	if o == nil || IsNil(o.RealizePnl) {
		var ret string
		return ret
	}
	return *o.RealizePnl
}

// GetRealizePnlOk returns a tuple with the RealizePnl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetRealizePnlOk() (*string, bool) {
	if o == nil || IsNil(o.RealizePnl) {
		return nil, false
	}
	return o.RealizePnl, true
}

// HasRealizePnl returns a boolean if a field has been set.
func (o *PositionTransaction) HasRealizePnl() bool {
	if o != nil && !IsNil(o.RealizePnl) {
		return true
	}

	return false
}

// SetRealizePnl gets a reference to the given string and assigns it to the RealizePnl field.
func (o *PositionTransaction) SetRealizePnl(v string) {
	o.RealizePnl = &v
}

// GetIsLiquidate returns the IsLiquidate field value if set, zero value otherwise.
func (o *PositionTransaction) GetIsLiquidate() bool {
	if o == nil || IsNil(o.IsLiquidate) {
		var ret bool
		return ret
	}
	return *o.IsLiquidate
}

// GetIsLiquidateOk returns a tuple with the IsLiquidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetIsLiquidateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLiquidate) {
		return nil, false
	}
	return o.IsLiquidate, true
}

// HasIsLiquidate returns a boolean if a field has been set.
func (o *PositionTransaction) HasIsLiquidate() bool {
	if o != nil && !IsNil(o.IsLiquidate) {
		return true
	}

	return false
}

// SetIsLiquidate gets a reference to the given bool and assigns it to the IsLiquidate field.
func (o *PositionTransaction) SetIsLiquidate(v bool) {
	o.IsLiquidate = &v
}

// GetIsDeleverage returns the IsDeleverage field value if set, zero value otherwise.
func (o *PositionTransaction) GetIsDeleverage() bool {
	if o == nil || IsNil(o.IsDeleverage) {
		var ret bool
		return ret
	}
	return *o.IsDeleverage
}

// GetIsDeleverageOk returns a tuple with the IsDeleverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetIsDeleverageOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleverage) {
		return nil, false
	}
	return o.IsDeleverage, true
}

// HasIsDeleverage returns a boolean if a field has been set.
func (o *PositionTransaction) HasIsDeleverage() bool {
	if o != nil && !IsNil(o.IsDeleverage) {
		return true
	}

	return false
}

// SetIsDeleverage gets a reference to the given bool and assigns it to the IsDeleverage field.
func (o *PositionTransaction) SetIsDeleverage(v bool) {
	o.IsDeleverage = &v
}

// GetFundingTime returns the FundingTime field value if set, zero value otherwise.
func (o *PositionTransaction) GetFundingTime() string {
	if o == nil || IsNil(o.FundingTime) {
		var ret string
		return ret
	}
	return *o.FundingTime
}

// GetFundingTimeOk returns a tuple with the FundingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFundingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.FundingTime) {
		return nil, false
	}
	return o.FundingTime, true
}

// HasFundingTime returns a boolean if a field has been set.
func (o *PositionTransaction) HasFundingTime() bool {
	if o != nil && !IsNil(o.FundingTime) {
		return true
	}

	return false
}

// SetFundingTime gets a reference to the given string and assigns it to the FundingTime field.
func (o *PositionTransaction) SetFundingTime(v string) {
	o.FundingTime = &v
}

// GetFundingRate returns the FundingRate field value if set, zero value otherwise.
func (o *PositionTransaction) GetFundingRate() string {
	if o == nil || IsNil(o.FundingRate) {
		var ret string
		return ret
	}
	return *o.FundingRate
}

// GetFundingRateOk returns a tuple with the FundingRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFundingRateOk() (*string, bool) {
	if o == nil || IsNil(o.FundingRate) {
		return nil, false
	}
	return o.FundingRate, true
}

// HasFundingRate returns a boolean if a field has been set.
func (o *PositionTransaction) HasFundingRate() bool {
	if o != nil && !IsNil(o.FundingRate) {
		return true
	}

	return false
}

// SetFundingRate gets a reference to the given string and assigns it to the FundingRate field.
func (o *PositionTransaction) SetFundingRate(v string) {
	o.FundingRate = &v
}

// GetFundingIndexPrice returns the FundingIndexPrice field value if set, zero value otherwise.
func (o *PositionTransaction) GetFundingIndexPrice() string {
	if o == nil || IsNil(o.FundingIndexPrice) {
		var ret string
		return ret
	}
	return *o.FundingIndexPrice
}

// GetFundingIndexPriceOk returns a tuple with the FundingIndexPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFundingIndexPriceOk() (*string, bool) {
	if o == nil || IsNil(o.FundingIndexPrice) {
		return nil, false
	}
	return o.FundingIndexPrice, true
}

// HasFundingIndexPrice returns a boolean if a field has been set.
func (o *PositionTransaction) HasFundingIndexPrice() bool {
	if o != nil && !IsNil(o.FundingIndexPrice) {
		return true
	}

	return false
}

// SetFundingIndexPrice gets a reference to the given string and assigns it to the FundingIndexPrice field.
func (o *PositionTransaction) SetFundingIndexPrice(v string) {
	o.FundingIndexPrice = &v
}

// GetFundingOraclePrice returns the FundingOraclePrice field value if set, zero value otherwise.
func (o *PositionTransaction) GetFundingOraclePrice() string {
	if o == nil || IsNil(o.FundingOraclePrice) {
		var ret string
		return ret
	}
	return *o.FundingOraclePrice
}

// GetFundingOraclePriceOk returns a tuple with the FundingOraclePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFundingOraclePriceOk() (*string, bool) {
	if o == nil || IsNil(o.FundingOraclePrice) {
		return nil, false
	}
	return o.FundingOraclePrice, true
}

// HasFundingOraclePrice returns a boolean if a field has been set.
func (o *PositionTransaction) HasFundingOraclePrice() bool {
	if o != nil && !IsNil(o.FundingOraclePrice) {
		return true
	}

	return false
}

// SetFundingOraclePrice gets a reference to the given string and assigns it to the FundingOraclePrice field.
func (o *PositionTransaction) SetFundingOraclePrice(v string) {
	o.FundingOraclePrice = &v
}

// GetFundingPositionSize returns the FundingPositionSize field value if set, zero value otherwise.
func (o *PositionTransaction) GetFundingPositionSize() string {
	if o == nil || IsNil(o.FundingPositionSize) {
		var ret string
		return ret
	}
	return *o.FundingPositionSize
}

// GetFundingPositionSizeOk returns a tuple with the FundingPositionSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetFundingPositionSizeOk() (*string, bool) {
	if o == nil || IsNil(o.FundingPositionSize) {
		return nil, false
	}
	return o.FundingPositionSize, true
}

// HasFundingPositionSize returns a boolean if a field has been set.
func (o *PositionTransaction) HasFundingPositionSize() bool {
	if o != nil && !IsNil(o.FundingPositionSize) {
		return true
	}

	return false
}

// SetFundingPositionSize gets a reference to the given string and assigns it to the FundingPositionSize field.
func (o *PositionTransaction) SetFundingPositionSize(v string) {
	o.FundingPositionSize = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *PositionTransaction) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *PositionTransaction) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *PositionTransaction) SetOrderId(v string) {
	o.OrderId = &v
}

// GetOrderFillTransactionId returns the OrderFillTransactionId field value if set, zero value otherwise.
func (o *PositionTransaction) GetOrderFillTransactionId() string {
	if o == nil || IsNil(o.OrderFillTransactionId) {
		var ret string
		return ret
	}
	return *o.OrderFillTransactionId
}

// GetOrderFillTransactionIdOk returns a tuple with the OrderFillTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetOrderFillTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderFillTransactionId) {
		return nil, false
	}
	return o.OrderFillTransactionId, true
}

// HasOrderFillTransactionId returns a boolean if a field has been set.
func (o *PositionTransaction) HasOrderFillTransactionId() bool {
	if o != nil && !IsNil(o.OrderFillTransactionId) {
		return true
	}

	return false
}

// SetOrderFillTransactionId gets a reference to the given string and assigns it to the OrderFillTransactionId field.
func (o *PositionTransaction) SetOrderFillTransactionId(v string) {
	o.OrderFillTransactionId = &v
}

// GetCollateralTransactionId returns the CollateralTransactionId field value if set, zero value otherwise.
func (o *PositionTransaction) GetCollateralTransactionId() string {
	if o == nil || IsNil(o.CollateralTransactionId) {
		var ret string
		return ret
	}
	return *o.CollateralTransactionId
}

// GetCollateralTransactionIdOk returns a tuple with the CollateralTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetCollateralTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CollateralTransactionId) {
		return nil, false
	}
	return o.CollateralTransactionId, true
}

// HasCollateralTransactionId returns a boolean if a field has been set.
func (o *PositionTransaction) HasCollateralTransactionId() bool {
	if o != nil && !IsNil(o.CollateralTransactionId) {
		return true
	}

	return false
}

// SetCollateralTransactionId gets a reference to the given string and assigns it to the CollateralTransactionId field.
func (o *PositionTransaction) SetCollateralTransactionId(v string) {
	o.CollateralTransactionId = &v
}

// GetForceTradeId returns the ForceTradeId field value if set, zero value otherwise.
func (o *PositionTransaction) GetForceTradeId() string {
	if o == nil || IsNil(o.ForceTradeId) {
		var ret string
		return ret
	}
	return *o.ForceTradeId
}

// GetForceTradeIdOk returns a tuple with the ForceTradeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetForceTradeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ForceTradeId) {
		return nil, false
	}
	return o.ForceTradeId, true
}

// HasForceTradeId returns a boolean if a field has been set.
func (o *PositionTransaction) HasForceTradeId() bool {
	if o != nil && !IsNil(o.ForceTradeId) {
		return true
	}

	return false
}

// SetForceTradeId gets a reference to the given string and assigns it to the ForceTradeId field.
func (o *PositionTransaction) SetForceTradeId(v string) {
	o.ForceTradeId = &v
}

// GetExtraType returns the ExtraType field value if set, zero value otherwise.
func (o *PositionTransaction) GetExtraType() string {
	if o == nil || IsNil(o.ExtraType) {
		var ret string
		return ret
	}
	return *o.ExtraType
}

// GetExtraTypeOk returns a tuple with the ExtraType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetExtraTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraType) {
		return nil, false
	}
	return o.ExtraType, true
}

// HasExtraType returns a boolean if a field has been set.
func (o *PositionTransaction) HasExtraType() bool {
	if o != nil && !IsNil(o.ExtraType) {
		return true
	}

	return false
}

// SetExtraType gets a reference to the given string and assigns it to the ExtraType field.
func (o *PositionTransaction) SetExtraType(v string) {
	o.ExtraType = &v
}

// GetExtraDataJson returns the ExtraDataJson field value if set, zero value otherwise.
func (o *PositionTransaction) GetExtraDataJson() string {
	if o == nil || IsNil(o.ExtraDataJson) {
		var ret string
		return ret
	}
	return *o.ExtraDataJson
}

// GetExtraDataJsonOk returns a tuple with the ExtraDataJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetExtraDataJsonOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraDataJson) {
		return nil, false
	}
	return o.ExtraDataJson, true
}

// HasExtraDataJson returns a boolean if a field has been set.
func (o *PositionTransaction) HasExtraDataJson() bool {
	if o != nil && !IsNil(o.ExtraDataJson) {
		return true
	}

	return false
}

// SetExtraDataJson gets a reference to the given string and assigns it to the ExtraDataJson field.
func (o *PositionTransaction) SetExtraDataJson(v string) {
	o.ExtraDataJson = &v
}

// GetCensorStatus returns the CensorStatus field value if set, zero value otherwise.
func (o *PositionTransaction) GetCensorStatus() string {
	if o == nil || IsNil(o.CensorStatus) {
		var ret string
		return ret
	}
	return *o.CensorStatus
}

// GetCensorStatusOk returns a tuple with the CensorStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetCensorStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CensorStatus) {
		return nil, false
	}
	return o.CensorStatus, true
}

// HasCensorStatus returns a boolean if a field has been set.
func (o *PositionTransaction) HasCensorStatus() bool {
	if o != nil && !IsNil(o.CensorStatus) {
		return true
	}

	return false
}

// SetCensorStatus gets a reference to the given string and assigns it to the CensorStatus field.
func (o *PositionTransaction) SetCensorStatus(v string) {
	o.CensorStatus = &v
}

// GetCensorTxId returns the CensorTxId field value if set, zero value otherwise.
func (o *PositionTransaction) GetCensorTxId() string {
	if o == nil || IsNil(o.CensorTxId) {
		var ret string
		return ret
	}
	return *o.CensorTxId
}

// GetCensorTxIdOk returns a tuple with the CensorTxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetCensorTxIdOk() (*string, bool) {
	if o == nil || IsNil(o.CensorTxId) {
		return nil, false
	}
	return o.CensorTxId, true
}

// HasCensorTxId returns a boolean if a field has been set.
func (o *PositionTransaction) HasCensorTxId() bool {
	if o != nil && !IsNil(o.CensorTxId) {
		return true
	}

	return false
}

// SetCensorTxId gets a reference to the given string and assigns it to the CensorTxId field.
func (o *PositionTransaction) SetCensorTxId(v string) {
	o.CensorTxId = &v
}

// GetCensorTime returns the CensorTime field value if set, zero value otherwise.
func (o *PositionTransaction) GetCensorTime() string {
	if o == nil || IsNil(o.CensorTime) {
		var ret string
		return ret
	}
	return *o.CensorTime
}

// GetCensorTimeOk returns a tuple with the CensorTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetCensorTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CensorTime) {
		return nil, false
	}
	return o.CensorTime, true
}

// HasCensorTime returns a boolean if a field has been set.
func (o *PositionTransaction) HasCensorTime() bool {
	if o != nil && !IsNil(o.CensorTime) {
		return true
	}

	return false
}

// SetCensorTime gets a reference to the given string and assigns it to the CensorTime field.
func (o *PositionTransaction) SetCensorTime(v string) {
	o.CensorTime = &v
}

// GetCensorFailCode returns the CensorFailCode field value if set, zero value otherwise.
func (o *PositionTransaction) GetCensorFailCode() string {
	if o == nil || IsNil(o.CensorFailCode) {
		var ret string
		return ret
	}
	return *o.CensorFailCode
}

// GetCensorFailCodeOk returns a tuple with the CensorFailCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetCensorFailCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CensorFailCode) {
		return nil, false
	}
	return o.CensorFailCode, true
}

// HasCensorFailCode returns a boolean if a field has been set.
func (o *PositionTransaction) HasCensorFailCode() bool {
	if o != nil && !IsNil(o.CensorFailCode) {
		return true
	}

	return false
}

// SetCensorFailCode gets a reference to the given string and assigns it to the CensorFailCode field.
func (o *PositionTransaction) SetCensorFailCode(v string) {
	o.CensorFailCode = &v
}

// GetCensorFailReason returns the CensorFailReason field value if set, zero value otherwise.
func (o *PositionTransaction) GetCensorFailReason() string {
	if o == nil || IsNil(o.CensorFailReason) {
		var ret string
		return ret
	}
	return *o.CensorFailReason
}

// GetCensorFailReasonOk returns a tuple with the CensorFailReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetCensorFailReasonOk() (*string, bool) {
	if o == nil || IsNil(o.CensorFailReason) {
		return nil, false
	}
	return o.CensorFailReason, true
}

// HasCensorFailReason returns a boolean if a field has been set.
func (o *PositionTransaction) HasCensorFailReason() bool {
	if o != nil && !IsNil(o.CensorFailReason) {
		return true
	}

	return false
}

// SetCensorFailReason gets a reference to the given string and assigns it to the CensorFailReason field.
func (o *PositionTransaction) SetCensorFailReason(v string) {
	o.CensorFailReason = &v
}

// GetL2TxId returns the L2TxId field value if set, zero value otherwise.
func (o *PositionTransaction) GetL2TxId() string {
	if o == nil || IsNil(o.L2TxId) {
		var ret string
		return ret
	}
	return *o.L2TxId
}

// GetL2TxIdOk returns a tuple with the L2TxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetL2TxIdOk() (*string, bool) {
	if o == nil || IsNil(o.L2TxId) {
		return nil, false
	}
	return o.L2TxId, true
}

// HasL2TxId returns a boolean if a field has been set.
func (o *PositionTransaction) HasL2TxId() bool {
	if o != nil && !IsNil(o.L2TxId) {
		return true
	}

	return false
}

// SetL2TxId gets a reference to the given string and assigns it to the L2TxId field.
func (o *PositionTransaction) SetL2TxId(v string) {
	o.L2TxId = &v
}

// GetL2RejectTime returns the L2RejectTime field value if set, zero value otherwise.
func (o *PositionTransaction) GetL2RejectTime() string {
	if o == nil || IsNil(o.L2RejectTime) {
		var ret string
		return ret
	}
	return *o.L2RejectTime
}

// GetL2RejectTimeOk returns a tuple with the L2RejectTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetL2RejectTimeOk() (*string, bool) {
	if o == nil || IsNil(o.L2RejectTime) {
		return nil, false
	}
	return o.L2RejectTime, true
}

// HasL2RejectTime returns a boolean if a field has been set.
func (o *PositionTransaction) HasL2RejectTime() bool {
	if o != nil && !IsNil(o.L2RejectTime) {
		return true
	}

	return false
}

// SetL2RejectTime gets a reference to the given string and assigns it to the L2RejectTime field.
func (o *PositionTransaction) SetL2RejectTime(v string) {
	o.L2RejectTime = &v
}

// GetL2RejectCode returns the L2RejectCode field value if set, zero value otherwise.
func (o *PositionTransaction) GetL2RejectCode() string {
	if o == nil || IsNil(o.L2RejectCode) {
		var ret string
		return ret
	}
	return *o.L2RejectCode
}

// GetL2RejectCodeOk returns a tuple with the L2RejectCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetL2RejectCodeOk() (*string, bool) {
	if o == nil || IsNil(o.L2RejectCode) {
		return nil, false
	}
	return o.L2RejectCode, true
}

// HasL2RejectCode returns a boolean if a field has been set.
func (o *PositionTransaction) HasL2RejectCode() bool {
	if o != nil && !IsNil(o.L2RejectCode) {
		return true
	}

	return false
}

// SetL2RejectCode gets a reference to the given string and assigns it to the L2RejectCode field.
func (o *PositionTransaction) SetL2RejectCode(v string) {
	o.L2RejectCode = &v
}

// GetL2RejectReason returns the L2RejectReason field value if set, zero value otherwise.
func (o *PositionTransaction) GetL2RejectReason() string {
	if o == nil || IsNil(o.L2RejectReason) {
		var ret string
		return ret
	}
	return *o.L2RejectReason
}

// GetL2RejectReasonOk returns a tuple with the L2RejectReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetL2RejectReasonOk() (*string, bool) {
	if o == nil || IsNil(o.L2RejectReason) {
		return nil, false
	}
	return o.L2RejectReason, true
}

// HasL2RejectReason returns a boolean if a field has been set.
func (o *PositionTransaction) HasL2RejectReason() bool {
	if o != nil && !IsNil(o.L2RejectReason) {
		return true
	}

	return false
}

// SetL2RejectReason gets a reference to the given string and assigns it to the L2RejectReason field.
func (o *PositionTransaction) SetL2RejectReason(v string) {
	o.L2RejectReason = &v
}

// GetL2ApprovedTime returns the L2ApprovedTime field value if set, zero value otherwise.
func (o *PositionTransaction) GetL2ApprovedTime() string {
	if o == nil || IsNil(o.L2ApprovedTime) {
		var ret string
		return ret
	}
	return *o.L2ApprovedTime
}

// GetL2ApprovedTimeOk returns a tuple with the L2ApprovedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetL2ApprovedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.L2ApprovedTime) {
		return nil, false
	}
	return o.L2ApprovedTime, true
}

// HasL2ApprovedTime returns a boolean if a field has been set.
func (o *PositionTransaction) HasL2ApprovedTime() bool {
	if o != nil && !IsNil(o.L2ApprovedTime) {
		return true
	}

	return false
}

// SetL2ApprovedTime gets a reference to the given string and assigns it to the L2ApprovedTime field.
func (o *PositionTransaction) SetL2ApprovedTime(v string) {
	o.L2ApprovedTime = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *PositionTransaction) GetCreatedTime() string {
	if o == nil || IsNil(o.CreatedTime) {
		var ret string
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetCreatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *PositionTransaction) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given string and assigns it to the CreatedTime field.
func (o *PositionTransaction) SetCreatedTime(v string) {
	o.CreatedTime = &v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *PositionTransaction) GetUpdatedTime() string {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret string
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionTransaction) GetUpdatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *PositionTransaction) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given string and assigns it to the UpdatedTime field.
func (o *PositionTransaction) SetUpdatedTime(v string) {
	o.UpdatedTime = &v
}

func (o PositionTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PositionTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.CoinId) {
		toSerialize["coinId"] = o.CoinId
	}
	if !IsNil(o.ContractId) {
		toSerialize["contractId"] = o.ContractId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DeltaOpenSize) {
		toSerialize["deltaOpenSize"] = o.DeltaOpenSize
	}
	if !IsNil(o.DeltaOpenValue) {
		toSerialize["deltaOpenValue"] = o.DeltaOpenValue
	}
	if !IsNil(o.DeltaOpenFee) {
		toSerialize["deltaOpenFee"] = o.DeltaOpenFee
	}
	if !IsNil(o.DeltaFundingFee) {
		toSerialize["deltaFundingFee"] = o.DeltaFundingFee
	}
	if !IsNil(o.BeforeOpenSize) {
		toSerialize["beforeOpenSize"] = o.BeforeOpenSize
	}
	if !IsNil(o.BeforeOpenValue) {
		toSerialize["beforeOpenValue"] = o.BeforeOpenValue
	}
	if !IsNil(o.BeforeOpenFee) {
		toSerialize["beforeOpenFee"] = o.BeforeOpenFee
	}
	if !IsNil(o.BeforeFundingFee) {
		toSerialize["beforeFundingFee"] = o.BeforeFundingFee
	}
	if !IsNil(o.FillCloseSize) {
		toSerialize["fillCloseSize"] = o.FillCloseSize
	}
	if !IsNil(o.FillCloseValue) {
		toSerialize["fillCloseValue"] = o.FillCloseValue
	}
	if !IsNil(o.FillCloseFee) {
		toSerialize["fillCloseFee"] = o.FillCloseFee
	}
	if !IsNil(o.FillOpenSize) {
		toSerialize["fillOpenSize"] = o.FillOpenSize
	}
	if !IsNil(o.FillOpenValue) {
		toSerialize["fillOpenValue"] = o.FillOpenValue
	}
	if !IsNil(o.FillOpenFee) {
		toSerialize["fillOpenFee"] = o.FillOpenFee
	}
	if !IsNil(o.FillPrice) {
		toSerialize["fillPrice"] = o.FillPrice
	}
	if !IsNil(o.LiquidateFee) {
		toSerialize["liquidateFee"] = o.LiquidateFee
	}
	if !IsNil(o.RealizePnl) {
		toSerialize["realizePnl"] = o.RealizePnl
	}
	if !IsNil(o.IsLiquidate) {
		toSerialize["isLiquidate"] = o.IsLiquidate
	}
	if !IsNil(o.IsDeleverage) {
		toSerialize["isDeleverage"] = o.IsDeleverage
	}
	if !IsNil(o.FundingTime) {
		toSerialize["fundingTime"] = o.FundingTime
	}
	if !IsNil(o.FundingRate) {
		toSerialize["fundingRate"] = o.FundingRate
	}
	if !IsNil(o.FundingIndexPrice) {
		toSerialize["fundingIndexPrice"] = o.FundingIndexPrice
	}
	if !IsNil(o.FundingOraclePrice) {
		toSerialize["fundingOraclePrice"] = o.FundingOraclePrice
	}
	if !IsNil(o.FundingPositionSize) {
		toSerialize["fundingPositionSize"] = o.FundingPositionSize
	}
	if !IsNil(o.OrderId) {
		toSerialize["orderId"] = o.OrderId
	}
	if !IsNil(o.OrderFillTransactionId) {
		toSerialize["orderFillTransactionId"] = o.OrderFillTransactionId
	}
	if !IsNil(o.CollateralTransactionId) {
		toSerialize["collateralTransactionId"] = o.CollateralTransactionId
	}
	if !IsNil(o.ForceTradeId) {
		toSerialize["forceTradeId"] = o.ForceTradeId
	}
	if !IsNil(o.ExtraType) {
		toSerialize["extraType"] = o.ExtraType
	}
	if !IsNil(o.ExtraDataJson) {
		toSerialize["extraDataJson"] = o.ExtraDataJson
	}
	if !IsNil(o.CensorStatus) {
		toSerialize["censorStatus"] = o.CensorStatus
	}
	if !IsNil(o.CensorTxId) {
		toSerialize["censorTxId"] = o.CensorTxId
	}
	if !IsNil(o.CensorTime) {
		toSerialize["censorTime"] = o.CensorTime
	}
	if !IsNil(o.CensorFailCode) {
		toSerialize["censorFailCode"] = o.CensorFailCode
	}
	if !IsNil(o.CensorFailReason) {
		toSerialize["censorFailReason"] = o.CensorFailReason
	}
	if !IsNil(o.L2TxId) {
		toSerialize["l2TxId"] = o.L2TxId
	}
	if !IsNil(o.L2RejectTime) {
		toSerialize["l2RejectTime"] = o.L2RejectTime
	}
	if !IsNil(o.L2RejectCode) {
		toSerialize["l2RejectCode"] = o.L2RejectCode
	}
	if !IsNil(o.L2RejectReason) {
		toSerialize["l2RejectReason"] = o.L2RejectReason
	}
	if !IsNil(o.L2ApprovedTime) {
		toSerialize["l2ApprovedTime"] = o.L2ApprovedTime
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["createdTime"] = o.CreatedTime
	}
	if !IsNil(o.UpdatedTime) {
		toSerialize["updatedTime"] = o.UpdatedTime
	}
	return toSerialize, nil
}

type NullablePositionTransaction struct {
	value *PositionTransaction
	isSet bool
}

func (v NullablePositionTransaction) Get() *PositionTransaction {
	return v.value
}

func (v *NullablePositionTransaction) Set(val *PositionTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionTransaction(val *PositionTransaction) *NullablePositionTransaction {
	return &NullablePositionTransaction{value: val, isSet: true}
}

func (v NullablePositionTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


