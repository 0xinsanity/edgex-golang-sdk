/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateUserParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserParam{}

// UpdateUserParam 更新用户信息-请求
type UpdateUserParam struct {
	// 昵称
	Nickname *string `json:"nickname,omitempty"`
	// 邮箱
	Email *string `json:"email,omitempty"`
	// 国家码
	Country *string `json:"country,omitempty"`
	// 语言
	Language *string `json:"language,omitempty"`
}

// NewUpdateUserParam instantiates a new UpdateUserParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserParam() *UpdateUserParam {
	this := UpdateUserParam{}
	return &this
}

// NewUpdateUserParamWithDefaults instantiates a new UpdateUserParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserParamWithDefaults() *UpdateUserParam {
	this := UpdateUserParam{}
	return &this
}

// GetNickname returns the Nickname field value if set, zero value otherwise.
func (o *UpdateUserParam) GetNickname() string {
	if o == nil || IsNil(o.Nickname) {
		var ret string
		return ret
	}
	return *o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserParam) GetNicknameOk() (*string, bool) {
	if o == nil || IsNil(o.Nickname) {
		return nil, false
	}
	return o.Nickname, true
}

// HasNickname returns a boolean if a field has been set.
func (o *UpdateUserParam) HasNickname() bool {
	if o != nil && !IsNil(o.Nickname) {
		return true
	}

	return false
}

// SetNickname gets a reference to the given string and assigns it to the Nickname field.
func (o *UpdateUserParam) SetNickname(v string) {
	o.Nickname = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateUserParam) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserParam) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateUserParam) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateUserParam) SetEmail(v string) {
	o.Email = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *UpdateUserParam) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserParam) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *UpdateUserParam) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *UpdateUserParam) SetCountry(v string) {
	o.Country = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *UpdateUserParam) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserParam) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *UpdateUserParam) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *UpdateUserParam) SetLanguage(v string) {
	o.Language = &v
}

func (o UpdateUserParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nickname) {
		toSerialize["nickname"] = o.Nickname
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	return toSerialize, nil
}

type NullableUpdateUserParam struct {
	value *UpdateUserParam
	isSet bool
}

func (v NullableUpdateUserParam) Get() *UpdateUserParam {
	return v.value
}

func (v *NullableUpdateUserParam) Set(val *UpdateUserParam) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserParam) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserParam(val *UpdateUserParam) *NullableUpdateUserParam {
	return &NullableUpdateUserParam{value: val, isSet: true}
}

func (v NullableUpdateUserParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


