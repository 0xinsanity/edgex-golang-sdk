/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserPreference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPreference{}

// UserPreference 用户设置
type UserPreference struct {
	// 用户id
	UserId *string `json:"userId,omitempty"`
	// 是否分享ETH地址
	IsSharingEthAddress *bool `json:"isSharingEthAddress,omitempty"`
	// 是否分享昵称
	IsSharingNickname *bool `json:"isSharingNickname,omitempty"`
	// 是否启用通用通知邮件
	IsEmailNotifyGeneralEnable *bool `json:"isEmailNotifyGeneralEnable,omitempty"`
	// 是否启用交易通知邮件
	IsEmailNotifyTradingEnable *bool `json:"isEmailNotifyTradingEnable,omitempty"`
	// 是否启用账户通知邮件
	IsEmailNotifyAccountEnable *bool `json:"isEmailNotifyAccountEnable,omitempty"`
	// 是否启用交易通知App推送
	IsAppNotifyTradingEnable *bool `json:"isAppNotifyTradingEnable,omitempty"`
	// 创建时间
	CreatedTime *string `json:"createdTime,omitempty"`
	// 更新时间
	UpdatedTime *string `json:"updatedTime,omitempty"`
}

// NewUserPreference instantiates a new UserPreference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPreference() *UserPreference {
	this := UserPreference{}
	return &this
}

// NewUserPreferenceWithDefaults instantiates a new UserPreference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPreferenceWithDefaults() *UserPreference {
	this := UserPreference{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserPreference) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserPreference) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserPreference) SetUserId(v string) {
	o.UserId = &v
}

// GetIsSharingEthAddress returns the IsSharingEthAddress field value if set, zero value otherwise.
func (o *UserPreference) GetIsSharingEthAddress() bool {
	if o == nil || IsNil(o.IsSharingEthAddress) {
		var ret bool
		return ret
	}
	return *o.IsSharingEthAddress
}

// GetIsSharingEthAddressOk returns a tuple with the IsSharingEthAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetIsSharingEthAddressOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSharingEthAddress) {
		return nil, false
	}
	return o.IsSharingEthAddress, true
}

// HasIsSharingEthAddress returns a boolean if a field has been set.
func (o *UserPreference) HasIsSharingEthAddress() bool {
	if o != nil && !IsNil(o.IsSharingEthAddress) {
		return true
	}

	return false
}

// SetIsSharingEthAddress gets a reference to the given bool and assigns it to the IsSharingEthAddress field.
func (o *UserPreference) SetIsSharingEthAddress(v bool) {
	o.IsSharingEthAddress = &v
}

// GetIsSharingNickname returns the IsSharingNickname field value if set, zero value otherwise.
func (o *UserPreference) GetIsSharingNickname() bool {
	if o == nil || IsNil(o.IsSharingNickname) {
		var ret bool
		return ret
	}
	return *o.IsSharingNickname
}

// GetIsSharingNicknameOk returns a tuple with the IsSharingNickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetIsSharingNicknameOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSharingNickname) {
		return nil, false
	}
	return o.IsSharingNickname, true
}

// HasIsSharingNickname returns a boolean if a field has been set.
func (o *UserPreference) HasIsSharingNickname() bool {
	if o != nil && !IsNil(o.IsSharingNickname) {
		return true
	}

	return false
}

// SetIsSharingNickname gets a reference to the given bool and assigns it to the IsSharingNickname field.
func (o *UserPreference) SetIsSharingNickname(v bool) {
	o.IsSharingNickname = &v
}

// GetIsEmailNotifyGeneralEnable returns the IsEmailNotifyGeneralEnable field value if set, zero value otherwise.
func (o *UserPreference) GetIsEmailNotifyGeneralEnable() bool {
	if o == nil || IsNil(o.IsEmailNotifyGeneralEnable) {
		var ret bool
		return ret
	}
	return *o.IsEmailNotifyGeneralEnable
}

// GetIsEmailNotifyGeneralEnableOk returns a tuple with the IsEmailNotifyGeneralEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetIsEmailNotifyGeneralEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEmailNotifyGeneralEnable) {
		return nil, false
	}
	return o.IsEmailNotifyGeneralEnable, true
}

// HasIsEmailNotifyGeneralEnable returns a boolean if a field has been set.
func (o *UserPreference) HasIsEmailNotifyGeneralEnable() bool {
	if o != nil && !IsNil(o.IsEmailNotifyGeneralEnable) {
		return true
	}

	return false
}

// SetIsEmailNotifyGeneralEnable gets a reference to the given bool and assigns it to the IsEmailNotifyGeneralEnable field.
func (o *UserPreference) SetIsEmailNotifyGeneralEnable(v bool) {
	o.IsEmailNotifyGeneralEnable = &v
}

// GetIsEmailNotifyTradingEnable returns the IsEmailNotifyTradingEnable field value if set, zero value otherwise.
func (o *UserPreference) GetIsEmailNotifyTradingEnable() bool {
	if o == nil || IsNil(o.IsEmailNotifyTradingEnable) {
		var ret bool
		return ret
	}
	return *o.IsEmailNotifyTradingEnable
}

// GetIsEmailNotifyTradingEnableOk returns a tuple with the IsEmailNotifyTradingEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetIsEmailNotifyTradingEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEmailNotifyTradingEnable) {
		return nil, false
	}
	return o.IsEmailNotifyTradingEnable, true
}

// HasIsEmailNotifyTradingEnable returns a boolean if a field has been set.
func (o *UserPreference) HasIsEmailNotifyTradingEnable() bool {
	if o != nil && !IsNil(o.IsEmailNotifyTradingEnable) {
		return true
	}

	return false
}

// SetIsEmailNotifyTradingEnable gets a reference to the given bool and assigns it to the IsEmailNotifyTradingEnable field.
func (o *UserPreference) SetIsEmailNotifyTradingEnable(v bool) {
	o.IsEmailNotifyTradingEnable = &v
}

// GetIsEmailNotifyAccountEnable returns the IsEmailNotifyAccountEnable field value if set, zero value otherwise.
func (o *UserPreference) GetIsEmailNotifyAccountEnable() bool {
	if o == nil || IsNil(o.IsEmailNotifyAccountEnable) {
		var ret bool
		return ret
	}
	return *o.IsEmailNotifyAccountEnable
}

// GetIsEmailNotifyAccountEnableOk returns a tuple with the IsEmailNotifyAccountEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetIsEmailNotifyAccountEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEmailNotifyAccountEnable) {
		return nil, false
	}
	return o.IsEmailNotifyAccountEnable, true
}

// HasIsEmailNotifyAccountEnable returns a boolean if a field has been set.
func (o *UserPreference) HasIsEmailNotifyAccountEnable() bool {
	if o != nil && !IsNil(o.IsEmailNotifyAccountEnable) {
		return true
	}

	return false
}

// SetIsEmailNotifyAccountEnable gets a reference to the given bool and assigns it to the IsEmailNotifyAccountEnable field.
func (o *UserPreference) SetIsEmailNotifyAccountEnable(v bool) {
	o.IsEmailNotifyAccountEnable = &v
}

// GetIsAppNotifyTradingEnable returns the IsAppNotifyTradingEnable field value if set, zero value otherwise.
func (o *UserPreference) GetIsAppNotifyTradingEnable() bool {
	if o == nil || IsNil(o.IsAppNotifyTradingEnable) {
		var ret bool
		return ret
	}
	return *o.IsAppNotifyTradingEnable
}

// GetIsAppNotifyTradingEnableOk returns a tuple with the IsAppNotifyTradingEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetIsAppNotifyTradingEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAppNotifyTradingEnable) {
		return nil, false
	}
	return o.IsAppNotifyTradingEnable, true
}

// HasIsAppNotifyTradingEnable returns a boolean if a field has been set.
func (o *UserPreference) HasIsAppNotifyTradingEnable() bool {
	if o != nil && !IsNil(o.IsAppNotifyTradingEnable) {
		return true
	}

	return false
}

// SetIsAppNotifyTradingEnable gets a reference to the given bool and assigns it to the IsAppNotifyTradingEnable field.
func (o *UserPreference) SetIsAppNotifyTradingEnable(v bool) {
	o.IsAppNotifyTradingEnable = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *UserPreference) GetCreatedTime() string {
	if o == nil || IsNil(o.CreatedTime) {
		var ret string
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetCreatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *UserPreference) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given string and assigns it to the CreatedTime field.
func (o *UserPreference) SetCreatedTime(v string) {
	o.CreatedTime = &v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *UserPreference) GetUpdatedTime() string {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret string
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreference) GetUpdatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *UserPreference) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given string and assigns it to the UpdatedTime field.
func (o *UserPreference) SetUpdatedTime(v string) {
	o.UpdatedTime = &v
}

func (o UserPreference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPreference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.IsSharingEthAddress) {
		toSerialize["isSharingEthAddress"] = o.IsSharingEthAddress
	}
	if !IsNil(o.IsSharingNickname) {
		toSerialize["isSharingNickname"] = o.IsSharingNickname
	}
	if !IsNil(o.IsEmailNotifyGeneralEnable) {
		toSerialize["isEmailNotifyGeneralEnable"] = o.IsEmailNotifyGeneralEnable
	}
	if !IsNil(o.IsEmailNotifyTradingEnable) {
		toSerialize["isEmailNotifyTradingEnable"] = o.IsEmailNotifyTradingEnable
	}
	if !IsNil(o.IsEmailNotifyAccountEnable) {
		toSerialize["isEmailNotifyAccountEnable"] = o.IsEmailNotifyAccountEnable
	}
	if !IsNil(o.IsAppNotifyTradingEnable) {
		toSerialize["isAppNotifyTradingEnable"] = o.IsAppNotifyTradingEnable
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["createdTime"] = o.CreatedTime
	}
	if !IsNil(o.UpdatedTime) {
		toSerialize["updatedTime"] = o.UpdatedTime
	}
	return toSerialize, nil
}

type NullableUserPreference struct {
	value *UserPreference
	isSet bool
}

func (v NullableUserPreference) Get() *UserPreference {
	return v.value
}

func (v *NullableUserPreference) Set(val *UserPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPreference(val *UserPreference) *NullableUserPreference {
	return &NullableUserPreference{value: val, isSet: true}
}

func (v NullableUserPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


