/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MultiChain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiChain{}

// MultiChain 跨链提币相关类
type MultiChain struct {
	// 充提资产id
	CoinId *string `json:"coinId,omitempty"`
	// 最大提币量
	MaxWithdraw *string `json:"maxWithdraw,omitempty"`
	// 最小提币量
	MinWithdraw *string `json:"minWithdraw,omitempty"`
	// 最小充币量
	MinDeposit *string `json:"minDeposit,omitempty"`
	// 支持的链
	ChainList []Chain `json:"chainList,omitempty"`
}

// NewMultiChain instantiates a new MultiChain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiChain() *MultiChain {
	this := MultiChain{}
	return &this
}

// NewMultiChainWithDefaults instantiates a new MultiChain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiChainWithDefaults() *MultiChain {
	this := MultiChain{}
	return &this
}

// GetCoinId returns the CoinId field value if set, zero value otherwise.
func (o *MultiChain) GetCoinId() string {
	if o == nil || IsNil(o.CoinId) {
		var ret string
		return ret
	}
	return *o.CoinId
}

// GetCoinIdOk returns a tuple with the CoinId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiChain) GetCoinIdOk() (*string, bool) {
	if o == nil || IsNil(o.CoinId) {
		return nil, false
	}
	return o.CoinId, true
}

// HasCoinId returns a boolean if a field has been set.
func (o *MultiChain) HasCoinId() bool {
	if o != nil && !IsNil(o.CoinId) {
		return true
	}

	return false
}

// SetCoinId gets a reference to the given string and assigns it to the CoinId field.
func (o *MultiChain) SetCoinId(v string) {
	o.CoinId = &v
}

// GetMaxWithdraw returns the MaxWithdraw field value if set, zero value otherwise.
func (o *MultiChain) GetMaxWithdraw() string {
	if o == nil || IsNil(o.MaxWithdraw) {
		var ret string
		return ret
	}
	return *o.MaxWithdraw
}

// GetMaxWithdrawOk returns a tuple with the MaxWithdraw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiChain) GetMaxWithdrawOk() (*string, bool) {
	if o == nil || IsNil(o.MaxWithdraw) {
		return nil, false
	}
	return o.MaxWithdraw, true
}

// HasMaxWithdraw returns a boolean if a field has been set.
func (o *MultiChain) HasMaxWithdraw() bool {
	if o != nil && !IsNil(o.MaxWithdraw) {
		return true
	}

	return false
}

// SetMaxWithdraw gets a reference to the given string and assigns it to the MaxWithdraw field.
func (o *MultiChain) SetMaxWithdraw(v string) {
	o.MaxWithdraw = &v
}

// GetMinWithdraw returns the MinWithdraw field value if set, zero value otherwise.
func (o *MultiChain) GetMinWithdraw() string {
	if o == nil || IsNil(o.MinWithdraw) {
		var ret string
		return ret
	}
	return *o.MinWithdraw
}

// GetMinWithdrawOk returns a tuple with the MinWithdraw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiChain) GetMinWithdrawOk() (*string, bool) {
	if o == nil || IsNil(o.MinWithdraw) {
		return nil, false
	}
	return o.MinWithdraw, true
}

// HasMinWithdraw returns a boolean if a field has been set.
func (o *MultiChain) HasMinWithdraw() bool {
	if o != nil && !IsNil(o.MinWithdraw) {
		return true
	}

	return false
}

// SetMinWithdraw gets a reference to the given string and assigns it to the MinWithdraw field.
func (o *MultiChain) SetMinWithdraw(v string) {
	o.MinWithdraw = &v
}

// GetMinDeposit returns the MinDeposit field value if set, zero value otherwise.
func (o *MultiChain) GetMinDeposit() string {
	if o == nil || IsNil(o.MinDeposit) {
		var ret string
		return ret
	}
	return *o.MinDeposit
}

// GetMinDepositOk returns a tuple with the MinDeposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiChain) GetMinDepositOk() (*string, bool) {
	if o == nil || IsNil(o.MinDeposit) {
		return nil, false
	}
	return o.MinDeposit, true
}

// HasMinDeposit returns a boolean if a field has been set.
func (o *MultiChain) HasMinDeposit() bool {
	if o != nil && !IsNil(o.MinDeposit) {
		return true
	}

	return false
}

// SetMinDeposit gets a reference to the given string and assigns it to the MinDeposit field.
func (o *MultiChain) SetMinDeposit(v string) {
	o.MinDeposit = &v
}

// GetChainList returns the ChainList field value if set, zero value otherwise.
func (o *MultiChain) GetChainList() []Chain {
	if o == nil || IsNil(o.ChainList) {
		var ret []Chain
		return ret
	}
	return o.ChainList
}

// GetChainListOk returns a tuple with the ChainList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiChain) GetChainListOk() ([]Chain, bool) {
	if o == nil || IsNil(o.ChainList) {
		return nil, false
	}
	return o.ChainList, true
}

// HasChainList returns a boolean if a field has been set.
func (o *MultiChain) HasChainList() bool {
	if o != nil && !IsNil(o.ChainList) {
		return true
	}

	return false
}

// SetChainList gets a reference to the given []Chain and assigns it to the ChainList field.
func (o *MultiChain) SetChainList(v []Chain) {
	o.ChainList = v
}

func (o MultiChain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiChain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CoinId) {
		toSerialize["coinId"] = o.CoinId
	}
	if !IsNil(o.MaxWithdraw) {
		toSerialize["maxWithdraw"] = o.MaxWithdraw
	}
	if !IsNil(o.MinWithdraw) {
		toSerialize["minWithdraw"] = o.MinWithdraw
	}
	if !IsNil(o.MinDeposit) {
		toSerialize["minDeposit"] = o.MinDeposit
	}
	if !IsNil(o.ChainList) {
		toSerialize["chainList"] = o.ChainList
	}
	return toSerialize, nil
}

type NullableMultiChain struct {
	value *MultiChain
	isSet bool
}

func (v NullableMultiChain) Get() *MultiChain {
	return v.value
}

func (v *NullableMultiChain) Set(val *MultiChain) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiChain) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiChain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiChain(val *MultiChain) *NullableMultiChain {
	return &NullableMultiChain{value: val, isSet: true}
}

func (v NullableMultiChain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiChain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


