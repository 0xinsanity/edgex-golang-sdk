/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// Class011inchPublicControllerAPIService Class011inchPublicControllerAPI service
type Class011inchPublicControllerAPIService service

type ApiGetAggregateExchangeDataRequest struct {
	ctx context.Context
	ApiService *Class011inchPublicControllerAPIService
	chainId *string
	src *string
	dst *string
	amount *string
	slippage *string
	from *string
	receiver *string
	disableEstimate *string
}

// 链id
func (r ApiGetAggregateExchangeDataRequest) ChainId(chainId string) ApiGetAggregateExchangeDataRequest {
	r.chainId = &chainId
	return r
}

// 输入代币合约地址
func (r ApiGetAggregateExchangeDataRequest) Src(src string) ApiGetAggregateExchangeDataRequest {
	r.src = &src
	return r
}

// 目标代币合约地址
func (r ApiGetAggregateExchangeDataRequest) Dst(dst string) ApiGetAggregateExchangeDataRequest {
	r.dst = &dst
	return r
}

// 输入金额，带精度
func (r ApiGetAggregateExchangeDataRequest) Amount(amount string) ApiGetAggregateExchangeDataRequest {
	r.amount = &amount
	return r
}

// 滑点
func (r ApiGetAggregateExchangeDataRequest) Slippage(slippage string) ApiGetAggregateExchangeDataRequest {
	r.slippage = &slippage
	return r
}

// 资金池合约地址
func (r ApiGetAggregateExchangeDataRequest) From(from string) ApiGetAggregateExchangeDataRequest {
	r.from = &from
	return r
}

// 资金池合约地址
func (r ApiGetAggregateExchangeDataRequest) Receiver(receiver string) ApiGetAggregateExchangeDataRequest {
	r.receiver = &receiver
	return r
}

// 是否关闭链上模拟执行
func (r ApiGetAggregateExchangeDataRequest) DisableEstimate(disableEstimate string) ApiGetAggregateExchangeDataRequest {
	r.disableEstimate = &disableEstimate
	return r
}

func (r ApiGetAggregateExchangeDataRequest) Execute() (*ResultGetAggregateExchangeData, *http.Response, error) {
	return r.ApiService.GetAggregateExchangeDataExecute(r)
}

/*
GetAggregateExchangeData 获取币对兑换汇率

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAggregateExchangeDataRequest
*/
func (a *Class011inchPublicControllerAPIService) GetAggregateExchangeData(ctx context.Context) ApiGetAggregateExchangeDataRequest {
	return ApiGetAggregateExchangeDataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultGetAggregateExchangeData
func (a *Class011inchPublicControllerAPIService) GetAggregateExchangeDataExecute(r ApiGetAggregateExchangeDataRequest) (*ResultGetAggregateExchangeData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultGetAggregateExchangeData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class011inchPublicControllerAPIService.GetAggregateExchangeData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/1inch/getAggregateExchangeData"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.chainId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chainId", r.chainId, "form", "")
	}
	if r.src != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "src", r.src, "form", "")
	}
	if r.dst != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dst", r.dst, "form", "")
	}
	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amount", r.amount, "form", "")
	}
	if r.slippage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slippage", r.slippage, "form", "")
	}
	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "form", "")
	}
	if r.receiver != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "receiver", r.receiver, "form", "")
	}
	if r.disableEstimate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disableEstimate", r.disableEstimate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetQuotaRequest struct {
	ctx context.Context
	ApiService *Class011inchPublicControllerAPIService
	chainId *string
	src *string
	dst *string
	amount *string
}

// 链id
func (r ApiGetQuotaRequest) ChainId(chainId string) ApiGetQuotaRequest {
	r.chainId = &chainId
	return r
}

// 输入代币合约地址
func (r ApiGetQuotaRequest) Src(src string) ApiGetQuotaRequest {
	r.src = &src
	return r
}

// 目标代币合约地址
func (r ApiGetQuotaRequest) Dst(dst string) ApiGetQuotaRequest {
	r.dst = &dst
	return r
}

// 输入金额，带精度
func (r ApiGetQuotaRequest) Amount(amount string) ApiGetQuotaRequest {
	r.amount = &amount
	return r
}

func (r ApiGetQuotaRequest) Execute() (*ResultGet1inchQuote, *http.Response, error) {
	return r.ApiService.GetQuotaExecute(r)
}

/*
GetQuota 获取币对兑换汇率

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetQuotaRequest
*/
func (a *Class011inchPublicControllerAPIService) GetQuota(ctx context.Context) ApiGetQuotaRequest {
	return ApiGetQuotaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultGet1inchQuote
func (a *Class011inchPublicControllerAPIService) GetQuotaExecute(r ApiGetQuotaRequest) (*ResultGet1inchQuote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultGet1inchQuote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class011inchPublicControllerAPIService.GetQuota")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/1inch/getQuota"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.chainId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chainId", r.chainId, "form", "")
	}
	if r.src != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "src", r.src, "form", "")
	}
	if r.dst != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dst", r.dst, "form", "")
	}
	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amount", r.amount, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
