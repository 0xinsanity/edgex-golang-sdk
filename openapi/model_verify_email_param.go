/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VerifyEmailParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifyEmailParam{}

// VerifyEmailParam 验证邮箱-请求
type VerifyEmailParam struct {
	// 验证邮件链接的userId
	UserId string `json:"userId"`
	// 验证邮件链接的token
	Token string `json:"token"`
}

type _VerifyEmailParam VerifyEmailParam

// NewVerifyEmailParam instantiates a new VerifyEmailParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyEmailParam(userId string, token string) *VerifyEmailParam {
	this := VerifyEmailParam{}
	this.UserId = userId
	this.Token = token
	return &this
}

// NewVerifyEmailParamWithDefaults instantiates a new VerifyEmailParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyEmailParamWithDefaults() *VerifyEmailParam {
	this := VerifyEmailParam{}
	return &this
}

// GetUserId returns the UserId field value
func (o *VerifyEmailParam) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *VerifyEmailParam) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *VerifyEmailParam) SetUserId(v string) {
	o.UserId = v
}

// GetToken returns the Token field value
func (o *VerifyEmailParam) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *VerifyEmailParam) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *VerifyEmailParam) SetToken(v string) {
	o.Token = v
}

func (o VerifyEmailParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyEmailParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

func (o *VerifyEmailParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerifyEmailParam := _VerifyEmailParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVerifyEmailParam)

	if err != nil {
		return err
	}

	*o = VerifyEmailParam(varVerifyEmailParam)

	return err
}

type NullableVerifyEmailParam struct {
	value *VerifyEmailParam
	isSet bool
}

func (v NullableVerifyEmailParam) Get() *VerifyEmailParam {
	return v.value
}

func (v *NullableVerifyEmailParam) Set(val *VerifyEmailParam) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyEmailParam) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyEmailParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyEmailParam(val *VerifyEmailParam) *NullableVerifyEmailParam {
	return &NullableVerifyEmailParam{value: val, isSet: true}
}

func (v NullableVerifyEmailParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyEmailParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


