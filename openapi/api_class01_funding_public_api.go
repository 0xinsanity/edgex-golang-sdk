/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// Class01FundingPublicApiAPIService Class01FundingPublicApiAPI service
type Class01FundingPublicApiAPIService service

type ApiGetFundingRatePageRequest struct {
	ctx context.Context
	ApiService *Class01FundingPublicApiAPIService
	contractId *string
	size *string
	offsetData *string
	filterSettlementFundingRate *string
	filterBeginTimeInclusive *string
	filterEndTimeExclusive *string
}

// 合约id
func (r ApiGetFundingRatePageRequest) ContractId(contractId string) ApiGetFundingRatePageRequest {
	r.contractId = &contractId
	return r
}

// 获取数量。必须大于0且小于等于100
func (r ApiGetFundingRatePageRequest) Size(size string) ApiGetFundingRatePageRequest {
	r.size = &size
	return r
}

// 翻页获取偏移。如果不填或者为空串，则获取第一页
func (r ApiGetFundingRatePageRequest) OffsetData(offsetData string) ApiGetFundingRatePageRequest {
	r.offsetData = &offsetData
	return r
}

// true则只查询结算资金费率(每8小时资金费率结算一次,每分钟计算一个预测资金费率)
func (r ApiGetFundingRatePageRequest) FilterSettlementFundingRate(filterSettlementFundingRate string) ApiGetFundingRatePageRequest {
	r.filterSettlementFundingRate = &filterSettlementFundingRate
	return r
}

// 开始时间, 不填代表获取最老的数据
func (r ApiGetFundingRatePageRequest) FilterBeginTimeInclusive(filterBeginTimeInclusive string) ApiGetFundingRatePageRequest {
	r.filterBeginTimeInclusive = &filterBeginTimeInclusive
	return r
}

// 结束时间，不填代表获取最新的数据
func (r ApiGetFundingRatePageRequest) FilterEndTimeExclusive(filterEndTimeExclusive string) ApiGetFundingRatePageRequest {
	r.filterEndTimeExclusive = &filterEndTimeExclusive
	return r
}

func (r ApiGetFundingRatePageRequest) Execute() (*ResultPageDataFundingRate, *http.Response, error) {
	return r.ApiService.GetFundingRatePageExecute(r)
}

/*
GetFundingRatePage 根据合约id分页查询资金费率历史

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFundingRatePageRequest
*/
func (a *Class01FundingPublicApiAPIService) GetFundingRatePage(ctx context.Context) ApiGetFundingRatePageRequest {
	return ApiGetFundingRatePageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultPageDataFundingRate
func (a *Class01FundingPublicApiAPIService) GetFundingRatePageExecute(r ApiGetFundingRatePageRequest) (*ResultPageDataFundingRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultPageDataFundingRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class01FundingPublicApiAPIService.GetFundingRatePage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/funding/getFundingRatePage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contractId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contractId", r.contractId, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.offsetData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offsetData", r.offsetData, "form", "")
	}
	if r.filterSettlementFundingRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterSettlementFundingRate", r.filterSettlementFundingRate, "form", "")
	}
	if r.filterBeginTimeInclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterBeginTimeInclusive", r.filterBeginTimeInclusive, "form", "")
	}
	if r.filterEndTimeExclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterEndTimeExclusive", r.filterEndTimeExclusive, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLatestFundingRateRequest struct {
	ctx context.Context
	ApiService *Class01FundingPublicApiAPIService
	contractId *string
}

// 合约id
func (r ApiGetLatestFundingRateRequest) ContractId(contractId string) ApiGetLatestFundingRateRequest {
	r.contractId = &contractId
	return r
}

func (r ApiGetLatestFundingRateRequest) Execute() (*ResultListFundingRate, *http.Response, error) {
	return r.ApiService.GetLatestFundingRateExecute(r)
}

/*
GetLatestFundingRate 根据合约id查询最新资金费率

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLatestFundingRateRequest
*/
func (a *Class01FundingPublicApiAPIService) GetLatestFundingRate(ctx context.Context) ApiGetLatestFundingRateRequest {
	return ApiGetLatestFundingRateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListFundingRate
func (a *Class01FundingPublicApiAPIService) GetLatestFundingRateExecute(r ApiGetLatestFundingRateRequest) (*ResultListFundingRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListFundingRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class01FundingPublicApiAPIService.GetLatestFundingRate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/funding/getLatestFundingRate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contractId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contractId", r.contractId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
