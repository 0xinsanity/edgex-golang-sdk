/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotifyTxRejectParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotifyTxRejectParam{}

// NotifyTxRejectParam 通知交易被拒绝参数
type NotifyTxRejectParam struct {
	// 交易id
	TxId *int64 `json:"tx_id,omitempty"`
	// 拒绝错误码
	ReasonCode *string `json:"reason_code,omitempty"`
	// 拒绝错误原因
	ReasonMsg *string `json:"reason_msg,omitempty"`
	// 替换交易列表
	Tx map[string]interface{} `json:"tx,omitempty"`
}

// NewNotifyTxRejectParam instantiates a new NotifyTxRejectParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyTxRejectParam() *NotifyTxRejectParam {
	this := NotifyTxRejectParam{}
	return &this
}

// NewNotifyTxRejectParamWithDefaults instantiates a new NotifyTxRejectParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyTxRejectParamWithDefaults() *NotifyTxRejectParam {
	this := NotifyTxRejectParam{}
	return &this
}

// GetTxId returns the TxId field value if set, zero value otherwise.
func (o *NotifyTxRejectParam) GetTxId() int64 {
	if o == nil || IsNil(o.TxId) {
		var ret int64
		return ret
	}
	return *o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyTxRejectParam) GetTxIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TxId) {
		return nil, false
	}
	return o.TxId, true
}

// HasTxId returns a boolean if a field has been set.
func (o *NotifyTxRejectParam) HasTxId() bool {
	if o != nil && !IsNil(o.TxId) {
		return true
	}

	return false
}

// SetTxId gets a reference to the given int64 and assigns it to the TxId field.
func (o *NotifyTxRejectParam) SetTxId(v int64) {
	o.TxId = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *NotifyTxRejectParam) GetReasonCode() string {
	if o == nil || IsNil(o.ReasonCode) {
		var ret string
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyTxRejectParam) GetReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *NotifyTxRejectParam) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given string and assigns it to the ReasonCode field.
func (o *NotifyTxRejectParam) SetReasonCode(v string) {
	o.ReasonCode = &v
}

// GetReasonMsg returns the ReasonMsg field value if set, zero value otherwise.
func (o *NotifyTxRejectParam) GetReasonMsg() string {
	if o == nil || IsNil(o.ReasonMsg) {
		var ret string
		return ret
	}
	return *o.ReasonMsg
}

// GetReasonMsgOk returns a tuple with the ReasonMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyTxRejectParam) GetReasonMsgOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonMsg) {
		return nil, false
	}
	return o.ReasonMsg, true
}

// HasReasonMsg returns a boolean if a field has been set.
func (o *NotifyTxRejectParam) HasReasonMsg() bool {
	if o != nil && !IsNil(o.ReasonMsg) {
		return true
	}

	return false
}

// SetReasonMsg gets a reference to the given string and assigns it to the ReasonMsg field.
func (o *NotifyTxRejectParam) SetReasonMsg(v string) {
	o.ReasonMsg = &v
}

// GetTx returns the Tx field value if set, zero value otherwise.
func (o *NotifyTxRejectParam) GetTx() map[string]interface{} {
	if o == nil || IsNil(o.Tx) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tx
}

// GetTxOk returns a tuple with the Tx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotifyTxRejectParam) GetTxOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tx) {
		return map[string]interface{}{}, false
	}
	return o.Tx, true
}

// HasTx returns a boolean if a field has been set.
func (o *NotifyTxRejectParam) HasTx() bool {
	if o != nil && !IsNil(o.Tx) {
		return true
	}

	return false
}

// SetTx gets a reference to the given map[string]interface{} and assigns it to the Tx field.
func (o *NotifyTxRejectParam) SetTx(v map[string]interface{}) {
	o.Tx = v
}

func (o NotifyTxRejectParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotifyTxRejectParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TxId) {
		toSerialize["tx_id"] = o.TxId
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reason_code"] = o.ReasonCode
	}
	if !IsNil(o.ReasonMsg) {
		toSerialize["reason_msg"] = o.ReasonMsg
	}
	if !IsNil(o.Tx) {
		toSerialize["tx"] = o.Tx
	}
	return toSerialize, nil
}

type NullableNotifyTxRejectParam struct {
	value *NotifyTxRejectParam
	isSet bool
}

func (v NullableNotifyTxRejectParam) Get() *NotifyTxRejectParam {
	return v.value
}

func (v *NullableNotifyTxRejectParam) Set(val *NotifyTxRejectParam) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyTxRejectParam) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyTxRejectParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyTxRejectParam(val *NotifyTxRejectParam) *NullableNotifyTxRejectParam {
	return &NullableNotifyTxRejectParam{value: val, isSet: true}
}

func (v NullableNotifyTxRejectParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyTxRejectParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


