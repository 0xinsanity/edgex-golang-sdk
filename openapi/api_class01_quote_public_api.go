/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// Class01QuotePublicApiAPIService Class01QuotePublicApiAPI service
type Class01QuotePublicApiAPIService service

type ApiGetAccurateOpenInterestRequest struct {
	ctx context.Context
	ApiService *Class01QuotePublicApiAPIService
	contractIdList *string
}

// 合约id集合
func (r ApiGetAccurateOpenInterestRequest) ContractIdList(contractIdList string) ApiGetAccurateOpenInterestRequest {
	r.contractIdList = &contractIdList
	return r
}

func (r ApiGetAccurateOpenInterestRequest) Execute() (*ResultListOpenInterest, *http.Response, error) {
	return r.ApiService.GetAccurateOpenInterestExecute(r)
}

/*
GetAccurateOpenInterest 获取精确OpenInterest

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAccurateOpenInterestRequest
*/
func (a *Class01QuotePublicApiAPIService) GetAccurateOpenInterest(ctx context.Context) ApiGetAccurateOpenInterestRequest {
	return ApiGetAccurateOpenInterestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListOpenInterest
func (a *Class01QuotePublicApiAPIService) GetAccurateOpenInterestExecute(r ApiGetAccurateOpenInterestRequest) (*ResultListOpenInterest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListOpenInterest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class01QuotePublicApiAPIService.GetAccurateOpenInterest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/quote/getAccurateOpenInterest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contractIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contractIdList", r.contractIdList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDepthRequest struct {
	ctx context.Context
	ApiService *Class01QuotePublicApiAPIService
	contractId *string
	level *string
}

// 合约id
func (r ApiGetDepthRequest) ContractId(contractId string) ApiGetDepthRequest {
	r.contractId = &contractId
	return r
}

// 深度档位 目前有15档和200档
func (r ApiGetDepthRequest) Level(level string) ApiGetDepthRequest {
	r.level = &level
	return r
}

func (r ApiGetDepthRequest) Execute() (*ResultListDepth, *http.Response, error) {
	return r.ApiService.GetDepthExecute(r)
}

/*
GetDepth 查询盘口深度

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetDepthRequest
*/
func (a *Class01QuotePublicApiAPIService) GetDepth(ctx context.Context) ApiGetDepthRequest {
	return ApiGetDepthRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListDepth
func (a *Class01QuotePublicApiAPIService) GetDepthExecute(r ApiGetDepthRequest) (*ResultListDepth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListDepth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class01QuotePublicApiAPIService.GetDepth")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/quote/getDepth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contractId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contractId", r.contractId, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExchangeLongShortRatioRequest struct {
	ctx context.Context
	ApiService *Class01QuotePublicApiAPIService
	range_ *string
	filterContractIdList *string
	filterExchangeList *string
}

// 如果为空的话，默认返回 range 最小的数据
func (r ApiGetExchangeLongShortRatioRequest) Range_(range_ string) ApiGetExchangeLongShortRatioRequest {
	r.range_ = &range_
	return r
}

// 如果为空的话，默认返回所有合约数据
func (r ApiGetExchangeLongShortRatioRequest) FilterContractIdList(filterContractIdList string) ApiGetExchangeLongShortRatioRequest {
	r.filterContractIdList = &filterContractIdList
	return r
}

// 如果为空的话，默认返回所有交易所数据
func (r ApiGetExchangeLongShortRatioRequest) FilterExchangeList(filterExchangeList string) ApiGetExchangeLongShortRatioRequest {
	r.filterExchangeList = &filterExchangeList
	return r
}

func (r ApiGetExchangeLongShortRatioRequest) Execute() (*ResultGetTickerSummaryModel, *http.Response, error) {
	return r.ApiService.GetExchangeLongShortRatioExecute(r)
}

/*
GetExchangeLongShortRatio 获取日交易统计

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetExchangeLongShortRatioRequest
*/
func (a *Class01QuotePublicApiAPIService) GetExchangeLongShortRatio(ctx context.Context) ApiGetExchangeLongShortRatioRequest {
	return ApiGetExchangeLongShortRatioRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultGetTickerSummaryModel
func (a *Class01QuotePublicApiAPIService) GetExchangeLongShortRatioExecute(r ApiGetExchangeLongShortRatioRequest) (*ResultGetTickerSummaryModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultGetTickerSummaryModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class01QuotePublicApiAPIService.GetExchangeLongShortRatio")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/quote/getExchangeLongShortRatio"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range", r.range_, "form", "")
	}
	if r.filterContractIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterContractIdList", r.filterContractIdList, "form", "")
	}
	if r.filterExchangeList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterExchangeList", r.filterExchangeList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetKlineRequest struct {
	ctx context.Context
	ApiService *Class01QuotePublicApiAPIService
	contractId *string
	priceType *string
	klineType *string
	size *string
	offsetData *string
	filterBeginKlineTimeInclusive *string
	filterEndKlineTimeExclusive *string
}

// 合约id
func (r ApiGetKlineRequest) ContractId(contractId string) ApiGetKlineRequest {
	r.contractId = &contractId
	return r
}

// 价格类型
func (r ApiGetKlineRequest) PriceType(priceType string) ApiGetKlineRequest {
	r.priceType = &priceType
	return r
}

// K线类型
func (r ApiGetKlineRequest) KlineType(klineType string) ApiGetKlineRequest {
	r.klineType = &klineType
	return r
}

// 获取数量。必须大于0且小于等于1000
func (r ApiGetKlineRequest) Size(size string) ApiGetKlineRequest {
	r.size = &size
	return r
}

// 翻页获取偏移。如果不填或者为空串，则获取第一页
func (r ApiGetKlineRequest) OffsetData(offsetData string) ApiGetKlineRequest {
	r.offsetData = &offsetData
	return r
}

// 查询开始时间（如果为0表示从当前时间）按照时间倒序向前查询返回
func (r ApiGetKlineRequest) FilterBeginKlineTimeInclusive(filterBeginKlineTimeInclusive string) ApiGetKlineRequest {
	r.filterBeginKlineTimeInclusive = &filterBeginKlineTimeInclusive
	return r
}

// 查询结束时间
func (r ApiGetKlineRequest) FilterEndKlineTimeExclusive(filterEndKlineTimeExclusive string) ApiGetKlineRequest {
	r.filterEndKlineTimeExclusive = &filterEndKlineTimeExclusive
	return r
}

func (r ApiGetKlineRequest) Execute() (*ResultPageDataKline, *http.Response, error) {
	return r.ApiService.GetKlineExecute(r)
}

/*
GetKline 查询K线

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetKlineRequest
*/
func (a *Class01QuotePublicApiAPIService) GetKline(ctx context.Context) ApiGetKlineRequest {
	return ApiGetKlineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultPageDataKline
func (a *Class01QuotePublicApiAPIService) GetKlineExecute(r ApiGetKlineRequest) (*ResultPageDataKline, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultPageDataKline
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class01QuotePublicApiAPIService.GetKline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/quote/getKline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contractId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contractId", r.contractId, "form", "")
	}
	if r.priceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priceType", r.priceType, "form", "")
	}
	if r.klineType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "klineType", r.klineType, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.offsetData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offsetData", r.offsetData, "form", "")
	}
	if r.filterBeginKlineTimeInclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterBeginKlineTimeInclusive", r.filterBeginKlineTimeInclusive, "form", "")
	}
	if r.filterEndKlineTimeExclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterEndKlineTimeExclusive", r.filterEndKlineTimeExclusive, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMultiContractKlineRequest struct {
	ctx context.Context
	ApiService *Class01QuotePublicApiAPIService
	contractIdList *string
	priceType *string
	klineType *string
	size *string
	filterBeginKlineTimeInclusive *string
	filterEndKlineTimeExclusive *string
}

// 合约id集合
func (r ApiGetMultiContractKlineRequest) ContractIdList(contractIdList string) ApiGetMultiContractKlineRequest {
	r.contractIdList = &contractIdList
	return r
}

// 价格类型
func (r ApiGetMultiContractKlineRequest) PriceType(priceType string) ApiGetMultiContractKlineRequest {
	r.priceType = &priceType
	return r
}

// K线类型
func (r ApiGetMultiContractKlineRequest) KlineType(klineType string) ApiGetMultiContractKlineRequest {
	r.klineType = &klineType
	return r
}

// 获取数量。必须大于0且小于等于200
func (r ApiGetMultiContractKlineRequest) Size(size string) ApiGetMultiContractKlineRequest {
	r.size = &size
	return r
}

// 查询开始时间（如果为0表示从当前时间）按照时间倒序向前查询返回
func (r ApiGetMultiContractKlineRequest) FilterBeginKlineTimeInclusive(filterBeginKlineTimeInclusive string) ApiGetMultiContractKlineRequest {
	r.filterBeginKlineTimeInclusive = &filterBeginKlineTimeInclusive
	return r
}

// 查询结束时间
func (r ApiGetMultiContractKlineRequest) FilterEndKlineTimeExclusive(filterEndKlineTimeExclusive string) ApiGetMultiContractKlineRequest {
	r.filterEndKlineTimeExclusive = &filterEndKlineTimeExclusive
	return r
}

func (r ApiGetMultiContractKlineRequest) Execute() (*ResultListContractKline, *http.Response, error) {
	return r.ApiService.GetMultiContractKlineExecute(r)
}

/*
GetMultiContractKline 查询多合约定量K线

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMultiContractKlineRequest
*/
func (a *Class01QuotePublicApiAPIService) GetMultiContractKline(ctx context.Context) ApiGetMultiContractKlineRequest {
	return ApiGetMultiContractKlineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListContractKline
func (a *Class01QuotePublicApiAPIService) GetMultiContractKlineExecute(r ApiGetMultiContractKlineRequest) (*ResultListContractKline, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListContractKline
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class01QuotePublicApiAPIService.GetMultiContractKline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/quote/getMultiContractKline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contractIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contractIdList", r.contractIdList, "form", "")
	}
	if r.priceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priceType", r.priceType, "form", "")
	}
	if r.klineType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "klineType", r.klineType, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.filterBeginKlineTimeInclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterBeginKlineTimeInclusive", r.filterBeginKlineTimeInclusive, "form", "")
	}
	if r.filterEndKlineTimeExclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterEndKlineTimeExclusive", r.filterEndKlineTimeExclusive, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetStatDayTradeRequest struct {
	ctx context.Context
	ApiService *Class01QuotePublicApiAPIService
	startDayTimeInclusive *string
	endDayTimeExclusive *string
}

// 过滤获取指定开始时间的交易统计信息
func (r ApiGetStatDayTradeRequest) StartDayTimeInclusive(startDayTimeInclusive string) ApiGetStatDayTradeRequest {
	r.startDayTimeInclusive = &startDayTimeInclusive
	return r
}

//  过滤获取指定结束时间的日交易统计信息
func (r ApiGetStatDayTradeRequest) EndDayTimeExclusive(endDayTimeExclusive string) ApiGetStatDayTradeRequest {
	r.endDayTimeExclusive = &endDayTimeExclusive
	return r
}

func (r ApiGetStatDayTradeRequest) Execute() (*ResultListStatDayTrade, *http.Response, error) {
	return r.ApiService.GetStatDayTradeExecute(r)
}

/*
GetStatDayTrade 获取日交易统计

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetStatDayTradeRequest
*/
func (a *Class01QuotePublicApiAPIService) GetStatDayTrade(ctx context.Context) ApiGetStatDayTradeRequest {
	return ApiGetStatDayTradeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListStatDayTrade
func (a *Class01QuotePublicApiAPIService) GetStatDayTradeExecute(r ApiGetStatDayTradeRequest) (*ResultListStatDayTrade, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListStatDayTrade
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class01QuotePublicApiAPIService.GetStatDayTrade")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/quote/getStatDayTrade"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDayTimeInclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDayTimeInclusive", r.startDayTimeInclusive, "form", "")
	}
	if r.endDayTimeExclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDayTimeExclusive", r.endDayTimeExclusive, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTickerRequest struct {
	ctx context.Context
	ApiService *Class01QuotePublicApiAPIService
	contractId *string
}

// 合约id
func (r ApiGetTickerRequest) ContractId(contractId string) ApiGetTickerRequest {
	r.contractId = &contractId
	return r
}

func (r ApiGetTickerRequest) Execute() (*ResultListTicker, *http.Response, error) {
	return r.ApiService.GetTickerExecute(r)
}

/*
GetTicker 查询24小时行情

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTickerRequest
*/
func (a *Class01QuotePublicApiAPIService) GetTicker(ctx context.Context) ApiGetTickerRequest {
	return ApiGetTickerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListTicker
func (a *Class01QuotePublicApiAPIService) GetTickerExecute(r ApiGetTickerRequest) (*ResultListTicker, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListTicker
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class01QuotePublicApiAPIService.GetTicker")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/quote/getTicker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contractId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contractId", r.contractId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTicketSummaryRequest struct {
	ctx context.Context
	ApiService *Class01QuotePublicApiAPIService
	period *string
}

// 汇总周期
func (r ApiGetTicketSummaryRequest) Period(period string) ApiGetTicketSummaryRequest {
	r.period = &period
	return r
}

func (r ApiGetTicketSummaryRequest) Execute() (*ResultGetTickerSummaryModel, *http.Response, error) {
	return r.ApiService.GetTicketSummaryExecute(r)
}

/*
GetTicketSummary 获取行情汇总

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTicketSummaryRequest
*/
func (a *Class01QuotePublicApiAPIService) GetTicketSummary(ctx context.Context) ApiGetTicketSummaryRequest {
	return ApiGetTicketSummaryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultGetTickerSummaryModel
func (a *Class01QuotePublicApiAPIService) GetTicketSummaryExecute(r ApiGetTicketSummaryRequest) (*ResultGetTickerSummaryModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultGetTickerSummaryModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class01QuotePublicApiAPIService.GetTicketSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/public/quote/getTicketSummary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
