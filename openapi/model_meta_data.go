/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetaData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaData{}

// MetaData 全局元数据
type MetaData struct {
	Global *Global `json:"global,omitempty"`
	// 所有货币元信息
	CoinList []Coin `json:"coinList,omitempty"`
	// 所有合约元信息
	ContractList []Contract `json:"contractList,omitempty"`
	MultiChain *MultiChain `json:"multiChain,omitempty"`
}

// NewMetaData instantiates a new MetaData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaData() *MetaData {
	this := MetaData{}
	return &this
}

// NewMetaDataWithDefaults instantiates a new MetaData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaDataWithDefaults() *MetaData {
	this := MetaData{}
	return &this
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *MetaData) GetGlobal() Global {
	if o == nil || IsNil(o.Global) {
		var ret Global
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaData) GetGlobalOk() (*Global, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *MetaData) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given Global and assigns it to the Global field.
func (o *MetaData) SetGlobal(v Global) {
	o.Global = &v
}

// GetCoinList returns the CoinList field value if set, zero value otherwise.
func (o *MetaData) GetCoinList() []Coin {
	if o == nil || IsNil(o.CoinList) {
		var ret []Coin
		return ret
	}
	return o.CoinList
}

// GetCoinListOk returns a tuple with the CoinList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaData) GetCoinListOk() ([]Coin, bool) {
	if o == nil || IsNil(o.CoinList) {
		return nil, false
	}
	return o.CoinList, true
}

// HasCoinList returns a boolean if a field has been set.
func (o *MetaData) HasCoinList() bool {
	if o != nil && !IsNil(o.CoinList) {
		return true
	}

	return false
}

// SetCoinList gets a reference to the given []Coin and assigns it to the CoinList field.
func (o *MetaData) SetCoinList(v []Coin) {
	o.CoinList = v
}

// GetContractList returns the ContractList field value if set, zero value otherwise.
func (o *MetaData) GetContractList() []Contract {
	if o == nil || IsNil(o.ContractList) {
		var ret []Contract
		return ret
	}
	return o.ContractList
}

// GetContractListOk returns a tuple with the ContractList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaData) GetContractListOk() ([]Contract, bool) {
	if o == nil || IsNil(o.ContractList) {
		return nil, false
	}
	return o.ContractList, true
}

// HasContractList returns a boolean if a field has been set.
func (o *MetaData) HasContractList() bool {
	if o != nil && !IsNil(o.ContractList) {
		return true
	}

	return false
}

// SetContractList gets a reference to the given []Contract and assigns it to the ContractList field.
func (o *MetaData) SetContractList(v []Contract) {
	o.ContractList = v
}

// GetMultiChain returns the MultiChain field value if set, zero value otherwise.
func (o *MetaData) GetMultiChain() MultiChain {
	if o == nil || IsNil(o.MultiChain) {
		var ret MultiChain
		return ret
	}
	return *o.MultiChain
}

// GetMultiChainOk returns a tuple with the MultiChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaData) GetMultiChainOk() (*MultiChain, bool) {
	if o == nil || IsNil(o.MultiChain) {
		return nil, false
	}
	return o.MultiChain, true
}

// HasMultiChain returns a boolean if a field has been set.
func (o *MetaData) HasMultiChain() bool {
	if o != nil && !IsNil(o.MultiChain) {
		return true
	}

	return false
}

// SetMultiChain gets a reference to the given MultiChain and assigns it to the MultiChain field.
func (o *MetaData) SetMultiChain(v MultiChain) {
	o.MultiChain = &v
}

func (o MetaData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if !IsNil(o.CoinList) {
		toSerialize["coinList"] = o.CoinList
	}
	if !IsNil(o.ContractList) {
		toSerialize["contractList"] = o.ContractList
	}
	if !IsNil(o.MultiChain) {
		toSerialize["multiChain"] = o.MultiChain
	}
	return toSerialize, nil
}

type NullableMetaData struct {
	value *MetaData
	isSet bool
}

func (v NullableMetaData) Get() *MetaData {
	return v.value
}

func (v *NullableMetaData) Set(val *MetaData) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaData) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaData(val *MetaData) *NullableMetaData {
	return &NullableMetaData{value: val, isSet: true}
}

func (v NullableMetaData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


