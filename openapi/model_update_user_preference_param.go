/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateUserPreferenceParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserPreferenceParam{}

// UpdateUserPreferenceParam 更新用户设置-请求
type UpdateUserPreferenceParam struct {
	// 是否将 eth address 展示给其他用户，如排行榜等，如果为否则中间部分会以 *** 展示
	IsSharingEthAddress *bool `json:"isSharingEthAddress,omitempty"`
	// 是否将 nickname 展示给其他用户，如排行榜等，如果为否则中间部分会以 *** 展示
	IsSharingNickname *bool `json:"isSharingNickname,omitempty"`
	// Newsletter, Market Updates, Product Updates
	IsEmailNotifyGeneralEnable *bool `json:"isEmailNotifyGeneralEnable,omitempty"`
	// Deposits、Withdrawals, Account updates
	IsEmailNotifyTradingEnable *bool `json:"isEmailNotifyTradingEnable,omitempty"`
	// Order Updates and Liquidation updates
	IsEmailNotifyAccountEnable *bool `json:"isEmailNotifyAccountEnable,omitempty"`
	// App push
	IsAppNotifyTradingEnable *bool `json:"isAppNotifyTradingEnable,omitempty"`
}

// NewUpdateUserPreferenceParam instantiates a new UpdateUserPreferenceParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserPreferenceParam() *UpdateUserPreferenceParam {
	this := UpdateUserPreferenceParam{}
	return &this
}

// NewUpdateUserPreferenceParamWithDefaults instantiates a new UpdateUserPreferenceParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserPreferenceParamWithDefaults() *UpdateUserPreferenceParam {
	this := UpdateUserPreferenceParam{}
	return &this
}

// GetIsSharingEthAddress returns the IsSharingEthAddress field value if set, zero value otherwise.
func (o *UpdateUserPreferenceParam) GetIsSharingEthAddress() bool {
	if o == nil || IsNil(o.IsSharingEthAddress) {
		var ret bool
		return ret
	}
	return *o.IsSharingEthAddress
}

// GetIsSharingEthAddressOk returns a tuple with the IsSharingEthAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPreferenceParam) GetIsSharingEthAddressOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSharingEthAddress) {
		return nil, false
	}
	return o.IsSharingEthAddress, true
}

// HasIsSharingEthAddress returns a boolean if a field has been set.
func (o *UpdateUserPreferenceParam) HasIsSharingEthAddress() bool {
	if o != nil && !IsNil(o.IsSharingEthAddress) {
		return true
	}

	return false
}

// SetIsSharingEthAddress gets a reference to the given bool and assigns it to the IsSharingEthAddress field.
func (o *UpdateUserPreferenceParam) SetIsSharingEthAddress(v bool) {
	o.IsSharingEthAddress = &v
}

// GetIsSharingNickname returns the IsSharingNickname field value if set, zero value otherwise.
func (o *UpdateUserPreferenceParam) GetIsSharingNickname() bool {
	if o == nil || IsNil(o.IsSharingNickname) {
		var ret bool
		return ret
	}
	return *o.IsSharingNickname
}

// GetIsSharingNicknameOk returns a tuple with the IsSharingNickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPreferenceParam) GetIsSharingNicknameOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSharingNickname) {
		return nil, false
	}
	return o.IsSharingNickname, true
}

// HasIsSharingNickname returns a boolean if a field has been set.
func (o *UpdateUserPreferenceParam) HasIsSharingNickname() bool {
	if o != nil && !IsNil(o.IsSharingNickname) {
		return true
	}

	return false
}

// SetIsSharingNickname gets a reference to the given bool and assigns it to the IsSharingNickname field.
func (o *UpdateUserPreferenceParam) SetIsSharingNickname(v bool) {
	o.IsSharingNickname = &v
}

// GetIsEmailNotifyGeneralEnable returns the IsEmailNotifyGeneralEnable field value if set, zero value otherwise.
func (o *UpdateUserPreferenceParam) GetIsEmailNotifyGeneralEnable() bool {
	if o == nil || IsNil(o.IsEmailNotifyGeneralEnable) {
		var ret bool
		return ret
	}
	return *o.IsEmailNotifyGeneralEnable
}

// GetIsEmailNotifyGeneralEnableOk returns a tuple with the IsEmailNotifyGeneralEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPreferenceParam) GetIsEmailNotifyGeneralEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEmailNotifyGeneralEnable) {
		return nil, false
	}
	return o.IsEmailNotifyGeneralEnable, true
}

// HasIsEmailNotifyGeneralEnable returns a boolean if a field has been set.
func (o *UpdateUserPreferenceParam) HasIsEmailNotifyGeneralEnable() bool {
	if o != nil && !IsNil(o.IsEmailNotifyGeneralEnable) {
		return true
	}

	return false
}

// SetIsEmailNotifyGeneralEnable gets a reference to the given bool and assigns it to the IsEmailNotifyGeneralEnable field.
func (o *UpdateUserPreferenceParam) SetIsEmailNotifyGeneralEnable(v bool) {
	o.IsEmailNotifyGeneralEnable = &v
}

// GetIsEmailNotifyTradingEnable returns the IsEmailNotifyTradingEnable field value if set, zero value otherwise.
func (o *UpdateUserPreferenceParam) GetIsEmailNotifyTradingEnable() bool {
	if o == nil || IsNil(o.IsEmailNotifyTradingEnable) {
		var ret bool
		return ret
	}
	return *o.IsEmailNotifyTradingEnable
}

// GetIsEmailNotifyTradingEnableOk returns a tuple with the IsEmailNotifyTradingEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPreferenceParam) GetIsEmailNotifyTradingEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEmailNotifyTradingEnable) {
		return nil, false
	}
	return o.IsEmailNotifyTradingEnable, true
}

// HasIsEmailNotifyTradingEnable returns a boolean if a field has been set.
func (o *UpdateUserPreferenceParam) HasIsEmailNotifyTradingEnable() bool {
	if o != nil && !IsNil(o.IsEmailNotifyTradingEnable) {
		return true
	}

	return false
}

// SetIsEmailNotifyTradingEnable gets a reference to the given bool and assigns it to the IsEmailNotifyTradingEnable field.
func (o *UpdateUserPreferenceParam) SetIsEmailNotifyTradingEnable(v bool) {
	o.IsEmailNotifyTradingEnable = &v
}

// GetIsEmailNotifyAccountEnable returns the IsEmailNotifyAccountEnable field value if set, zero value otherwise.
func (o *UpdateUserPreferenceParam) GetIsEmailNotifyAccountEnable() bool {
	if o == nil || IsNil(o.IsEmailNotifyAccountEnable) {
		var ret bool
		return ret
	}
	return *o.IsEmailNotifyAccountEnable
}

// GetIsEmailNotifyAccountEnableOk returns a tuple with the IsEmailNotifyAccountEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPreferenceParam) GetIsEmailNotifyAccountEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEmailNotifyAccountEnable) {
		return nil, false
	}
	return o.IsEmailNotifyAccountEnable, true
}

// HasIsEmailNotifyAccountEnable returns a boolean if a field has been set.
func (o *UpdateUserPreferenceParam) HasIsEmailNotifyAccountEnable() bool {
	if o != nil && !IsNil(o.IsEmailNotifyAccountEnable) {
		return true
	}

	return false
}

// SetIsEmailNotifyAccountEnable gets a reference to the given bool and assigns it to the IsEmailNotifyAccountEnable field.
func (o *UpdateUserPreferenceParam) SetIsEmailNotifyAccountEnable(v bool) {
	o.IsEmailNotifyAccountEnable = &v
}

// GetIsAppNotifyTradingEnable returns the IsAppNotifyTradingEnable field value if set, zero value otherwise.
func (o *UpdateUserPreferenceParam) GetIsAppNotifyTradingEnable() bool {
	if o == nil || IsNil(o.IsAppNotifyTradingEnable) {
		var ret bool
		return ret
	}
	return *o.IsAppNotifyTradingEnable
}

// GetIsAppNotifyTradingEnableOk returns a tuple with the IsAppNotifyTradingEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPreferenceParam) GetIsAppNotifyTradingEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAppNotifyTradingEnable) {
		return nil, false
	}
	return o.IsAppNotifyTradingEnable, true
}

// HasIsAppNotifyTradingEnable returns a boolean if a field has been set.
func (o *UpdateUserPreferenceParam) HasIsAppNotifyTradingEnable() bool {
	if o != nil && !IsNil(o.IsAppNotifyTradingEnable) {
		return true
	}

	return false
}

// SetIsAppNotifyTradingEnable gets a reference to the given bool and assigns it to the IsAppNotifyTradingEnable field.
func (o *UpdateUserPreferenceParam) SetIsAppNotifyTradingEnable(v bool) {
	o.IsAppNotifyTradingEnable = &v
}

func (o UpdateUserPreferenceParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserPreferenceParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsSharingEthAddress) {
		toSerialize["isSharingEthAddress"] = o.IsSharingEthAddress
	}
	if !IsNil(o.IsSharingNickname) {
		toSerialize["isSharingNickname"] = o.IsSharingNickname
	}
	if !IsNil(o.IsEmailNotifyGeneralEnable) {
		toSerialize["isEmailNotifyGeneralEnable"] = o.IsEmailNotifyGeneralEnable
	}
	if !IsNil(o.IsEmailNotifyTradingEnable) {
		toSerialize["isEmailNotifyTradingEnable"] = o.IsEmailNotifyTradingEnable
	}
	if !IsNil(o.IsEmailNotifyAccountEnable) {
		toSerialize["isEmailNotifyAccountEnable"] = o.IsEmailNotifyAccountEnable
	}
	if !IsNil(o.IsAppNotifyTradingEnable) {
		toSerialize["isAppNotifyTradingEnable"] = o.IsAppNotifyTradingEnable
	}
	return toSerialize, nil
}

type NullableUpdateUserPreferenceParam struct {
	value *UpdateUserPreferenceParam
	isSet bool
}

func (v NullableUpdateUserPreferenceParam) Get() *UpdateUserPreferenceParam {
	return v.value
}

func (v *NullableUpdateUserPreferenceParam) Set(val *UpdateUserPreferenceParam) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserPreferenceParam) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserPreferenceParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserPreferenceParam(val *UpdateUserPreferenceParam) *NullableUpdateUserPreferenceParam {
	return &NullableUpdateUserPreferenceParam{value: val, isSet: true}
}

func (v NullableUpdateUserPreferenceParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserPreferenceParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


