/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// Class06WithdrawPrivateApiAPIService Class06WithdrawPrivateApiAPI service
type Class06WithdrawPrivateApiAPIService service

type ApiCreateWithdrawRequest struct {
	ctx context.Context
	ApiService *Class06WithdrawPrivateApiAPIService
	createWithdrawParam *CreateWithdrawParam
}

func (r ApiCreateWithdrawRequest) CreateWithdrawParam(createWithdrawParam CreateWithdrawParam) ApiCreateWithdrawRequest {
	r.createWithdrawParam = &createWithdrawParam
	return r
}

func (r ApiCreateWithdrawRequest) Execute() (*ResultCreateWithdraw, *http.Response, error) {
	return r.ApiService.CreateWithdrawExecute(r)
}

/*
CreateWithdraw 创建提现单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateWithdrawRequest
*/
func (a *Class06WithdrawPrivateApiAPIService) CreateWithdraw(ctx context.Context) ApiCreateWithdrawRequest {
	return ApiCreateWithdrawRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultCreateWithdraw
func (a *Class06WithdrawPrivateApiAPIService) CreateWithdrawExecute(r ApiCreateWithdrawRequest) (*ResultCreateWithdraw, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultCreateWithdraw
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class06WithdrawPrivateApiAPIService.CreateWithdraw")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/withdraw/createWithdraw"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createWithdrawParam == nil {
		return localVarReturnValue, nil, reportError("createWithdrawParam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createWithdrawParam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetActiveWithdrawRequest struct {
	ctx context.Context
	ApiService *Class06WithdrawPrivateApiAPIService
	accountId *string
	size *string
	offsetData *string
	filterCoinIdList *string
	filterStatusList *string
	filterStartCreatedTimeInclusive *string
	filterEndCreatedTimeExclusive *string
}

// 账户id
func (r ApiGetActiveWithdrawRequest) AccountId(accountId string) ApiGetActiveWithdrawRequest {
	r.accountId = &accountId
	return r
}

// 获取数量。必须大于0且小于等于100
func (r ApiGetActiveWithdrawRequest) Size(size string) ApiGetActiveWithdrawRequest {
	r.size = &size
	return r
}

// 翻页获取偏移。如果不填或者为空串，则获取第一页
func (r ApiGetActiveWithdrawRequest) OffsetData(offsetData string) ApiGetActiveWithdrawRequest {
	r.offsetData = &offsetData
	return r
}

// 过滤获取对应抵押品coinId对应的提现单，如果为空则获取所有抵押品coinId的提现单
func (r ApiGetActiveWithdrawRequest) FilterCoinIdList(filterCoinIdList string) ApiGetActiveWithdrawRequest {
	r.filterCoinIdList = &filterCoinIdList
	return r
}

// 过滤获取指定状态的提现单，不填的话所有状态提现单
func (r ApiGetActiveWithdrawRequest) FilterStatusList(filterStatusList string) ApiGetActiveWithdrawRequest {
	r.filterStatusList = &filterStatusList
	return r
}

// 过滤获取指定开始时间创建的提现单 (包含)，不填或者为0的话就从最早开始
func (r ApiGetActiveWithdrawRequest) FilterStartCreatedTimeInclusive(filterStartCreatedTimeInclusive string) ApiGetActiveWithdrawRequest {
	r.filterStartCreatedTimeInclusive = &filterStartCreatedTimeInclusive
	return r
}

// 过滤获取指定结束时间创建的提现单 (不包含)，不填或者为0的话就到最近
func (r ApiGetActiveWithdrawRequest) FilterEndCreatedTimeExclusive(filterEndCreatedTimeExclusive string) ApiGetActiveWithdrawRequest {
	r.filterEndCreatedTimeExclusive = &filterEndCreatedTimeExclusive
	return r
}

func (r ApiGetActiveWithdrawRequest) Execute() (*ResultPageDataWithdraw, *http.Response, error) {
	return r.ApiService.GetActiveWithdrawExecute(r)
}

/*
GetActiveWithdraw 翻页获取提现单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetActiveWithdrawRequest
*/
func (a *Class06WithdrawPrivateApiAPIService) GetActiveWithdraw(ctx context.Context) ApiGetActiveWithdrawRequest {
	return ApiGetActiveWithdrawRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultPageDataWithdraw
func (a *Class06WithdrawPrivateApiAPIService) GetActiveWithdrawExecute(r ApiGetActiveWithdrawRequest) (*ResultPageDataWithdraw, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultPageDataWithdraw
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class06WithdrawPrivateApiAPIService.GetActiveWithdraw")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/withdraw/getActiveWithdraw"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.offsetData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offsetData", r.offsetData, "form", "")
	}
	if r.filterCoinIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterCoinIdList", r.filterCoinIdList, "form", "")
	}
	if r.filterStatusList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterStatusList", r.filterStatusList, "form", "")
	}
	if r.filterStartCreatedTimeInclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterStartCreatedTimeInclusive", r.filterStartCreatedTimeInclusive, "form", "")
	}
	if r.filterEndCreatedTimeExclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterEndCreatedTimeExclusive", r.filterEndCreatedTimeExclusive, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWithdrawAvailableAmountRequest struct {
	ctx context.Context
	ApiService *Class06WithdrawPrivateApiAPIService
	accountId *string
	coinId *string
}

// 账户id
func (r ApiGetWithdrawAvailableAmountRequest) AccountId(accountId string) ApiGetWithdrawAvailableAmountRequest {
	r.accountId = &accountId
	return r
}

// 币id
func (r ApiGetWithdrawAvailableAmountRequest) CoinId(coinId string) ApiGetWithdrawAvailableAmountRequest {
	r.coinId = &coinId
	return r
}

func (r ApiGetWithdrawAvailableAmountRequest) Execute() (*ResultGetWithdrawAvailableAmount, *http.Response, error) {
	return r.ApiService.GetWithdrawAvailableAmountExecute(r)
}

/*
GetWithdrawAvailableAmount 翻页获取提现单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetWithdrawAvailableAmountRequest
*/
func (a *Class06WithdrawPrivateApiAPIService) GetWithdrawAvailableAmount(ctx context.Context) ApiGetWithdrawAvailableAmountRequest {
	return ApiGetWithdrawAvailableAmountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultGetWithdrawAvailableAmount
func (a *Class06WithdrawPrivateApiAPIService) GetWithdrawAvailableAmountExecute(r ApiGetWithdrawAvailableAmountRequest) (*ResultGetWithdrawAvailableAmount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultGetWithdrawAvailableAmount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class06WithdrawPrivateApiAPIService.GetWithdrawAvailableAmount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/withdraw/getWithdrawAvailableAmount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.coinId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coinId", r.coinId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWithdrawByClientWithdrawIdRequest struct {
	ctx context.Context
	ApiService *Class06WithdrawPrivateApiAPIService
	accountId *string
	clientWithdrawIdList *string
}

// 账户id
func (r ApiGetWithdrawByClientWithdrawIdRequest) AccountId(accountId string) ApiGetWithdrawByClientWithdrawIdRequest {
	r.accountId = &accountId
	return r
}

// 提现单id
func (r ApiGetWithdrawByClientWithdrawIdRequest) ClientWithdrawIdList(clientWithdrawIdList string) ApiGetWithdrawByClientWithdrawIdRequest {
	r.clientWithdrawIdList = &clientWithdrawIdList
	return r
}

func (r ApiGetWithdrawByClientWithdrawIdRequest) Execute() (*ResultListWithdraw, *http.Response, error) {
	return r.ApiService.GetWithdrawByClientWithdrawIdExecute(r)
}

/*
GetWithdrawByClientWithdrawId 根据充值单id批量获取提现单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetWithdrawByClientWithdrawIdRequest
*/
func (a *Class06WithdrawPrivateApiAPIService) GetWithdrawByClientWithdrawId(ctx context.Context) ApiGetWithdrawByClientWithdrawIdRequest {
	return ApiGetWithdrawByClientWithdrawIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListWithdraw
func (a *Class06WithdrawPrivateApiAPIService) GetWithdrawByClientWithdrawIdExecute(r ApiGetWithdrawByClientWithdrawIdRequest) (*ResultListWithdraw, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListWithdraw
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class06WithdrawPrivateApiAPIService.GetWithdrawByClientWithdrawId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/withdraw/getWithdrawByClientWithdrawId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.clientWithdrawIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clientWithdrawIdList", r.clientWithdrawIdList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWithdrawByIdRequest struct {
	ctx context.Context
	ApiService *Class06WithdrawPrivateApiAPIService
	accountId *string
	withdrawIdList *string
}

// 账户id
func (r ApiGetWithdrawByIdRequest) AccountId(accountId string) ApiGetWithdrawByIdRequest {
	r.accountId = &accountId
	return r
}

// 提现单id
func (r ApiGetWithdrawByIdRequest) WithdrawIdList(withdrawIdList string) ApiGetWithdrawByIdRequest {
	r.withdrawIdList = &withdrawIdList
	return r
}

func (r ApiGetWithdrawByIdRequest) Execute() (*ResultListWithdraw, *http.Response, error) {
	return r.ApiService.GetWithdrawByIdExecute(r)
}

/*
GetWithdrawById 根据充值单id批量获取提现单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetWithdrawByIdRequest
*/
func (a *Class06WithdrawPrivateApiAPIService) GetWithdrawById(ctx context.Context) ApiGetWithdrawByIdRequest {
	return ApiGetWithdrawByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListWithdraw
func (a *Class06WithdrawPrivateApiAPIService) GetWithdrawByIdExecute(r ApiGetWithdrawByIdRequest) (*ResultListWithdraw, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListWithdraw
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class06WithdrawPrivateApiAPIService.GetWithdrawById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/withdraw/getWithdrawById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.withdrawIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withdrawIdList", r.withdrawIdList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
