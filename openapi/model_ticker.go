/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Ticker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ticker{}

// Ticker 24小时行情
type Ticker struct {
	// 合约ID
	ContractId *string `json:"contractId,omitempty"`
	// 合约名称
	ContractName *string `json:"contractName,omitempty"`
	// 价格涨跌幅
	PriceChange *string `json:"priceChange,omitempty"`
	// 价格涨跌幅百分比
	PriceChangePercent *string `json:"priceChangePercent,omitempty"`
	// 24小时成交笔数
	Trades *string `json:"trades,omitempty"`
	// 24小时成交量
	Size *string `json:"size,omitempty"`
	// 24小时成交额
	Value *string `json:"value,omitempty"`
	// 24小时最高价
	High *string `json:"high,omitempty"`
	// 24小时最低价
	Low *string `json:"low,omitempty"`
	// 24小时内开盘价
	Open *string `json:"open,omitempty"`
	// 24小时内收盘价
	Close *string `json:"close,omitempty"`
	// 24小时最高价时间
	HighTime *string `json:"highTime,omitempty"`
	// 24小时最低价时间
	LowTime *string `json:"lowTime,omitempty"`
	// 24小时行情开始时间
	StartTime *string `json:"startTime,omitempty"`
	// 24小时行情结束时间
	EndTime *string `json:"endTime,omitempty"`
	// 最新成交价
	LastPrice *string `json:"lastPrice,omitempty"`
	// 当前指数价格
	IndexPrice *string `json:"indexPrice,omitempty"`
	// 当前预言机价格
	OraclePrice *string `json:"oraclePrice,omitempty"`
	// 未平仓持仓量
	OpenInterest *string `json:"openInterest,omitempty"`
	// 当前已经结算的资金费率
	FundingRate *string `json:"fundingRate,omitempty"`
	// 资金费率结算时间
	FundingTime *string `json:"fundingTime,omitempty"`
	// 下次资金费率结算时间
	NextFundingTime *string `json:"nextFundingTime,omitempty"`
}

// NewTicker instantiates a new Ticker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicker() *Ticker {
	this := Ticker{}
	return &this
}

// NewTickerWithDefaults instantiates a new Ticker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTickerWithDefaults() *Ticker {
	this := Ticker{}
	return &this
}

// GetContractId returns the ContractId field value if set, zero value otherwise.
func (o *Ticker) GetContractId() string {
	if o == nil || IsNil(o.ContractId) {
		var ret string
		return ret
	}
	return *o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetContractIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContractId) {
		return nil, false
	}
	return o.ContractId, true
}

// HasContractId returns a boolean if a field has been set.
func (o *Ticker) HasContractId() bool {
	if o != nil && !IsNil(o.ContractId) {
		return true
	}

	return false
}

// SetContractId gets a reference to the given string and assigns it to the ContractId field.
func (o *Ticker) SetContractId(v string) {
	o.ContractId = &v
}

// GetContractName returns the ContractName field value if set, zero value otherwise.
func (o *Ticker) GetContractName() string {
	if o == nil || IsNil(o.ContractName) {
		var ret string
		return ret
	}
	return *o.ContractName
}

// GetContractNameOk returns a tuple with the ContractName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetContractNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContractName) {
		return nil, false
	}
	return o.ContractName, true
}

// HasContractName returns a boolean if a field has been set.
func (o *Ticker) HasContractName() bool {
	if o != nil && !IsNil(o.ContractName) {
		return true
	}

	return false
}

// SetContractName gets a reference to the given string and assigns it to the ContractName field.
func (o *Ticker) SetContractName(v string) {
	o.ContractName = &v
}

// GetPriceChange returns the PriceChange field value if set, zero value otherwise.
func (o *Ticker) GetPriceChange() string {
	if o == nil || IsNil(o.PriceChange) {
		var ret string
		return ret
	}
	return *o.PriceChange
}

// GetPriceChangeOk returns a tuple with the PriceChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetPriceChangeOk() (*string, bool) {
	if o == nil || IsNil(o.PriceChange) {
		return nil, false
	}
	return o.PriceChange, true
}

// HasPriceChange returns a boolean if a field has been set.
func (o *Ticker) HasPriceChange() bool {
	if o != nil && !IsNil(o.PriceChange) {
		return true
	}

	return false
}

// SetPriceChange gets a reference to the given string and assigns it to the PriceChange field.
func (o *Ticker) SetPriceChange(v string) {
	o.PriceChange = &v
}

// GetPriceChangePercent returns the PriceChangePercent field value if set, zero value otherwise.
func (o *Ticker) GetPriceChangePercent() string {
	if o == nil || IsNil(o.PriceChangePercent) {
		var ret string
		return ret
	}
	return *o.PriceChangePercent
}

// GetPriceChangePercentOk returns a tuple with the PriceChangePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetPriceChangePercentOk() (*string, bool) {
	if o == nil || IsNil(o.PriceChangePercent) {
		return nil, false
	}
	return o.PriceChangePercent, true
}

// HasPriceChangePercent returns a boolean if a field has been set.
func (o *Ticker) HasPriceChangePercent() bool {
	if o != nil && !IsNil(o.PriceChangePercent) {
		return true
	}

	return false
}

// SetPriceChangePercent gets a reference to the given string and assigns it to the PriceChangePercent field.
func (o *Ticker) SetPriceChangePercent(v string) {
	o.PriceChangePercent = &v
}

// GetTrades returns the Trades field value if set, zero value otherwise.
func (o *Ticker) GetTrades() string {
	if o == nil || IsNil(o.Trades) {
		var ret string
		return ret
	}
	return *o.Trades
}

// GetTradesOk returns a tuple with the Trades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetTradesOk() (*string, bool) {
	if o == nil || IsNil(o.Trades) {
		return nil, false
	}
	return o.Trades, true
}

// HasTrades returns a boolean if a field has been set.
func (o *Ticker) HasTrades() bool {
	if o != nil && !IsNil(o.Trades) {
		return true
	}

	return false
}

// SetTrades gets a reference to the given string and assigns it to the Trades field.
func (o *Ticker) SetTrades(v string) {
	o.Trades = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Ticker) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Ticker) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *Ticker) SetSize(v string) {
	o.Size = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Ticker) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Ticker) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Ticker) SetValue(v string) {
	o.Value = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *Ticker) GetHigh() string {
	if o == nil || IsNil(o.High) {
		var ret string
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetHighOk() (*string, bool) {
	if o == nil || IsNil(o.High) {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *Ticker) HasHigh() bool {
	if o != nil && !IsNil(o.High) {
		return true
	}

	return false
}

// SetHigh gets a reference to the given string and assigns it to the High field.
func (o *Ticker) SetHigh(v string) {
	o.High = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *Ticker) GetLow() string {
	if o == nil || IsNil(o.Low) {
		var ret string
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetLowOk() (*string, bool) {
	if o == nil || IsNil(o.Low) {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *Ticker) HasLow() bool {
	if o != nil && !IsNil(o.Low) {
		return true
	}

	return false
}

// SetLow gets a reference to the given string and assigns it to the Low field.
func (o *Ticker) SetLow(v string) {
	o.Low = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *Ticker) GetOpen() string {
	if o == nil || IsNil(o.Open) {
		var ret string
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetOpenOk() (*string, bool) {
	if o == nil || IsNil(o.Open) {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *Ticker) HasOpen() bool {
	if o != nil && !IsNil(o.Open) {
		return true
	}

	return false
}

// SetOpen gets a reference to the given string and assigns it to the Open field.
func (o *Ticker) SetOpen(v string) {
	o.Open = &v
}

// GetClose returns the Close field value if set, zero value otherwise.
func (o *Ticker) GetClose() string {
	if o == nil || IsNil(o.Close) {
		var ret string
		return ret
	}
	return *o.Close
}

// GetCloseOk returns a tuple with the Close field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetCloseOk() (*string, bool) {
	if o == nil || IsNil(o.Close) {
		return nil, false
	}
	return o.Close, true
}

// HasClose returns a boolean if a field has been set.
func (o *Ticker) HasClose() bool {
	if o != nil && !IsNil(o.Close) {
		return true
	}

	return false
}

// SetClose gets a reference to the given string and assigns it to the Close field.
func (o *Ticker) SetClose(v string) {
	o.Close = &v
}

// GetHighTime returns the HighTime field value if set, zero value otherwise.
func (o *Ticker) GetHighTime() string {
	if o == nil || IsNil(o.HighTime) {
		var ret string
		return ret
	}
	return *o.HighTime
}

// GetHighTimeOk returns a tuple with the HighTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetHighTimeOk() (*string, bool) {
	if o == nil || IsNil(o.HighTime) {
		return nil, false
	}
	return o.HighTime, true
}

// HasHighTime returns a boolean if a field has been set.
func (o *Ticker) HasHighTime() bool {
	if o != nil && !IsNil(o.HighTime) {
		return true
	}

	return false
}

// SetHighTime gets a reference to the given string and assigns it to the HighTime field.
func (o *Ticker) SetHighTime(v string) {
	o.HighTime = &v
}

// GetLowTime returns the LowTime field value if set, zero value otherwise.
func (o *Ticker) GetLowTime() string {
	if o == nil || IsNil(o.LowTime) {
		var ret string
		return ret
	}
	return *o.LowTime
}

// GetLowTimeOk returns a tuple with the LowTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetLowTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LowTime) {
		return nil, false
	}
	return o.LowTime, true
}

// HasLowTime returns a boolean if a field has been set.
func (o *Ticker) HasLowTime() bool {
	if o != nil && !IsNil(o.LowTime) {
		return true
	}

	return false
}

// SetLowTime gets a reference to the given string and assigns it to the LowTime field.
func (o *Ticker) SetLowTime(v string) {
	o.LowTime = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *Ticker) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *Ticker) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *Ticker) SetStartTime(v string) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *Ticker) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *Ticker) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *Ticker) SetEndTime(v string) {
	o.EndTime = &v
}

// GetLastPrice returns the LastPrice field value if set, zero value otherwise.
func (o *Ticker) GetLastPrice() string {
	if o == nil || IsNil(o.LastPrice) {
		var ret string
		return ret
	}
	return *o.LastPrice
}

// GetLastPriceOk returns a tuple with the LastPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetLastPriceOk() (*string, bool) {
	if o == nil || IsNil(o.LastPrice) {
		return nil, false
	}
	return o.LastPrice, true
}

// HasLastPrice returns a boolean if a field has been set.
func (o *Ticker) HasLastPrice() bool {
	if o != nil && !IsNil(o.LastPrice) {
		return true
	}

	return false
}

// SetLastPrice gets a reference to the given string and assigns it to the LastPrice field.
func (o *Ticker) SetLastPrice(v string) {
	o.LastPrice = &v
}

// GetIndexPrice returns the IndexPrice field value if set, zero value otherwise.
func (o *Ticker) GetIndexPrice() string {
	if o == nil || IsNil(o.IndexPrice) {
		var ret string
		return ret
	}
	return *o.IndexPrice
}

// GetIndexPriceOk returns a tuple with the IndexPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetIndexPriceOk() (*string, bool) {
	if o == nil || IsNil(o.IndexPrice) {
		return nil, false
	}
	return o.IndexPrice, true
}

// HasIndexPrice returns a boolean if a field has been set.
func (o *Ticker) HasIndexPrice() bool {
	if o != nil && !IsNil(o.IndexPrice) {
		return true
	}

	return false
}

// SetIndexPrice gets a reference to the given string and assigns it to the IndexPrice field.
func (o *Ticker) SetIndexPrice(v string) {
	o.IndexPrice = &v
}

// GetOraclePrice returns the OraclePrice field value if set, zero value otherwise.
func (o *Ticker) GetOraclePrice() string {
	if o == nil || IsNil(o.OraclePrice) {
		var ret string
		return ret
	}
	return *o.OraclePrice
}

// GetOraclePriceOk returns a tuple with the OraclePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetOraclePriceOk() (*string, bool) {
	if o == nil || IsNil(o.OraclePrice) {
		return nil, false
	}
	return o.OraclePrice, true
}

// HasOraclePrice returns a boolean if a field has been set.
func (o *Ticker) HasOraclePrice() bool {
	if o != nil && !IsNil(o.OraclePrice) {
		return true
	}

	return false
}

// SetOraclePrice gets a reference to the given string and assigns it to the OraclePrice field.
func (o *Ticker) SetOraclePrice(v string) {
	o.OraclePrice = &v
}

// GetOpenInterest returns the OpenInterest field value if set, zero value otherwise.
func (o *Ticker) GetOpenInterest() string {
	if o == nil || IsNil(o.OpenInterest) {
		var ret string
		return ret
	}
	return *o.OpenInterest
}

// GetOpenInterestOk returns a tuple with the OpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetOpenInterestOk() (*string, bool) {
	if o == nil || IsNil(o.OpenInterest) {
		return nil, false
	}
	return o.OpenInterest, true
}

// HasOpenInterest returns a boolean if a field has been set.
func (o *Ticker) HasOpenInterest() bool {
	if o != nil && !IsNil(o.OpenInterest) {
		return true
	}

	return false
}

// SetOpenInterest gets a reference to the given string and assigns it to the OpenInterest field.
func (o *Ticker) SetOpenInterest(v string) {
	o.OpenInterest = &v
}

// GetFundingRate returns the FundingRate field value if set, zero value otherwise.
func (o *Ticker) GetFundingRate() string {
	if o == nil || IsNil(o.FundingRate) {
		var ret string
		return ret
	}
	return *o.FundingRate
}

// GetFundingRateOk returns a tuple with the FundingRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetFundingRateOk() (*string, bool) {
	if o == nil || IsNil(o.FundingRate) {
		return nil, false
	}
	return o.FundingRate, true
}

// HasFundingRate returns a boolean if a field has been set.
func (o *Ticker) HasFundingRate() bool {
	if o != nil && !IsNil(o.FundingRate) {
		return true
	}

	return false
}

// SetFundingRate gets a reference to the given string and assigns it to the FundingRate field.
func (o *Ticker) SetFundingRate(v string) {
	o.FundingRate = &v
}

// GetFundingTime returns the FundingTime field value if set, zero value otherwise.
func (o *Ticker) GetFundingTime() string {
	if o == nil || IsNil(o.FundingTime) {
		var ret string
		return ret
	}
	return *o.FundingTime
}

// GetFundingTimeOk returns a tuple with the FundingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetFundingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.FundingTime) {
		return nil, false
	}
	return o.FundingTime, true
}

// HasFundingTime returns a boolean if a field has been set.
func (o *Ticker) HasFundingTime() bool {
	if o != nil && !IsNil(o.FundingTime) {
		return true
	}

	return false
}

// SetFundingTime gets a reference to the given string and assigns it to the FundingTime field.
func (o *Ticker) SetFundingTime(v string) {
	o.FundingTime = &v
}

// GetNextFundingTime returns the NextFundingTime field value if set, zero value otherwise.
func (o *Ticker) GetNextFundingTime() string {
	if o == nil || IsNil(o.NextFundingTime) {
		var ret string
		return ret
	}
	return *o.NextFundingTime
}

// GetNextFundingTimeOk returns a tuple with the NextFundingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticker) GetNextFundingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.NextFundingTime) {
		return nil, false
	}
	return o.NextFundingTime, true
}

// HasNextFundingTime returns a boolean if a field has been set.
func (o *Ticker) HasNextFundingTime() bool {
	if o != nil && !IsNil(o.NextFundingTime) {
		return true
	}

	return false
}

// SetNextFundingTime gets a reference to the given string and assigns it to the NextFundingTime field.
func (o *Ticker) SetNextFundingTime(v string) {
	o.NextFundingTime = &v
}

func (o Ticker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ticker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContractId) {
		toSerialize["contractId"] = o.ContractId
	}
	if !IsNil(o.ContractName) {
		toSerialize["contractName"] = o.ContractName
	}
	if !IsNil(o.PriceChange) {
		toSerialize["priceChange"] = o.PriceChange
	}
	if !IsNil(o.PriceChangePercent) {
		toSerialize["priceChangePercent"] = o.PriceChangePercent
	}
	if !IsNil(o.Trades) {
		toSerialize["trades"] = o.Trades
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.High) {
		toSerialize["high"] = o.High
	}
	if !IsNil(o.Low) {
		toSerialize["low"] = o.Low
	}
	if !IsNil(o.Open) {
		toSerialize["open"] = o.Open
	}
	if !IsNil(o.Close) {
		toSerialize["close"] = o.Close
	}
	if !IsNil(o.HighTime) {
		toSerialize["highTime"] = o.HighTime
	}
	if !IsNil(o.LowTime) {
		toSerialize["lowTime"] = o.LowTime
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.LastPrice) {
		toSerialize["lastPrice"] = o.LastPrice
	}
	if !IsNil(o.IndexPrice) {
		toSerialize["indexPrice"] = o.IndexPrice
	}
	if !IsNil(o.OraclePrice) {
		toSerialize["oraclePrice"] = o.OraclePrice
	}
	if !IsNil(o.OpenInterest) {
		toSerialize["openInterest"] = o.OpenInterest
	}
	if !IsNil(o.FundingRate) {
		toSerialize["fundingRate"] = o.FundingRate
	}
	if !IsNil(o.FundingTime) {
		toSerialize["fundingTime"] = o.FundingTime
	}
	if !IsNil(o.NextFundingTime) {
		toSerialize["nextFundingTime"] = o.NextFundingTime
	}
	return toSerialize, nil
}

type NullableTicker struct {
	value *Ticker
	isSet bool
}

func (v NullableTicker) Get() *Ticker {
	return v.value
}

func (v *NullableTicker) Set(val *Ticker) {
	v.value = val
	v.isSet = true
}

func (v NullableTicker) IsSet() bool {
	return v.isSet
}

func (v *NullableTicker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicker(val *Ticker) *NullableTicker {
	return &NullableTicker{value: val, isSet: true}
}

func (v NullableTicker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


