/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the L2Signature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &L2Signature{}

// L2Signature L2签名信息
type L2Signature struct {
	// bigint for hex str
	R *string `json:"r,omitempty"`
	// bigint for hex str
	S *string `json:"s,omitempty"`
	// bigint for hex str
	V *string `json:"v,omitempty"`
}

// NewL2Signature instantiates a new L2Signature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewL2Signature() *L2Signature {
	this := L2Signature{}
	return &this
}

// NewL2SignatureWithDefaults instantiates a new L2Signature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewL2SignatureWithDefaults() *L2Signature {
	this := L2Signature{}
	return &this
}

// GetR returns the R field value if set, zero value otherwise.
func (o *L2Signature) GetR() string {
	if o == nil || IsNil(o.R) {
		var ret string
		return ret
	}
	return *o.R
}

// GetROk returns a tuple with the R field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *L2Signature) GetROk() (*string, bool) {
	if o == nil || IsNil(o.R) {
		return nil, false
	}
	return o.R, true
}

// HasR returns a boolean if a field has been set.
func (o *L2Signature) HasR() bool {
	if o != nil && !IsNil(o.R) {
		return true
	}

	return false
}

// SetR gets a reference to the given string and assigns it to the R field.
func (o *L2Signature) SetR(v string) {
	o.R = &v
}

// GetS returns the S field value if set, zero value otherwise.
func (o *L2Signature) GetS() string {
	if o == nil || IsNil(o.S) {
		var ret string
		return ret
	}
	return *o.S
}

// GetSOk returns a tuple with the S field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *L2Signature) GetSOk() (*string, bool) {
	if o == nil || IsNil(o.S) {
		return nil, false
	}
	return o.S, true
}

// HasS returns a boolean if a field has been set.
func (o *L2Signature) HasS() bool {
	if o != nil && !IsNil(o.S) {
		return true
	}

	return false
}

// SetS gets a reference to the given string and assigns it to the S field.
func (o *L2Signature) SetS(v string) {
	o.S = &v
}

// GetV returns the V field value if set, zero value otherwise.
func (o *L2Signature) GetV() string {
	if o == nil || IsNil(o.V) {
		var ret string
		return ret
	}
	return *o.V
}

// GetVOk returns a tuple with the V field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *L2Signature) GetVOk() (*string, bool) {
	if o == nil || IsNil(o.V) {
		return nil, false
	}
	return o.V, true
}

// HasV returns a boolean if a field has been set.
func (o *L2Signature) HasV() bool {
	if o != nil && !IsNil(o.V) {
		return true
	}

	return false
}

// SetV gets a reference to the given string and assigns it to the V field.
func (o *L2Signature) SetV(v string) {
	o.V = &v
}

func (o L2Signature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o L2Signature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.R) {
		toSerialize["r"] = o.R
	}
	if !IsNil(o.S) {
		toSerialize["s"] = o.S
	}
	if !IsNil(o.V) {
		toSerialize["v"] = o.V
	}
	return toSerialize, nil
}

type NullableL2Signature struct {
	value *L2Signature
	isSet bool
}

func (v NullableL2Signature) Get() *L2Signature {
	return v.value
}

func (v *NullableL2Signature) Set(val *L2Signature) {
	v.value = val
	v.isSet = true
}

func (v NullableL2Signature) IsSet() bool {
	return v.isSet
}

func (v *NullableL2Signature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableL2Signature(val *L2Signature) *NullableL2Signature {
	return &NullableL2Signature{value: val, isSet: true}
}

func (v NullableL2Signature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableL2Signature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


