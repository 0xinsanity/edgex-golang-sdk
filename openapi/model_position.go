/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Position type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Position{}

// Position 永续合约持仓信息
type Position struct {
	// 所属用户id
	UserId *string `json:"userId,omitempty"`
	// 所属账户id
	AccountId *string `json:"accountId,omitempty"`
	// 所属抵押品币种id
	CoinId *string `json:"coinId,omitempty"`
	// 所属合约id
	ContractId *string `json:"contractId,omitempty"`
	// 当前开仓数量 (正数为多仓，负数为空仓)
	OpenSize *string `json:"openSize,omitempty"`
	// 当前开仓价值 (开仓会累加，平仓会等比例减少)
	OpenValue *string `json:"openValue,omitempty"`
	// 当前开仓均摊后的手续费 (开仓会累加，平仓会等比例减少)
	OpenFee *string `json:"openFee,omitempty"`
	// 当前仓位均摊后的资金费用 (结算时会累加，平仓会等比例减少)
	FundingFee *string `json:"fundingFee,omitempty"`
	// 多仓term次数。从1开始，每次完全平仓后会加一。
	LongTermCount *int32 `json:"longTermCount,omitempty"`
	LongTermStat *PositionStat `json:"longTermStat,omitempty"`
	// 多仓term创建时间
	LongTermCreatedTime *string `json:"longTermCreatedTime,omitempty"`
	// 多仓term创建时间
	LongTermUpdatedTime *string `json:"longTermUpdatedTime,omitempty"`
	// 空仓term次数。从1开始，每次完全平仓后会加一。
	ShortTermCount *int32 `json:"shortTermCount,omitempty"`
	ShortTermStat *PositionStat `json:"shortTermStat,omitempty"`
	// 空仓term创建时间
	ShortTermCreatedTime *string `json:"shortTermCreatedTime,omitempty"`
	// 空仓term创建时间
	ShortTermUpdatedTime *string `json:"shortTermUpdatedTime,omitempty"`
	LongTotalStat *PositionStat `json:"longTotalStat,omitempty"`
	ShortTotalStat *PositionStat `json:"shortTotalStat,omitempty"`
	// 创建时间
	CreatedTime *string `json:"createdTime,omitempty"`
	// 更新时间
	UpdatedTime *string `json:"updatedTime,omitempty"`
}

// NewPosition instantiates a new Position object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPosition() *Position {
	this := Position{}
	return &this
}

// NewPositionWithDefaults instantiates a new Position object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionWithDefaults() *Position {
	this := Position{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Position) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Position) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Position) SetUserId(v string) {
	o.UserId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Position) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Position) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Position) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCoinId returns the CoinId field value if set, zero value otherwise.
func (o *Position) GetCoinId() string {
	if o == nil || IsNil(o.CoinId) {
		var ret string
		return ret
	}
	return *o.CoinId
}

// GetCoinIdOk returns a tuple with the CoinId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetCoinIdOk() (*string, bool) {
	if o == nil || IsNil(o.CoinId) {
		return nil, false
	}
	return o.CoinId, true
}

// HasCoinId returns a boolean if a field has been set.
func (o *Position) HasCoinId() bool {
	if o != nil && !IsNil(o.CoinId) {
		return true
	}

	return false
}

// SetCoinId gets a reference to the given string and assigns it to the CoinId field.
func (o *Position) SetCoinId(v string) {
	o.CoinId = &v
}

// GetContractId returns the ContractId field value if set, zero value otherwise.
func (o *Position) GetContractId() string {
	if o == nil || IsNil(o.ContractId) {
		var ret string
		return ret
	}
	return *o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetContractIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContractId) {
		return nil, false
	}
	return o.ContractId, true
}

// HasContractId returns a boolean if a field has been set.
func (o *Position) HasContractId() bool {
	if o != nil && !IsNil(o.ContractId) {
		return true
	}

	return false
}

// SetContractId gets a reference to the given string and assigns it to the ContractId field.
func (o *Position) SetContractId(v string) {
	o.ContractId = &v
}

// GetOpenSize returns the OpenSize field value if set, zero value otherwise.
func (o *Position) GetOpenSize() string {
	if o == nil || IsNil(o.OpenSize) {
		var ret string
		return ret
	}
	return *o.OpenSize
}

// GetOpenSizeOk returns a tuple with the OpenSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetOpenSizeOk() (*string, bool) {
	if o == nil || IsNil(o.OpenSize) {
		return nil, false
	}
	return o.OpenSize, true
}

// HasOpenSize returns a boolean if a field has been set.
func (o *Position) HasOpenSize() bool {
	if o != nil && !IsNil(o.OpenSize) {
		return true
	}

	return false
}

// SetOpenSize gets a reference to the given string and assigns it to the OpenSize field.
func (o *Position) SetOpenSize(v string) {
	o.OpenSize = &v
}

// GetOpenValue returns the OpenValue field value if set, zero value otherwise.
func (o *Position) GetOpenValue() string {
	if o == nil || IsNil(o.OpenValue) {
		var ret string
		return ret
	}
	return *o.OpenValue
}

// GetOpenValueOk returns a tuple with the OpenValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetOpenValueOk() (*string, bool) {
	if o == nil || IsNil(o.OpenValue) {
		return nil, false
	}
	return o.OpenValue, true
}

// HasOpenValue returns a boolean if a field has been set.
func (o *Position) HasOpenValue() bool {
	if o != nil && !IsNil(o.OpenValue) {
		return true
	}

	return false
}

// SetOpenValue gets a reference to the given string and assigns it to the OpenValue field.
func (o *Position) SetOpenValue(v string) {
	o.OpenValue = &v
}

// GetOpenFee returns the OpenFee field value if set, zero value otherwise.
func (o *Position) GetOpenFee() string {
	if o == nil || IsNil(o.OpenFee) {
		var ret string
		return ret
	}
	return *o.OpenFee
}

// GetOpenFeeOk returns a tuple with the OpenFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetOpenFeeOk() (*string, bool) {
	if o == nil || IsNil(o.OpenFee) {
		return nil, false
	}
	return o.OpenFee, true
}

// HasOpenFee returns a boolean if a field has been set.
func (o *Position) HasOpenFee() bool {
	if o != nil && !IsNil(o.OpenFee) {
		return true
	}

	return false
}

// SetOpenFee gets a reference to the given string and assigns it to the OpenFee field.
func (o *Position) SetOpenFee(v string) {
	o.OpenFee = &v
}

// GetFundingFee returns the FundingFee field value if set, zero value otherwise.
func (o *Position) GetFundingFee() string {
	if o == nil || IsNil(o.FundingFee) {
		var ret string
		return ret
	}
	return *o.FundingFee
}

// GetFundingFeeOk returns a tuple with the FundingFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetFundingFeeOk() (*string, bool) {
	if o == nil || IsNil(o.FundingFee) {
		return nil, false
	}
	return o.FundingFee, true
}

// HasFundingFee returns a boolean if a field has been set.
func (o *Position) HasFundingFee() bool {
	if o != nil && !IsNil(o.FundingFee) {
		return true
	}

	return false
}

// SetFundingFee gets a reference to the given string and assigns it to the FundingFee field.
func (o *Position) SetFundingFee(v string) {
	o.FundingFee = &v
}

// GetLongTermCount returns the LongTermCount field value if set, zero value otherwise.
func (o *Position) GetLongTermCount() int32 {
	if o == nil || IsNil(o.LongTermCount) {
		var ret int32
		return ret
	}
	return *o.LongTermCount
}

// GetLongTermCountOk returns a tuple with the LongTermCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetLongTermCountOk() (*int32, bool) {
	if o == nil || IsNil(o.LongTermCount) {
		return nil, false
	}
	return o.LongTermCount, true
}

// HasLongTermCount returns a boolean if a field has been set.
func (o *Position) HasLongTermCount() bool {
	if o != nil && !IsNil(o.LongTermCount) {
		return true
	}

	return false
}

// SetLongTermCount gets a reference to the given int32 and assigns it to the LongTermCount field.
func (o *Position) SetLongTermCount(v int32) {
	o.LongTermCount = &v
}

// GetLongTermStat returns the LongTermStat field value if set, zero value otherwise.
func (o *Position) GetLongTermStat() PositionStat {
	if o == nil || IsNil(o.LongTermStat) {
		var ret PositionStat
		return ret
	}
	return *o.LongTermStat
}

// GetLongTermStatOk returns a tuple with the LongTermStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetLongTermStatOk() (*PositionStat, bool) {
	if o == nil || IsNil(o.LongTermStat) {
		return nil, false
	}
	return o.LongTermStat, true
}

// HasLongTermStat returns a boolean if a field has been set.
func (o *Position) HasLongTermStat() bool {
	if o != nil && !IsNil(o.LongTermStat) {
		return true
	}

	return false
}

// SetLongTermStat gets a reference to the given PositionStat and assigns it to the LongTermStat field.
func (o *Position) SetLongTermStat(v PositionStat) {
	o.LongTermStat = &v
}

// GetLongTermCreatedTime returns the LongTermCreatedTime field value if set, zero value otherwise.
func (o *Position) GetLongTermCreatedTime() string {
	if o == nil || IsNil(o.LongTermCreatedTime) {
		var ret string
		return ret
	}
	return *o.LongTermCreatedTime
}

// GetLongTermCreatedTimeOk returns a tuple with the LongTermCreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetLongTermCreatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LongTermCreatedTime) {
		return nil, false
	}
	return o.LongTermCreatedTime, true
}

// HasLongTermCreatedTime returns a boolean if a field has been set.
func (o *Position) HasLongTermCreatedTime() bool {
	if o != nil && !IsNil(o.LongTermCreatedTime) {
		return true
	}

	return false
}

// SetLongTermCreatedTime gets a reference to the given string and assigns it to the LongTermCreatedTime field.
func (o *Position) SetLongTermCreatedTime(v string) {
	o.LongTermCreatedTime = &v
}

// GetLongTermUpdatedTime returns the LongTermUpdatedTime field value if set, zero value otherwise.
func (o *Position) GetLongTermUpdatedTime() string {
	if o == nil || IsNil(o.LongTermUpdatedTime) {
		var ret string
		return ret
	}
	return *o.LongTermUpdatedTime
}

// GetLongTermUpdatedTimeOk returns a tuple with the LongTermUpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetLongTermUpdatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LongTermUpdatedTime) {
		return nil, false
	}
	return o.LongTermUpdatedTime, true
}

// HasLongTermUpdatedTime returns a boolean if a field has been set.
func (o *Position) HasLongTermUpdatedTime() bool {
	if o != nil && !IsNil(o.LongTermUpdatedTime) {
		return true
	}

	return false
}

// SetLongTermUpdatedTime gets a reference to the given string and assigns it to the LongTermUpdatedTime field.
func (o *Position) SetLongTermUpdatedTime(v string) {
	o.LongTermUpdatedTime = &v
}

// GetShortTermCount returns the ShortTermCount field value if set, zero value otherwise.
func (o *Position) GetShortTermCount() int32 {
	if o == nil || IsNil(o.ShortTermCount) {
		var ret int32
		return ret
	}
	return *o.ShortTermCount
}

// GetShortTermCountOk returns a tuple with the ShortTermCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetShortTermCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ShortTermCount) {
		return nil, false
	}
	return o.ShortTermCount, true
}

// HasShortTermCount returns a boolean if a field has been set.
func (o *Position) HasShortTermCount() bool {
	if o != nil && !IsNil(o.ShortTermCount) {
		return true
	}

	return false
}

// SetShortTermCount gets a reference to the given int32 and assigns it to the ShortTermCount field.
func (o *Position) SetShortTermCount(v int32) {
	o.ShortTermCount = &v
}

// GetShortTermStat returns the ShortTermStat field value if set, zero value otherwise.
func (o *Position) GetShortTermStat() PositionStat {
	if o == nil || IsNil(o.ShortTermStat) {
		var ret PositionStat
		return ret
	}
	return *o.ShortTermStat
}

// GetShortTermStatOk returns a tuple with the ShortTermStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetShortTermStatOk() (*PositionStat, bool) {
	if o == nil || IsNil(o.ShortTermStat) {
		return nil, false
	}
	return o.ShortTermStat, true
}

// HasShortTermStat returns a boolean if a field has been set.
func (o *Position) HasShortTermStat() bool {
	if o != nil && !IsNil(o.ShortTermStat) {
		return true
	}

	return false
}

// SetShortTermStat gets a reference to the given PositionStat and assigns it to the ShortTermStat field.
func (o *Position) SetShortTermStat(v PositionStat) {
	o.ShortTermStat = &v
}

// GetShortTermCreatedTime returns the ShortTermCreatedTime field value if set, zero value otherwise.
func (o *Position) GetShortTermCreatedTime() string {
	if o == nil || IsNil(o.ShortTermCreatedTime) {
		var ret string
		return ret
	}
	return *o.ShortTermCreatedTime
}

// GetShortTermCreatedTimeOk returns a tuple with the ShortTermCreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetShortTermCreatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ShortTermCreatedTime) {
		return nil, false
	}
	return o.ShortTermCreatedTime, true
}

// HasShortTermCreatedTime returns a boolean if a field has been set.
func (o *Position) HasShortTermCreatedTime() bool {
	if o != nil && !IsNil(o.ShortTermCreatedTime) {
		return true
	}

	return false
}

// SetShortTermCreatedTime gets a reference to the given string and assigns it to the ShortTermCreatedTime field.
func (o *Position) SetShortTermCreatedTime(v string) {
	o.ShortTermCreatedTime = &v
}

// GetShortTermUpdatedTime returns the ShortTermUpdatedTime field value if set, zero value otherwise.
func (o *Position) GetShortTermUpdatedTime() string {
	if o == nil || IsNil(o.ShortTermUpdatedTime) {
		var ret string
		return ret
	}
	return *o.ShortTermUpdatedTime
}

// GetShortTermUpdatedTimeOk returns a tuple with the ShortTermUpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetShortTermUpdatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ShortTermUpdatedTime) {
		return nil, false
	}
	return o.ShortTermUpdatedTime, true
}

// HasShortTermUpdatedTime returns a boolean if a field has been set.
func (o *Position) HasShortTermUpdatedTime() bool {
	if o != nil && !IsNil(o.ShortTermUpdatedTime) {
		return true
	}

	return false
}

// SetShortTermUpdatedTime gets a reference to the given string and assigns it to the ShortTermUpdatedTime field.
func (o *Position) SetShortTermUpdatedTime(v string) {
	o.ShortTermUpdatedTime = &v
}

// GetLongTotalStat returns the LongTotalStat field value if set, zero value otherwise.
func (o *Position) GetLongTotalStat() PositionStat {
	if o == nil || IsNil(o.LongTotalStat) {
		var ret PositionStat
		return ret
	}
	return *o.LongTotalStat
}

// GetLongTotalStatOk returns a tuple with the LongTotalStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetLongTotalStatOk() (*PositionStat, bool) {
	if o == nil || IsNil(o.LongTotalStat) {
		return nil, false
	}
	return o.LongTotalStat, true
}

// HasLongTotalStat returns a boolean if a field has been set.
func (o *Position) HasLongTotalStat() bool {
	if o != nil && !IsNil(o.LongTotalStat) {
		return true
	}

	return false
}

// SetLongTotalStat gets a reference to the given PositionStat and assigns it to the LongTotalStat field.
func (o *Position) SetLongTotalStat(v PositionStat) {
	o.LongTotalStat = &v
}

// GetShortTotalStat returns the ShortTotalStat field value if set, zero value otherwise.
func (o *Position) GetShortTotalStat() PositionStat {
	if o == nil || IsNil(o.ShortTotalStat) {
		var ret PositionStat
		return ret
	}
	return *o.ShortTotalStat
}

// GetShortTotalStatOk returns a tuple with the ShortTotalStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetShortTotalStatOk() (*PositionStat, bool) {
	if o == nil || IsNil(o.ShortTotalStat) {
		return nil, false
	}
	return o.ShortTotalStat, true
}

// HasShortTotalStat returns a boolean if a field has been set.
func (o *Position) HasShortTotalStat() bool {
	if o != nil && !IsNil(o.ShortTotalStat) {
		return true
	}

	return false
}

// SetShortTotalStat gets a reference to the given PositionStat and assigns it to the ShortTotalStat field.
func (o *Position) SetShortTotalStat(v PositionStat) {
	o.ShortTotalStat = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Position) GetCreatedTime() string {
	if o == nil || IsNil(o.CreatedTime) {
		var ret string
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetCreatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Position) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given string and assigns it to the CreatedTime field.
func (o *Position) SetCreatedTime(v string) {
	o.CreatedTime = &v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *Position) GetUpdatedTime() string {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret string
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetUpdatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *Position) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given string and assigns it to the UpdatedTime field.
func (o *Position) SetUpdatedTime(v string) {
	o.UpdatedTime = &v
}

func (o Position) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Position) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.CoinId) {
		toSerialize["coinId"] = o.CoinId
	}
	if !IsNil(o.ContractId) {
		toSerialize["contractId"] = o.ContractId
	}
	if !IsNil(o.OpenSize) {
		toSerialize["openSize"] = o.OpenSize
	}
	if !IsNil(o.OpenValue) {
		toSerialize["openValue"] = o.OpenValue
	}
	if !IsNil(o.OpenFee) {
		toSerialize["openFee"] = o.OpenFee
	}
	if !IsNil(o.FundingFee) {
		toSerialize["fundingFee"] = o.FundingFee
	}
	if !IsNil(o.LongTermCount) {
		toSerialize["longTermCount"] = o.LongTermCount
	}
	if !IsNil(o.LongTermStat) {
		toSerialize["longTermStat"] = o.LongTermStat
	}
	if !IsNil(o.LongTermCreatedTime) {
		toSerialize["longTermCreatedTime"] = o.LongTermCreatedTime
	}
	if !IsNil(o.LongTermUpdatedTime) {
		toSerialize["longTermUpdatedTime"] = o.LongTermUpdatedTime
	}
	if !IsNil(o.ShortTermCount) {
		toSerialize["shortTermCount"] = o.ShortTermCount
	}
	if !IsNil(o.ShortTermStat) {
		toSerialize["shortTermStat"] = o.ShortTermStat
	}
	if !IsNil(o.ShortTermCreatedTime) {
		toSerialize["shortTermCreatedTime"] = o.ShortTermCreatedTime
	}
	if !IsNil(o.ShortTermUpdatedTime) {
		toSerialize["shortTermUpdatedTime"] = o.ShortTermUpdatedTime
	}
	if !IsNil(o.LongTotalStat) {
		toSerialize["longTotalStat"] = o.LongTotalStat
	}
	if !IsNil(o.ShortTotalStat) {
		toSerialize["shortTotalStat"] = o.ShortTotalStat
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["createdTime"] = o.CreatedTime
	}
	if !IsNil(o.UpdatedTime) {
		toSerialize["updatedTime"] = o.UpdatedTime
	}
	return toSerialize, nil
}

type NullablePosition struct {
	value *Position
	isSet bool
}

func (v NullablePosition) Get() *Position {
	return v.value
}

func (v *NullablePosition) Set(val *Position) {
	v.value = val
	v.isSet = true
}

func (v NullablePosition) IsSet() bool {
	return v.isSet
}

func (v *NullablePosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePosition(val *Position) *NullablePosition {
	return &NullablePosition{value: val, isSet: true}
}

func (v NullablePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


