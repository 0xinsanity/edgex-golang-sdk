/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// Class09AssetsPrivateApiAPIService Class09AssetsPrivateApiAPI service
type Class09AssetsPrivateApiAPIService service

type ApiCreateCrossWithdrawRequest struct {
	ctx context.Context
	ApiService *Class09AssetsPrivateApiAPIService
	createCrossWithdrawParam *CreateCrossWithdrawParam
}

func (r ApiCreateCrossWithdrawRequest) CreateCrossWithdrawParam(createCrossWithdrawParam CreateCrossWithdrawParam) ApiCreateCrossWithdrawRequest {
	r.createCrossWithdrawParam = &createCrossWithdrawParam
	return r
}

func (r ApiCreateCrossWithdrawRequest) Execute() (*ResultCreateCrossWithdraw, *http.Response, error) {
	return r.ApiService.CreateCrossWithdrawExecute(r)
}

/*
CreateCrossWithdraw 创建快速提现单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCrossWithdrawRequest
*/
func (a *Class09AssetsPrivateApiAPIService) CreateCrossWithdraw(ctx context.Context) ApiCreateCrossWithdrawRequest {
	return ApiCreateCrossWithdrawRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultCreateCrossWithdraw
func (a *Class09AssetsPrivateApiAPIService) CreateCrossWithdrawExecute(r ApiCreateCrossWithdrawRequest) (*ResultCreateCrossWithdraw, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultCreateCrossWithdraw
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class09AssetsPrivateApiAPIService.CreateCrossWithdraw")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/assets/createCrossWithdraw"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createCrossWithdrawParam == nil {
		return localVarReturnValue, nil, reportError("createCrossWithdrawParam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createCrossWithdrawParam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateFastWithdrawRequest struct {
	ctx context.Context
	ApiService *Class09AssetsPrivateApiAPIService
	createFastWithdrawRequest *CreateFastWithdrawRequest
}

func (r ApiCreateFastWithdrawRequest) CreateFastWithdrawRequest(createFastWithdrawRequest CreateFastWithdrawRequest) ApiCreateFastWithdrawRequest {
	r.createFastWithdrawRequest = &createFastWithdrawRequest
	return r
}

func (r ApiCreateFastWithdrawRequest) Execute() (*ResultCreateFastWithdraw, *http.Response, error) {
	return r.ApiService.CreateFastWithdrawExecute(r)
}

/*
CreateFastWithdraw 创建快速提现单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateFastWithdrawRequest
*/
func (a *Class09AssetsPrivateApiAPIService) CreateFastWithdraw(ctx context.Context) ApiCreateFastWithdrawRequest {
	return ApiCreateFastWithdrawRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultCreateFastWithdraw
func (a *Class09AssetsPrivateApiAPIService) CreateFastWithdrawExecute(r ApiCreateFastWithdrawRequest) (*ResultCreateFastWithdraw, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultCreateFastWithdraw
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class09AssetsPrivateApiAPIService.CreateFastWithdraw")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/assets/createFastWithdraw"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createFastWithdrawRequest == nil {
		return localVarReturnValue, nil, reportError("createFastWithdrawRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createFastWithdrawRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateNormalWithdrawRequest struct {
	ctx context.Context
	ApiService *Class09AssetsPrivateApiAPIService
	createNormalWithdrawParam *CreateNormalWithdrawParam
}

func (r ApiCreateNormalWithdrawRequest) CreateNormalWithdrawParam(createNormalWithdrawParam CreateNormalWithdrawParam) ApiCreateNormalWithdrawRequest {
	r.createNormalWithdrawParam = &createNormalWithdrawParam
	return r
}

func (r ApiCreateNormalWithdrawRequest) Execute() (*ResultCreateNormalWithdraw, *http.Response, error) {
	return r.ApiService.CreateNormalWithdrawExecute(r)
}

/*
CreateNormalWithdraw 创建普通提现单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateNormalWithdrawRequest
*/
func (a *Class09AssetsPrivateApiAPIService) CreateNormalWithdraw(ctx context.Context) ApiCreateNormalWithdrawRequest {
	return ApiCreateNormalWithdrawRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultCreateNormalWithdraw
func (a *Class09AssetsPrivateApiAPIService) CreateNormalWithdrawExecute(r ApiCreateNormalWithdrawRequest) (*ResultCreateNormalWithdraw, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultCreateNormalWithdraw
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class09AssetsPrivateApiAPIService.CreateNormalWithdraw")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/assets/createNormalWithdraw"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createNormalWithdrawParam == nil {
		return localVarReturnValue, nil, reportError("createNormalWithdrawParam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createNormalWithdrawParam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllOrdersPageRequest struct {
	ctx context.Context
	ApiService *Class09AssetsPrivateApiAPIService
	accountId *string
	startTime *string
	endTime *string
	chainId *string
	typeList *string
	size *string
	offsetData *string
}

// 账户id
func (r ApiGetAllOrdersPageRequest) AccountId(accountId string) ApiGetAllOrdersPageRequest {
	r.accountId = &accountId
	return r
}

// 起始时间，unix time单位为秒
func (r ApiGetAllOrdersPageRequest) StartTime(startTime string) ApiGetAllOrdersPageRequest {
	r.startTime = &startTime
	return r
}

// 结束时间，unix time单位为秒
func (r ApiGetAllOrdersPageRequest) EndTime(endTime string) ApiGetAllOrdersPageRequest {
	r.endTime = &endTime
	return r
}

// 链id
func (r ApiGetAllOrdersPageRequest) ChainId(chainId string) ApiGetAllOrdersPageRequest {
	r.chainId = &chainId
	return r
}

// 订单类型
func (r ApiGetAllOrdersPageRequest) TypeList(typeList string) ApiGetAllOrdersPageRequest {
	r.typeList = &typeList
	return r
}

// 每页的数量。必须大于0且小于等于100。
func (r ApiGetAllOrdersPageRequest) Size(size string) ApiGetAllOrdersPageRequest {
	r.size = &size
	return r
}

// 翻页获取偏移。如果不填或者为空串，则获取第一页
func (r ApiGetAllOrdersPageRequest) OffsetData(offsetData string) ApiGetAllOrdersPageRequest {
	r.offsetData = &offsetData
	return r
}

func (r ApiGetAllOrdersPageRequest) Execute() (*ResultPageDataAssetOrder, *http.Response, error) {
	return r.ApiService.GetAllOrdersPageExecute(r)
}

/*
GetAllOrdersPage 聚合查询所有充提币订单记录

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllOrdersPageRequest
*/
func (a *Class09AssetsPrivateApiAPIService) GetAllOrdersPage(ctx context.Context) ApiGetAllOrdersPageRequest {
	return ApiGetAllOrdersPageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultPageDataAssetOrder
func (a *Class09AssetsPrivateApiAPIService) GetAllOrdersPageExecute(r ApiGetAllOrdersPageRequest) (*ResultPageDataAssetOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultPageDataAssetOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class09AssetsPrivateApiAPIService.GetAllOrdersPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/assets/getAllOrdersPage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "form", "")
	}
	if r.chainId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chainId", r.chainId, "form", "")
	}
	if r.typeList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "typeList", r.typeList, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.offsetData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offsetData", r.offsetData, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCoinRateRequest struct {
	ctx context.Context
	ApiService *Class09AssetsPrivateApiAPIService
	chainId *string
	coin *string
}

// 链id
func (r ApiGetCoinRateRequest) ChainId(chainId string) ApiGetCoinRateRequest {
	r.chainId = &chainId
	return r
}

// 币种
func (r ApiGetCoinRateRequest) Coin(coin string) ApiGetCoinRateRequest {
	r.coin = &coin
	return r
}

func (r ApiGetCoinRateRequest) Execute() (*ResultGetCoinRate, *http.Response, error) {
	return r.ApiService.GetCoinRateExecute(r)
}

/*
GetCoinRate 聚合查询所有充提币订单记录

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCoinRateRequest
*/
func (a *Class09AssetsPrivateApiAPIService) GetCoinRate(ctx context.Context) ApiGetCoinRateRequest {
	return ApiGetCoinRateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultGetCoinRate
func (a *Class09AssetsPrivateApiAPIService) GetCoinRateExecute(r ApiGetCoinRateRequest) (*ResultGetCoinRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultGetCoinRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class09AssetsPrivateApiAPIService.GetCoinRate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/assets/getCoinRate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.chainId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chainId", r.chainId, "form", "")
	}
	if r.coin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "coin", r.coin, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCrossWithdrawByIdRequest struct {
	ctx context.Context
	ApiService *Class09AssetsPrivateApiAPIService
	accountId *string
	crossWithdrawIdList *string
}

// 账户id
func (r ApiGetCrossWithdrawByIdRequest) AccountId(accountId string) ApiGetCrossWithdrawByIdRequest {
	r.accountId = &accountId
	return r
}

// 提现单id
func (r ApiGetCrossWithdrawByIdRequest) CrossWithdrawIdList(crossWithdrawIdList string) ApiGetCrossWithdrawByIdRequest {
	r.crossWithdrawIdList = &crossWithdrawIdList
	return r
}

func (r ApiGetCrossWithdrawByIdRequest) Execute() (*ResultListCrossWithdraw, *http.Response, error) {
	return r.ApiService.GetCrossWithdrawByIdExecute(r)
}

/*
GetCrossWithdrawById 根据账户id和提现单id批量获取跨链提现单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCrossWithdrawByIdRequest
*/
func (a *Class09AssetsPrivateApiAPIService) GetCrossWithdrawById(ctx context.Context) ApiGetCrossWithdrawByIdRequest {
	return ApiGetCrossWithdrawByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListCrossWithdraw
func (a *Class09AssetsPrivateApiAPIService) GetCrossWithdrawByIdExecute(r ApiGetCrossWithdrawByIdRequest) (*ResultListCrossWithdraw, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListCrossWithdraw
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class09AssetsPrivateApiAPIService.GetCrossWithdrawById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/assets/getCrossWithdrawById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.crossWithdrawIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "crossWithdrawIdList", r.crossWithdrawIdList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCrossWithdrawSignInfoRequest struct {
	ctx context.Context
	ApiService *Class09AssetsPrivateApiAPIService
	chainId *string
	amount *string
}

// 链id
func (r ApiGetCrossWithdrawSignInfoRequest) ChainId(chainId string) ApiGetCrossWithdrawSignInfoRequest {
	r.chainId = &chainId
	return r
}

// 提现金额
func (r ApiGetCrossWithdrawSignInfoRequest) Amount(amount string) ApiGetCrossWithdrawSignInfoRequest {
	r.amount = &amount
	return r
}

func (r ApiGetCrossWithdrawSignInfoRequest) Execute() (*ResultGetCrossWithdrawSignInfo, *http.Response, error) {
	return r.ApiService.GetCrossWithdrawSignInfoExecute(r)
}

/*
GetCrossWithdrawSignInfo 查询跨链提现签名需要的信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCrossWithdrawSignInfoRequest
*/
func (a *Class09AssetsPrivateApiAPIService) GetCrossWithdrawSignInfo(ctx context.Context) ApiGetCrossWithdrawSignInfoRequest {
	return ApiGetCrossWithdrawSignInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultGetCrossWithdrawSignInfo
func (a *Class09AssetsPrivateApiAPIService) GetCrossWithdrawSignInfoExecute(r ApiGetCrossWithdrawSignInfoRequest) (*ResultGetCrossWithdrawSignInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultGetCrossWithdrawSignInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class09AssetsPrivateApiAPIService.GetCrossWithdrawSignInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/assets/getCrossWithdrawSignInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.chainId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chainId", r.chainId, "form", "")
	}
	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amount", r.amount, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFastWithdrawByIdRequest struct {
	ctx context.Context
	ApiService *Class09AssetsPrivateApiAPIService
	accountId *string
	fastWithdrawIdList *string
}

// 账户id
func (r ApiGetFastWithdrawByIdRequest) AccountId(accountId string) ApiGetFastWithdrawByIdRequest {
	r.accountId = &accountId
	return r
}

// 提现单id
func (r ApiGetFastWithdrawByIdRequest) FastWithdrawIdList(fastWithdrawIdList string) ApiGetFastWithdrawByIdRequest {
	r.fastWithdrawIdList = &fastWithdrawIdList
	return r
}

func (r ApiGetFastWithdrawByIdRequest) Execute() (*ResultListFastWithdraw, *http.Response, error) {
	return r.ApiService.GetFastWithdrawByIdExecute(r)
}

/*
GetFastWithdrawById 根据账户id和提现单id批量获取快速提现单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFastWithdrawByIdRequest
*/
func (a *Class09AssetsPrivateApiAPIService) GetFastWithdrawById(ctx context.Context) ApiGetFastWithdrawByIdRequest {
	return ApiGetFastWithdrawByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListFastWithdraw
func (a *Class09AssetsPrivateApiAPIService) GetFastWithdrawByIdExecute(r ApiGetFastWithdrawByIdRequest) (*ResultListFastWithdraw, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListFastWithdraw
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class09AssetsPrivateApiAPIService.GetFastWithdrawById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/assets/getFastWithdrawById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.fastWithdrawIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fastWithdrawIdList", r.fastWithdrawIdList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFastWithdrawSignInfoRequest struct {
	ctx context.Context
	ApiService *Class09AssetsPrivateApiAPIService
	chainId *string
	amount *string
}

// 哪条链
func (r ApiGetFastWithdrawSignInfoRequest) ChainId(chainId string) ApiGetFastWithdrawSignInfoRequest {
	r.chainId = &chainId
	return r
}

// 提现金额
func (r ApiGetFastWithdrawSignInfoRequest) Amount(amount string) ApiGetFastWithdrawSignInfoRequest {
	r.amount = &amount
	return r
}

func (r ApiGetFastWithdrawSignInfoRequest) Execute() (*ResultGetFastWithdrawSignInfo, *http.Response, error) {
	return r.ApiService.GetFastWithdrawSignInfoExecute(r)
}

/*
GetFastWithdrawSignInfo 查询快速提现签名需要的信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFastWithdrawSignInfoRequest
*/
func (a *Class09AssetsPrivateApiAPIService) GetFastWithdrawSignInfo(ctx context.Context) ApiGetFastWithdrawSignInfoRequest {
	return ApiGetFastWithdrawSignInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultGetFastWithdrawSignInfo
func (a *Class09AssetsPrivateApiAPIService) GetFastWithdrawSignInfoExecute(r ApiGetFastWithdrawSignInfoRequest) (*ResultGetFastWithdrawSignInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultGetFastWithdrawSignInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class09AssetsPrivateApiAPIService.GetFastWithdrawSignInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/assets/getFastWithdrawSignInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.chainId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chainId", r.chainId, "form", "")
	}
	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amount", r.amount, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNormalWithdrawByIdRequest struct {
	ctx context.Context
	ApiService *Class09AssetsPrivateApiAPIService
	accountId *string
	normalWithdrawIdList *string
}

// 账户id
func (r ApiGetNormalWithdrawByIdRequest) AccountId(accountId string) ApiGetNormalWithdrawByIdRequest {
	r.accountId = &accountId
	return r
}

// 提现单id
func (r ApiGetNormalWithdrawByIdRequest) NormalWithdrawIdList(normalWithdrawIdList string) ApiGetNormalWithdrawByIdRequest {
	r.normalWithdrawIdList = &normalWithdrawIdList
	return r
}

func (r ApiGetNormalWithdrawByIdRequest) Execute() (*ResultListNormalWithdraw, *http.Response, error) {
	return r.ApiService.GetNormalWithdrawByIdExecute(r)
}

/*
GetNormalWithdrawById 根据账户id和提现单id批量获取普通提现单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetNormalWithdrawByIdRequest
*/
func (a *Class09AssetsPrivateApiAPIService) GetNormalWithdrawById(ctx context.Context) ApiGetNormalWithdrawByIdRequest {
	return ApiGetNormalWithdrawByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListNormalWithdraw
func (a *Class09AssetsPrivateApiAPIService) GetNormalWithdrawByIdExecute(r ApiGetNormalWithdrawByIdRequest) (*ResultListNormalWithdraw, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListNormalWithdraw
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class09AssetsPrivateApiAPIService.GetNormalWithdrawById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/assets/getNormalWithdrawById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.normalWithdrawIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "normalWithdrawIdList", r.normalWithdrawIdList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNormalWithdrawableAmountRequest struct {
	ctx context.Context
	ApiService *Class09AssetsPrivateApiAPIService
	address *string
}

// 用户地址
func (r ApiGetNormalWithdrawableAmountRequest) Address(address string) ApiGetNormalWithdrawableAmountRequest {
	r.address = &address
	return r
}

func (r ApiGetNormalWithdrawableAmountRequest) Execute() (*ResultGetNormalWithdrawableAmount, *http.Response, error) {
	return r.ApiService.GetNormalWithdrawableAmountExecute(r)
}

/*
GetNormalWithdrawableAmount 查询用户普通提现可提金额

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetNormalWithdrawableAmountRequest
*/
func (a *Class09AssetsPrivateApiAPIService) GetNormalWithdrawableAmount(ctx context.Context) ApiGetNormalWithdrawableAmountRequest {
	return ApiGetNormalWithdrawableAmountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultGetNormalWithdrawableAmount
func (a *Class09AssetsPrivateApiAPIService) GetNormalWithdrawableAmountExecute(r ApiGetNormalWithdrawableAmountRequest) (*ResultGetNormalWithdrawableAmount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultGetNormalWithdrawableAmount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class09AssetsPrivateApiAPIService.GetNormalWithdrawableAmount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/assets/getNormalWithdrawableAmount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.address == nil {
		return localVarReturnValue, nil, reportError("address is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
