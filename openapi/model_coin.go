/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Coin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Coin{}

// Coin 货币元信息
type Coin struct {
	// 货币id
	CoinId *string `json:"coinId,omitempty"`
	// 货币名称
	CoinName *string `json:"coinName,omitempty"`
	// 最小数量单位
	StepSize *string `json:"stepSize,omitempty"`
	// 给用户显示的最小单位
	ShowStepSize *string `json:"showStepSize,omitempty"`
	// 货币图标url
	IconUrl *string `json:"iconUrl,omitempty"`
	// starkex资产id。如果为空，代表不存在
	StarkExAssetId *string `json:"starkExAssetId,omitempty"`
	// starkex处理精度。如果为空，代表不存在
	StarkExResolution *string `json:"starkExResolution,omitempty"`
}

// NewCoin instantiates a new Coin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoin() *Coin {
	this := Coin{}
	return &this
}

// NewCoinWithDefaults instantiates a new Coin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoinWithDefaults() *Coin {
	this := Coin{}
	return &this
}

// GetCoinId returns the CoinId field value if set, zero value otherwise.
func (o *Coin) GetCoinId() string {
	if o == nil || IsNil(o.CoinId) {
		var ret string
		return ret
	}
	return *o.CoinId
}

// GetCoinIdOk returns a tuple with the CoinId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coin) GetCoinIdOk() (*string, bool) {
	if o == nil || IsNil(o.CoinId) {
		return nil, false
	}
	return o.CoinId, true
}

// HasCoinId returns a boolean if a field has been set.
func (o *Coin) HasCoinId() bool {
	if o != nil && !IsNil(o.CoinId) {
		return true
	}

	return false
}

// SetCoinId gets a reference to the given string and assigns it to the CoinId field.
func (o *Coin) SetCoinId(v string) {
	o.CoinId = &v
}

// GetCoinName returns the CoinName field value if set, zero value otherwise.
func (o *Coin) GetCoinName() string {
	if o == nil || IsNil(o.CoinName) {
		var ret string
		return ret
	}
	return *o.CoinName
}

// GetCoinNameOk returns a tuple with the CoinName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coin) GetCoinNameOk() (*string, bool) {
	if o == nil || IsNil(o.CoinName) {
		return nil, false
	}
	return o.CoinName, true
}

// HasCoinName returns a boolean if a field has been set.
func (o *Coin) HasCoinName() bool {
	if o != nil && !IsNil(o.CoinName) {
		return true
	}

	return false
}

// SetCoinName gets a reference to the given string and assigns it to the CoinName field.
func (o *Coin) SetCoinName(v string) {
	o.CoinName = &v
}

// GetStepSize returns the StepSize field value if set, zero value otherwise.
func (o *Coin) GetStepSize() string {
	if o == nil || IsNil(o.StepSize) {
		var ret string
		return ret
	}
	return *o.StepSize
}

// GetStepSizeOk returns a tuple with the StepSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coin) GetStepSizeOk() (*string, bool) {
	if o == nil || IsNil(o.StepSize) {
		return nil, false
	}
	return o.StepSize, true
}

// HasStepSize returns a boolean if a field has been set.
func (o *Coin) HasStepSize() bool {
	if o != nil && !IsNil(o.StepSize) {
		return true
	}

	return false
}

// SetStepSize gets a reference to the given string and assigns it to the StepSize field.
func (o *Coin) SetStepSize(v string) {
	o.StepSize = &v
}

// GetShowStepSize returns the ShowStepSize field value if set, zero value otherwise.
func (o *Coin) GetShowStepSize() string {
	if o == nil || IsNil(o.ShowStepSize) {
		var ret string
		return ret
	}
	return *o.ShowStepSize
}

// GetShowStepSizeOk returns a tuple with the ShowStepSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coin) GetShowStepSizeOk() (*string, bool) {
	if o == nil || IsNil(o.ShowStepSize) {
		return nil, false
	}
	return o.ShowStepSize, true
}

// HasShowStepSize returns a boolean if a field has been set.
func (o *Coin) HasShowStepSize() bool {
	if o != nil && !IsNil(o.ShowStepSize) {
		return true
	}

	return false
}

// SetShowStepSize gets a reference to the given string and assigns it to the ShowStepSize field.
func (o *Coin) SetShowStepSize(v string) {
	o.ShowStepSize = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *Coin) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coin) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *Coin) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *Coin) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetStarkExAssetId returns the StarkExAssetId field value if set, zero value otherwise.
func (o *Coin) GetStarkExAssetId() string {
	if o == nil || IsNil(o.StarkExAssetId) {
		var ret string
		return ret
	}
	return *o.StarkExAssetId
}

// GetStarkExAssetIdOk returns a tuple with the StarkExAssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coin) GetStarkExAssetIdOk() (*string, bool) {
	if o == nil || IsNil(o.StarkExAssetId) {
		return nil, false
	}
	return o.StarkExAssetId, true
}

// HasStarkExAssetId returns a boolean if a field has been set.
func (o *Coin) HasStarkExAssetId() bool {
	if o != nil && !IsNil(o.StarkExAssetId) {
		return true
	}

	return false
}

// SetStarkExAssetId gets a reference to the given string and assigns it to the StarkExAssetId field.
func (o *Coin) SetStarkExAssetId(v string) {
	o.StarkExAssetId = &v
}

// GetStarkExResolution returns the StarkExResolution field value if set, zero value otherwise.
func (o *Coin) GetStarkExResolution() string {
	if o == nil || IsNil(o.StarkExResolution) {
		var ret string
		return ret
	}
	return *o.StarkExResolution
}

// GetStarkExResolutionOk returns a tuple with the StarkExResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coin) GetStarkExResolutionOk() (*string, bool) {
	if o == nil || IsNil(o.StarkExResolution) {
		return nil, false
	}
	return o.StarkExResolution, true
}

// HasStarkExResolution returns a boolean if a field has been set.
func (o *Coin) HasStarkExResolution() bool {
	if o != nil && !IsNil(o.StarkExResolution) {
		return true
	}

	return false
}

// SetStarkExResolution gets a reference to the given string and assigns it to the StarkExResolution field.
func (o *Coin) SetStarkExResolution(v string) {
	o.StarkExResolution = &v
}

func (o Coin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Coin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CoinId) {
		toSerialize["coinId"] = o.CoinId
	}
	if !IsNil(o.CoinName) {
		toSerialize["coinName"] = o.CoinName
	}
	if !IsNil(o.StepSize) {
		toSerialize["stepSize"] = o.StepSize
	}
	if !IsNil(o.ShowStepSize) {
		toSerialize["showStepSize"] = o.ShowStepSize
	}
	if !IsNil(o.IconUrl) {
		toSerialize["iconUrl"] = o.IconUrl
	}
	if !IsNil(o.StarkExAssetId) {
		toSerialize["starkExAssetId"] = o.StarkExAssetId
	}
	if !IsNil(o.StarkExResolution) {
		toSerialize["starkExResolution"] = o.StarkExResolution
	}
	return toSerialize, nil
}

type NullableCoin struct {
	value *Coin
	isSet bool
}

func (v NullableCoin) Get() *Coin {
	return v.value
}

func (v *NullableCoin) Set(val *Coin) {
	v.value = val
	v.isSet = true
}

func (v NullableCoin) IsSet() bool {
	return v.isSet
}

func (v *NullableCoin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoin(val *Coin) *NullableCoin {
	return &NullableCoin{value: val, isSet: true}
}

func (v NullableCoin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


