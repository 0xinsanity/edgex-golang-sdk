/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// Class04OrderPrivateApiAPIService Class04OrderPrivateApiAPI service
type Class04OrderPrivateApiAPIService service

type ApiCancelAllOrderRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	cancelAllOrderParam *CancelAllOrderParam
}

func (r ApiCancelAllOrderRequest) CancelAllOrderParam(cancelAllOrderParam CancelAllOrderParam) ApiCancelAllOrderRequest {
	r.cancelAllOrderParam = &cancelAllOrderParam
	return r
}

func (r ApiCancelAllOrderRequest) Execute() (*ResultCancelOrder, *http.Response, error) {
	return r.ApiService.CancelAllOrderExecute(r)
}

/*
CancelAllOrder 取消账户下所有委托单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCancelAllOrderRequest
*/
func (a *Class04OrderPrivateApiAPIService) CancelAllOrder(ctx context.Context) ApiCancelAllOrderRequest {
	return ApiCancelAllOrderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultCancelOrder
func (a *Class04OrderPrivateApiAPIService) CancelAllOrderExecute(r ApiCancelAllOrderRequest) (*ResultCancelOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultCancelOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.CancelAllOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/cancelAllOrder"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cancelAllOrderParam == nil {
		return localVarReturnValue, nil, reportError("cancelAllOrderParam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cancelAllOrderParam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCancelOrderByClientOrderIdRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	cancelOrderByClientOrderIdParam *CancelOrderByClientOrderIdParam
}

func (r ApiCancelOrderByClientOrderIdRequest) CancelOrderByClientOrderIdParam(cancelOrderByClientOrderIdParam CancelOrderByClientOrderIdParam) ApiCancelOrderByClientOrderIdRequest {
	r.cancelOrderByClientOrderIdParam = &cancelOrderByClientOrderIdParam
	return r
}

func (r ApiCancelOrderByClientOrderIdRequest) Execute() (*ResultCancelOrderByClientOrderId, *http.Response, error) {
	return r.ApiService.CancelOrderByClientOrderIdExecute(r)
}

/*
CancelOrderByClientOrderId 根据clientId取消委托单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCancelOrderByClientOrderIdRequest
*/
func (a *Class04OrderPrivateApiAPIService) CancelOrderByClientOrderId(ctx context.Context) ApiCancelOrderByClientOrderIdRequest {
	return ApiCancelOrderByClientOrderIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultCancelOrderByClientOrderId
func (a *Class04OrderPrivateApiAPIService) CancelOrderByClientOrderIdExecute(r ApiCancelOrderByClientOrderIdRequest) (*ResultCancelOrderByClientOrderId, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultCancelOrderByClientOrderId
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.CancelOrderByClientOrderId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/cancelOrderByClientOrderId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cancelOrderByClientOrderIdParam == nil {
		return localVarReturnValue, nil, reportError("cancelOrderByClientOrderIdParam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cancelOrderByClientOrderIdParam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCancelOrderByIdRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	cancelOrderByIdParam *CancelOrderByIdParam
}

func (r ApiCancelOrderByIdRequest) CancelOrderByIdParam(cancelOrderByIdParam CancelOrderByIdParam) ApiCancelOrderByIdRequest {
	r.cancelOrderByIdParam = &cancelOrderByIdParam
	return r
}

func (r ApiCancelOrderByIdRequest) Execute() (*ResultCancelOrder, *http.Response, error) {
	return r.ApiService.CancelOrderByIdExecute(r)
}

/*
CancelOrderById 根据委托单id取消委托单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCancelOrderByIdRequest
*/
func (a *Class04OrderPrivateApiAPIService) CancelOrderById(ctx context.Context) ApiCancelOrderByIdRequest {
	return ApiCancelOrderByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultCancelOrder
func (a *Class04OrderPrivateApiAPIService) CancelOrderByIdExecute(r ApiCancelOrderByIdRequest) (*ResultCancelOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultCancelOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.CancelOrderById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/cancelOrderById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cancelOrderByIdParam == nil {
		return localVarReturnValue, nil, reportError("cancelOrderByIdParam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cancelOrderByIdParam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateOrderRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	createOrderParam *CreateOrderParam
}

func (r ApiCreateOrderRequest) CreateOrderParam(createOrderParam CreateOrderParam) ApiCreateOrderRequest {
	r.createOrderParam = &createOrderParam
	return r
}

func (r ApiCreateOrderRequest) Execute() (*ResultCreateOrder, *http.Response, error) {
	return r.ApiService.CreateOrderExecute(r)
}

/*
CreateOrder 创建委托单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateOrderRequest
*/
func (a *Class04OrderPrivateApiAPIService) CreateOrder(ctx context.Context) ApiCreateOrderRequest {
	return ApiCreateOrderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultCreateOrder
func (a *Class04OrderPrivateApiAPIService) CreateOrderExecute(r ApiCreateOrderRequest) (*ResultCreateOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultCreateOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.CreateOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/createOrder"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrderParam == nil {
		return localVarReturnValue, nil, reportError("createOrderParam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrderParam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetActiveOrderPageRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	accountId *string
	size *string
	offsetData *string
	filterCoinIdList *string
	filterContractIdList *string
	filterTypeList *string
	filterStatusList *string
	filterIsLiquidateList *string
	filterIsDeleverageList *string
	filterIsPositionTpslList *string
	filterStartCreatedTimeInclusive *string
	filterEndCreatedTimeExclusive *string
}

// 账户id
func (r ApiGetActiveOrderPageRequest) AccountId(accountId string) ApiGetActiveOrderPageRequest {
	r.accountId = &accountId
	return r
}

// 获取数量。必须大于0且小于等于200
func (r ApiGetActiveOrderPageRequest) Size(size string) ApiGetActiveOrderPageRequest {
	r.size = &size
	return r
}

// 翻页获取偏移。如果不填或者为空串，则获取第一页
func (r ApiGetActiveOrderPageRequest) OffsetData(offsetData string) ApiGetActiveOrderPageRequest {
	r.offsetData = &offsetData
	return r
}

// 过滤获取对应抵押品coinId对应的活动委托单，如果为空则获取所有抵押品coinId的活动委托单
func (r ApiGetActiveOrderPageRequest) FilterCoinIdList(filterCoinIdList string) ApiGetActiveOrderPageRequest {
	r.filterCoinIdList = &filterCoinIdList
	return r
}

// 过滤获取对应合约的活动委托单，如果为空则获取所有合约的活动委托单
func (r ApiGetActiveOrderPageRequest) FilterContractIdList(filterContractIdList string) ApiGetActiveOrderPageRequest {
	r.filterContractIdList = &filterContractIdList
	return r
}

// 过滤获取指定类型的委托单，不填的话所有类型委托单
func (r ApiGetActiveOrderPageRequest) FilterTypeList(filterTypeList string) ApiGetActiveOrderPageRequest {
	r.filterTypeList = &filterTypeList
	return r
}

// 过滤获取指定状态的委托单，不填的话所有状态委托单
func (r ApiGetActiveOrderPageRequest) FilterStatusList(filterStatusList string) ApiGetActiveOrderPageRequest {
	r.filterStatusList = &filterStatusList
	return r
}

// 过滤获取指定是否为清算的委托单，不填的话所有委托单
func (r ApiGetActiveOrderPageRequest) FilterIsLiquidateList(filterIsLiquidateList string) ApiGetActiveOrderPageRequest {
	r.filterIsLiquidateList = &filterIsLiquidateList
	return r
}

// 过滤获取指定是否为减仓的委托单，不填的话所有委托单
func (r ApiGetActiveOrderPageRequest) FilterIsDeleverageList(filterIsDeleverageList string) ApiGetActiveOrderPageRequest {
	r.filterIsDeleverageList = &filterIsDeleverageList
	return r
}

// 过滤获取指定是否为仓位止盈止损单，不填的话所有委托单
func (r ApiGetActiveOrderPageRequest) FilterIsPositionTpslList(filterIsPositionTpslList string) ApiGetActiveOrderPageRequest {
	r.filterIsPositionTpslList = &filterIsPositionTpslList
	return r
}

// 过滤获取指定开始时间创建的委托单 (包含)，不填或者为0的话就从最早开始
func (r ApiGetActiveOrderPageRequest) FilterStartCreatedTimeInclusive(filterStartCreatedTimeInclusive string) ApiGetActiveOrderPageRequest {
	r.filterStartCreatedTimeInclusive = &filterStartCreatedTimeInclusive
	return r
}

// 过滤获取指定结束时间创建的委托单 (不包含)，不填或者为0的话就到最近
func (r ApiGetActiveOrderPageRequest) FilterEndCreatedTimeExclusive(filterEndCreatedTimeExclusive string) ApiGetActiveOrderPageRequest {
	r.filterEndCreatedTimeExclusive = &filterEndCreatedTimeExclusive
	return r
}

func (r ApiGetActiveOrderPageRequest) Execute() (*ResultPageDataOrder, *http.Response, error) {
	return r.ApiService.GetActiveOrderPageExecute(r)
}

/*
GetActiveOrderPage 分页获取账户下活动的委托单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetActiveOrderPageRequest
*/
func (a *Class04OrderPrivateApiAPIService) GetActiveOrderPage(ctx context.Context) ApiGetActiveOrderPageRequest {
	return ApiGetActiveOrderPageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultPageDataOrder
func (a *Class04OrderPrivateApiAPIService) GetActiveOrderPageExecute(r ApiGetActiveOrderPageRequest) (*ResultPageDataOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultPageDataOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.GetActiveOrderPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/getActiveOrderPage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.offsetData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offsetData", r.offsetData, "form", "")
	}
	if r.filterCoinIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterCoinIdList", r.filterCoinIdList, "form", "")
	}
	if r.filterContractIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterContractIdList", r.filterContractIdList, "form", "")
	}
	if r.filterTypeList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterTypeList", r.filterTypeList, "form", "")
	}
	if r.filterStatusList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterStatusList", r.filterStatusList, "form", "")
	}
	if r.filterIsLiquidateList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterIsLiquidateList", r.filterIsLiquidateList, "form", "")
	}
	if r.filterIsDeleverageList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterIsDeleverageList", r.filterIsDeleverageList, "form", "")
	}
	if r.filterIsPositionTpslList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterIsPositionTpslList", r.filterIsPositionTpslList, "form", "")
	}
	if r.filterStartCreatedTimeInclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterStartCreatedTimeInclusive", r.filterStartCreatedTimeInclusive, "form", "")
	}
	if r.filterEndCreatedTimeExclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterEndCreatedTimeExclusive", r.filterEndCreatedTimeExclusive, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoryOrderByClientOrderIdRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	accountId *string
	clientOrderIdList *string
}

// 账户id
func (r ApiGetHistoryOrderByClientOrderIdRequest) AccountId(accountId string) ApiGetHistoryOrderByClientOrderIdRequest {
	r.accountId = &accountId
	return r
}

// 委托单 client order id
func (r ApiGetHistoryOrderByClientOrderIdRequest) ClientOrderIdList(clientOrderIdList string) ApiGetHistoryOrderByClientOrderIdRequest {
	r.clientOrderIdList = &clientOrderIdList
	return r
}

func (r ApiGetHistoryOrderByClientOrderIdRequest) Execute() (*ResultListOrder, *http.Response, error) {
	return r.ApiService.GetHistoryOrderByClientOrderIdExecute(r)
}

/*
GetHistoryOrderByClientOrderId 根据账户id和委托单id批量获取委托单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoryOrderByClientOrderIdRequest
*/
func (a *Class04OrderPrivateApiAPIService) GetHistoryOrderByClientOrderId(ctx context.Context) ApiGetHistoryOrderByClientOrderIdRequest {
	return ApiGetHistoryOrderByClientOrderIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListOrder
func (a *Class04OrderPrivateApiAPIService) GetHistoryOrderByClientOrderIdExecute(r ApiGetHistoryOrderByClientOrderIdRequest) (*ResultListOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.GetHistoryOrderByClientOrderId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/getHistoryOrderByClientOrderId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.clientOrderIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clientOrderIdList", r.clientOrderIdList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoryOrderByIdRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	accountId *string
	orderIdList *string
}

// 账户id
func (r ApiGetHistoryOrderByIdRequest) AccountId(accountId string) ApiGetHistoryOrderByIdRequest {
	r.accountId = &accountId
	return r
}

// 委托单id
func (r ApiGetHistoryOrderByIdRequest) OrderIdList(orderIdList string) ApiGetHistoryOrderByIdRequest {
	r.orderIdList = &orderIdList
	return r
}

func (r ApiGetHistoryOrderByIdRequest) Execute() (*ResultListOrder, *http.Response, error) {
	return r.ApiService.GetHistoryOrderByIdExecute(r)
}

/*
GetHistoryOrderById 根据账户id和委托单id批量获取委托单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoryOrderByIdRequest
*/
func (a *Class04OrderPrivateApiAPIService) GetHistoryOrderById(ctx context.Context) ApiGetHistoryOrderByIdRequest {
	return ApiGetHistoryOrderByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListOrder
func (a *Class04OrderPrivateApiAPIService) GetHistoryOrderByIdExecute(r ApiGetHistoryOrderByIdRequest) (*ResultListOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.GetHistoryOrderById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/getHistoryOrderById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.orderIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderIdList", r.orderIdList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoryOrderFillTransactionByIdRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	accountId *string
	orderFillTransactionIdList *string
}

// 账户id
func (r ApiGetHistoryOrderFillTransactionByIdRequest) AccountId(accountId string) ApiGetHistoryOrderFillTransactionByIdRequest {
	r.accountId = &accountId
	return r
}

// 委托成交明细id
func (r ApiGetHistoryOrderFillTransactionByIdRequest) OrderFillTransactionIdList(orderFillTransactionIdList string) ApiGetHistoryOrderFillTransactionByIdRequest {
	r.orderFillTransactionIdList = &orderFillTransactionIdList
	return r
}

func (r ApiGetHistoryOrderFillTransactionByIdRequest) Execute() (*ResultListOrderFillTransaction, *http.Response, error) {
	return r.ApiService.GetHistoryOrderFillTransactionByIdExecute(r)
}

/*
GetHistoryOrderFillTransactionById 根据账户id和委托成交明细id批量获取委托成交明细

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoryOrderFillTransactionByIdRequest
*/
func (a *Class04OrderPrivateApiAPIService) GetHistoryOrderFillTransactionById(ctx context.Context) ApiGetHistoryOrderFillTransactionByIdRequest {
	return ApiGetHistoryOrderFillTransactionByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListOrderFillTransaction
func (a *Class04OrderPrivateApiAPIService) GetHistoryOrderFillTransactionByIdExecute(r ApiGetHistoryOrderFillTransactionByIdRequest) (*ResultListOrderFillTransaction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListOrderFillTransaction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.GetHistoryOrderFillTransactionById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/getHistoryOrderFillTransactionById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.orderFillTransactionIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderFillTransactionIdList", r.orderFillTransactionIdList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoryOrderFillTransactionPageRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	accountId *string
	size *string
	offsetData *string
	filterCoinIdList *string
	filterContractIdList *string
	filterOrderIdList *string
	filterIsLiquidateList *string
	filterIsDeleverageList *string
	filterIsPositionTpslList *string
	filterStartCreatedTimeInclusive *string
	filterEndCreatedTimeExclusive *string
}

// 账户id
func (r ApiGetHistoryOrderFillTransactionPageRequest) AccountId(accountId string) ApiGetHistoryOrderFillTransactionPageRequest {
	r.accountId = &accountId
	return r
}

// 获取数量。必须大于0且小于等于100
func (r ApiGetHistoryOrderFillTransactionPageRequest) Size(size string) ApiGetHistoryOrderFillTransactionPageRequest {
	r.size = &size
	return r
}

// 翻页获取偏移。如果不填或者为空串，则获取第一页
func (r ApiGetHistoryOrderFillTransactionPageRequest) OffsetData(offsetData string) ApiGetHistoryOrderFillTransactionPageRequest {
	r.offsetData = &offsetData
	return r
}

// 过滤获取对应抵押品coinId对应的成交明细，如果为空则获取所有抵押品coinId的成交明细
func (r ApiGetHistoryOrderFillTransactionPageRequest) FilterCoinIdList(filterCoinIdList string) ApiGetHistoryOrderFillTransactionPageRequest {
	r.filterCoinIdList = &filterCoinIdList
	return r
}

// 过滤获取指定合约的委托成交明细；如果为空的话获取所有合约委托成交明细
func (r ApiGetHistoryOrderFillTransactionPageRequest) FilterContractIdList(filterContractIdList string) ApiGetHistoryOrderFillTransactionPageRequest {
	r.filterContractIdList = &filterContractIdList
	return r
}

// 过滤获取指定委托单的成交明细；如果为空的话获取所有委托单的委托成交明细
func (r ApiGetHistoryOrderFillTransactionPageRequest) FilterOrderIdList(filterOrderIdList string) ApiGetHistoryOrderFillTransactionPageRequest {
	r.filterOrderIdList = &filterOrderIdList
	return r
}

// 过滤获取指定是否为清算的委托单，不填的话所有委托单
func (r ApiGetHistoryOrderFillTransactionPageRequest) FilterIsLiquidateList(filterIsLiquidateList string) ApiGetHistoryOrderFillTransactionPageRequest {
	r.filterIsLiquidateList = &filterIsLiquidateList
	return r
}

// 过滤获取指定是否为减仓的委托单，不填的话所有委托单
func (r ApiGetHistoryOrderFillTransactionPageRequest) FilterIsDeleverageList(filterIsDeleverageList string) ApiGetHistoryOrderFillTransactionPageRequest {
	r.filterIsDeleverageList = &filterIsDeleverageList
	return r
}

// 过滤获取指定是否为仓位止盈止损单，不填的话所有委托单
func (r ApiGetHistoryOrderFillTransactionPageRequest) FilterIsPositionTpslList(filterIsPositionTpslList string) ApiGetHistoryOrderFillTransactionPageRequest {
	r.filterIsPositionTpslList = &filterIsPositionTpslList
	return r
}

// 过滤获取指定开始时间创建的委托单 (包含)，不填或者为0的话就从最早开始
func (r ApiGetHistoryOrderFillTransactionPageRequest) FilterStartCreatedTimeInclusive(filterStartCreatedTimeInclusive string) ApiGetHistoryOrderFillTransactionPageRequest {
	r.filterStartCreatedTimeInclusive = &filterStartCreatedTimeInclusive
	return r
}

//  过滤获取指定结束时间创建的委托单 (不包含)，不填或者为0的话就到最近
func (r ApiGetHistoryOrderFillTransactionPageRequest) FilterEndCreatedTimeExclusive(filterEndCreatedTimeExclusive string) ApiGetHistoryOrderFillTransactionPageRequest {
	r.filterEndCreatedTimeExclusive = &filterEndCreatedTimeExclusive
	return r
}

func (r ApiGetHistoryOrderFillTransactionPageRequest) Execute() (*ResultPageDataOrderFillTransaction, *http.Response, error) {
	return r.ApiService.GetHistoryOrderFillTransactionPageExecute(r)
}

/*
GetHistoryOrderFillTransactionPage 根据账户id和委托单ids批量获取成交单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoryOrderFillTransactionPageRequest
*/
func (a *Class04OrderPrivateApiAPIService) GetHistoryOrderFillTransactionPage(ctx context.Context) ApiGetHistoryOrderFillTransactionPageRequest {
	return ApiGetHistoryOrderFillTransactionPageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultPageDataOrderFillTransaction
func (a *Class04OrderPrivateApiAPIService) GetHistoryOrderFillTransactionPageExecute(r ApiGetHistoryOrderFillTransactionPageRequest) (*ResultPageDataOrderFillTransaction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultPageDataOrderFillTransaction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.GetHistoryOrderFillTransactionPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/getHistoryOrderFillTransactionPage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.offsetData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offsetData", r.offsetData, "form", "")
	}
	if r.filterCoinIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterCoinIdList", r.filterCoinIdList, "form", "")
	}
	if r.filterContractIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterContractIdList", r.filterContractIdList, "form", "")
	}
	if r.filterOrderIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterOrderIdList", r.filterOrderIdList, "form", "")
	}
	if r.filterIsLiquidateList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterIsLiquidateList", r.filterIsLiquidateList, "form", "")
	}
	if r.filterIsDeleverageList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterIsDeleverageList", r.filterIsDeleverageList, "form", "")
	}
	if r.filterIsPositionTpslList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterIsPositionTpslList", r.filterIsPositionTpslList, "form", "")
	}
	if r.filterStartCreatedTimeInclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterStartCreatedTimeInclusive", r.filterStartCreatedTimeInclusive, "form", "")
	}
	if r.filterEndCreatedTimeExclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterEndCreatedTimeExclusive", r.filterEndCreatedTimeExclusive, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoryOrderPageRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	accountId *string
	size *string
	offsetData *string
	filterCoinIdList *string
	filterContractIdList *string
	filterTypeList *string
	filterStatusList *string
	filterIsLiquidateList *string
	filterIsDeleverageList *string
	filterIsPositionTpslList *string
	filterStartCreatedTimeInclusive *string
	filterEndCreatedTimeExclusive *string
}

// 账户id
func (r ApiGetHistoryOrderPageRequest) AccountId(accountId string) ApiGetHistoryOrderPageRequest {
	r.accountId = &accountId
	return r
}

// 获取数量。必须大于0且小于等于100
func (r ApiGetHistoryOrderPageRequest) Size(size string) ApiGetHistoryOrderPageRequest {
	r.size = &size
	return r
}

// 翻页获取偏移。如果不填或者为空串，则获取第一页
func (r ApiGetHistoryOrderPageRequest) OffsetData(offsetData string) ApiGetHistoryOrderPageRequest {
	r.offsetData = &offsetData
	return r
}

// 过滤获取对应抵押品coinId对应的委托单，如果为空则获取所有抵押品coinId的委托单
func (r ApiGetHistoryOrderPageRequest) FilterCoinIdList(filterCoinIdList string) ApiGetHistoryOrderPageRequest {
	r.filterCoinIdList = &filterCoinIdList
	return r
}

// 过滤获取指定合约的委托单；如果为空的话获取所有合约委托单
func (r ApiGetHistoryOrderPageRequest) FilterContractIdList(filterContractIdList string) ApiGetHistoryOrderPageRequest {
	r.filterContractIdList = &filterContractIdList
	return r
}

// 过滤获取指定类型的委托单，不填的话所有类型委托单
func (r ApiGetHistoryOrderPageRequest) FilterTypeList(filterTypeList string) ApiGetHistoryOrderPageRequest {
	r.filterTypeList = &filterTypeList
	return r
}

// 过滤获取指定状态的委托单，不填的话所有状态委托单
func (r ApiGetHistoryOrderPageRequest) FilterStatusList(filterStatusList string) ApiGetHistoryOrderPageRequest {
	r.filterStatusList = &filterStatusList
	return r
}

// 过滤获取指定是否为清算的委托单，不填的话所有委托单
func (r ApiGetHistoryOrderPageRequest) FilterIsLiquidateList(filterIsLiquidateList string) ApiGetHistoryOrderPageRequest {
	r.filterIsLiquidateList = &filterIsLiquidateList
	return r
}

// 过滤获取指定是否为减仓的委托单，不填的话所有委托单
func (r ApiGetHistoryOrderPageRequest) FilterIsDeleverageList(filterIsDeleverageList string) ApiGetHistoryOrderPageRequest {
	r.filterIsDeleverageList = &filterIsDeleverageList
	return r
}

// 过滤获取指定是否为仓位止盈止损单，不填的话所有委托单
func (r ApiGetHistoryOrderPageRequest) FilterIsPositionTpslList(filterIsPositionTpslList string) ApiGetHistoryOrderPageRequest {
	r.filterIsPositionTpslList = &filterIsPositionTpslList
	return r
}

// 过滤获取指定开始时间创建的委托单 (包含)，不填或者为0的话就从最早开始
func (r ApiGetHistoryOrderPageRequest) FilterStartCreatedTimeInclusive(filterStartCreatedTimeInclusive string) ApiGetHistoryOrderPageRequest {
	r.filterStartCreatedTimeInclusive = &filterStartCreatedTimeInclusive
	return r
}

//  过滤获取指定结束时间创建的委托单 (不包含)，不填或者为0的话就到最近
func (r ApiGetHistoryOrderPageRequest) FilterEndCreatedTimeExclusive(filterEndCreatedTimeExclusive string) ApiGetHistoryOrderPageRequest {
	r.filterEndCreatedTimeExclusive = &filterEndCreatedTimeExclusive
	return r
}

func (r ApiGetHistoryOrderPageRequest) Execute() (*ResultPageDataOrder, *http.Response, error) {
	return r.ApiService.GetHistoryOrderPageExecute(r)
}

/*
GetHistoryOrderPage 根据账户id翻页获取委托单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoryOrderPageRequest
*/
func (a *Class04OrderPrivateApiAPIService) GetHistoryOrderPage(ctx context.Context) ApiGetHistoryOrderPageRequest {
	return ApiGetHistoryOrderPageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultPageDataOrder
func (a *Class04OrderPrivateApiAPIService) GetHistoryOrderPageExecute(r ApiGetHistoryOrderPageRequest) (*ResultPageDataOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultPageDataOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.GetHistoryOrderPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/getHistoryOrderPage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.offsetData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offsetData", r.offsetData, "form", "")
	}
	if r.filterCoinIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterCoinIdList", r.filterCoinIdList, "form", "")
	}
	if r.filterContractIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterContractIdList", r.filterContractIdList, "form", "")
	}
	if r.filterTypeList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterTypeList", r.filterTypeList, "form", "")
	}
	if r.filterStatusList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterStatusList", r.filterStatusList, "form", "")
	}
	if r.filterIsLiquidateList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterIsLiquidateList", r.filterIsLiquidateList, "form", "")
	}
	if r.filterIsDeleverageList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterIsDeleverageList", r.filterIsDeleverageList, "form", "")
	}
	if r.filterIsPositionTpslList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterIsPositionTpslList", r.filterIsPositionTpslList, "form", "")
	}
	if r.filterStartCreatedTimeInclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterStartCreatedTimeInclusive", r.filterStartCreatedTimeInclusive, "form", "")
	}
	if r.filterEndCreatedTimeExclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterEndCreatedTimeExclusive", r.filterEndCreatedTimeExclusive, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMaxCreateOrderSizeRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	getMaxCreateOrderSizeParam *GetMaxCreateOrderSizeParam
}

func (r ApiGetMaxCreateOrderSizeRequest) GetMaxCreateOrderSizeParam(getMaxCreateOrderSizeParam GetMaxCreateOrderSizeParam) ApiGetMaxCreateOrderSizeRequest {
	r.getMaxCreateOrderSizeParam = &getMaxCreateOrderSizeParam
	return r
}

func (r ApiGetMaxCreateOrderSizeRequest) Execute() (*ResultGetMaxCreateOrderSize, *http.Response, error) {
	return r.ApiService.GetMaxCreateOrderSizeExecute(r)
}

/*
GetMaxCreateOrderSize 获取最大下单数量

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMaxCreateOrderSizeRequest
*/
func (a *Class04OrderPrivateApiAPIService) GetMaxCreateOrderSize(ctx context.Context) ApiGetMaxCreateOrderSizeRequest {
	return ApiGetMaxCreateOrderSizeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultGetMaxCreateOrderSize
func (a *Class04OrderPrivateApiAPIService) GetMaxCreateOrderSizeExecute(r ApiGetMaxCreateOrderSizeRequest) (*ResultGetMaxCreateOrderSize, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultGetMaxCreateOrderSize
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.GetMaxCreateOrderSize")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/getMaxCreateOrderSize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getMaxCreateOrderSizeParam == nil {
		return localVarReturnValue, nil, reportError("getMaxCreateOrderSizeParam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getMaxCreateOrderSizeParam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOrderByClientOrderIdRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	accountId *string
	clientOrderIdList *string
}

// 账户id
func (r ApiGetOrderByClientOrderIdRequest) AccountId(accountId string) ApiGetOrderByClientOrderIdRequest {
	r.accountId = &accountId
	return r
}

// 客户端自定义委托单id
func (r ApiGetOrderByClientOrderIdRequest) ClientOrderIdList(clientOrderIdList string) ApiGetOrderByClientOrderIdRequest {
	r.clientOrderIdList = &clientOrderIdList
	return r
}

func (r ApiGetOrderByClientOrderIdRequest) Execute() (*ResultListOrder, *http.Response, error) {
	return r.ApiService.GetOrderByClientOrderIdExecute(r)
}

/*
GetOrderByClientOrderId 根据客户id批量获取委托单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOrderByClientOrderIdRequest
*/
func (a *Class04OrderPrivateApiAPIService) GetOrderByClientOrderId(ctx context.Context) ApiGetOrderByClientOrderIdRequest {
	return ApiGetOrderByClientOrderIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListOrder
func (a *Class04OrderPrivateApiAPIService) GetOrderByClientOrderIdExecute(r ApiGetOrderByClientOrderIdRequest) (*ResultListOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.GetOrderByClientOrderId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/getOrderByClientOrderId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.clientOrderIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clientOrderIdList", r.clientOrderIdList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOrderByIdRequest struct {
	ctx context.Context
	ApiService *Class04OrderPrivateApiAPIService
	accountId *string
	orderIdList *string
}

// 账户id
func (r ApiGetOrderByIdRequest) AccountId(accountId string) ApiGetOrderByIdRequest {
	r.accountId = &accountId
	return r
}

// 委托单id
func (r ApiGetOrderByIdRequest) OrderIdList(orderIdList string) ApiGetOrderByIdRequest {
	r.orderIdList = &orderIdList
	return r
}

func (r ApiGetOrderByIdRequest) Execute() (*ResultListOrder, *http.Response, error) {
	return r.ApiService.GetOrderByIdExecute(r)
}

/*
GetOrderById 根据账户id和委托单id批量获取委托单

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOrderByIdRequest
*/
func (a *Class04OrderPrivateApiAPIService) GetOrderById(ctx context.Context) ApiGetOrderByIdRequest {
	return ApiGetOrderByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultListOrder
func (a *Class04OrderPrivateApiAPIService) GetOrderByIdExecute(r ApiGetOrderByIdRequest) (*ResultListOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultListOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Class04OrderPrivateApiAPIService.GetOrderById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/private/order/getOrderById"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "form", "")
	}
	if r.orderIdList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderIdList", r.orderIdList, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
