/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FastWithdraw type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FastWithdraw{}

// FastWithdraw 快速提现单
type FastWithdraw struct {
	// 提现单id
	Id *string `json:"id,omitempty"`
	// 所属用户id
	UserId *string `json:"userId,omitempty"`
	// 所属账户id
	AccountId *string `json:"accountId,omitempty"`
	// 所属抵押品币种id
	CoinId *string `json:"coinId,omitempty"`
	// 充值数量
	Amount *string `json:"amount,omitempty"`
	// 充值的eth地址，可能与账户里的eth地址不一样。
	EthAddress *string `json:"ethAddress,omitempty"`
	// 提现资产在L1上ERC20合约地址
	Erc20Address *string `json:"erc20Address,omitempty"`
	// l2接收用户转账的lp账户id
	LpAccountId *string `json:"lpAccountId,omitempty"`
	// 收款账户L2 key
	LpAccountL2Key *string `json:"lpAccountL2Key,omitempty"`
	// 客户自定义id，用于幂等校验
	ClientFastWithdrawId *string `json:"clientFastWithdrawId,omitempty"`
	// 手续费
	Fee *string `json:"fee,omitempty"`
	// 提现到哪条链
	ChainId *string `json:"chainId,omitempty"`
	// l2签名nonce。取sha256(client_withdraw_id) 前32个bit
	L2Nonce *string `json:"l2Nonce,omitempty"`
	// l2签名过期时间。unix时间的小时数，至少要比下单时间晚24个小时
	L2ExpireTime *string `json:"l2ExpireTime,omitempty"`
	L2Signature *L2Signature `json:"l2Signature,omitempty"`
	// 附加类型，供上层业务使用
	ExtraType *string `json:"extraType,omitempty"`
	// 额外数据，json格式，默认为空串
	ExtraDataJson *string `json:"extraDataJson,omitempty"`
	FactRegistryAddress *string `json:"factRegistryAddress,omitempty"`
	Fact *string `json:"fact,omitempty"`
	// 普通提现单状态
	Status *string `json:"status,omitempty"`
	// 关联的抵押品明细id。当 status=SUCCESS_XXX/FAILED_L2_REJECTED 时存在
	CollateralTransactionId *string `json:"collateralTransactionId,omitempty"`
	// 审查处理序号。当 status=SUCCESS_XXX/FAILED_CENSOR_FAILURE/FAILED_L2_REJECTED 时存在
	CensorTxId *string `json:"censorTxId,omitempty"`
	// 审查处理时间。当 status=SUCCESS_XXX/FAILED_CENSOR_FAILURE/FAILED_L2_REJECTED 时存在
	CensorTime *string `json:"censorTime,omitempty"`
	// 审查失败错误码。当 status=FAILED_CENSOR_FAILURE 时存在
	CensorFailCode *string `json:"censorFailCode,omitempty"`
	// 审查失败原因。当 status=FAILED_CENSOR_FAILURE 时存在
	CensorFailReason *string `json:"censorFailReason,omitempty"`
	// l2推送交易id。当 status=SUCCESS_XXX/FAILED_CENSOR_FAILURE/FAILED_L2_REJECTED 时存在
	L2TxId *string `json:"l2TxId,omitempty"`
	// l2处理时间。当 status=SUCCESS_L1_CONFIRMING/SUCCESS_L1_WITHDRAWING/SUCCESS_L1_COMPLETED/FAILED_L2_REJECTED 时存在
	L2HandleTime *string `json:"l2HandleTime,omitempty"`
	// l2拒绝错误码。当 status=FAILED_L2_REJECTED 时存在
	L2RejectCode *string `json:"l2RejectCode,omitempty"`
	// l2拒绝原因。当 status=FAILED_L2_REJECTED 时存在
	L2RejectReason *string `json:"l2RejectReason,omitempty"`
	L1ConfirmedTx *L1Tx `json:"l1ConfirmedTx,omitempty"`
	// l1交易确认时间
	L1ConfirmedTime *string `json:"l1ConfirmedTime,omitempty"`
	// l1提现完成时间
	L1CompletedTime *string `json:"l1CompletedTime,omitempty"`
	// l1拒绝原因代码
	L1RejectedReasonCode *string `json:"l1RejectedReasonCode,omitempty"`
	// l1拒绝原因信息
	L1RejectedReasonMsg *string `json:"l1RejectedReasonMsg,omitempty"`
	RiskSignature *L2Signature `json:"riskSignature,omitempty"`
	// 转出单id
	TransferOutId *string `json:"transferOutId,omitempty"`
	// 创建时间
	CreatedTime *string `json:"createdTime,omitempty"`
	// 更新时间
	UpdatedTime *string `json:"updatedTime,omitempty"`
}

// NewFastWithdraw instantiates a new FastWithdraw object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFastWithdraw() *FastWithdraw {
	this := FastWithdraw{}
	return &this
}

// NewFastWithdrawWithDefaults instantiates a new FastWithdraw object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFastWithdrawWithDefaults() *FastWithdraw {
	this := FastWithdraw{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FastWithdraw) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FastWithdraw) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FastWithdraw) SetId(v string) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *FastWithdraw) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *FastWithdraw) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *FastWithdraw) SetUserId(v string) {
	o.UserId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *FastWithdraw) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *FastWithdraw) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *FastWithdraw) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCoinId returns the CoinId field value if set, zero value otherwise.
func (o *FastWithdraw) GetCoinId() string {
	if o == nil || IsNil(o.CoinId) {
		var ret string
		return ret
	}
	return *o.CoinId
}

// GetCoinIdOk returns a tuple with the CoinId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetCoinIdOk() (*string, bool) {
	if o == nil || IsNil(o.CoinId) {
		return nil, false
	}
	return o.CoinId, true
}

// HasCoinId returns a boolean if a field has been set.
func (o *FastWithdraw) HasCoinId() bool {
	if o != nil && !IsNil(o.CoinId) {
		return true
	}

	return false
}

// SetCoinId gets a reference to the given string and assigns it to the CoinId field.
func (o *FastWithdraw) SetCoinId(v string) {
	o.CoinId = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *FastWithdraw) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *FastWithdraw) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *FastWithdraw) SetAmount(v string) {
	o.Amount = &v
}

// GetEthAddress returns the EthAddress field value if set, zero value otherwise.
func (o *FastWithdraw) GetEthAddress() string {
	if o == nil || IsNil(o.EthAddress) {
		var ret string
		return ret
	}
	return *o.EthAddress
}

// GetEthAddressOk returns a tuple with the EthAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetEthAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EthAddress) {
		return nil, false
	}
	return o.EthAddress, true
}

// HasEthAddress returns a boolean if a field has been set.
func (o *FastWithdraw) HasEthAddress() bool {
	if o != nil && !IsNil(o.EthAddress) {
		return true
	}

	return false
}

// SetEthAddress gets a reference to the given string and assigns it to the EthAddress field.
func (o *FastWithdraw) SetEthAddress(v string) {
	o.EthAddress = &v
}

// GetErc20Address returns the Erc20Address field value if set, zero value otherwise.
func (o *FastWithdraw) GetErc20Address() string {
	if o == nil || IsNil(o.Erc20Address) {
		var ret string
		return ret
	}
	return *o.Erc20Address
}

// GetErc20AddressOk returns a tuple with the Erc20Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetErc20AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Erc20Address) {
		return nil, false
	}
	return o.Erc20Address, true
}

// HasErc20Address returns a boolean if a field has been set.
func (o *FastWithdraw) HasErc20Address() bool {
	if o != nil && !IsNil(o.Erc20Address) {
		return true
	}

	return false
}

// SetErc20Address gets a reference to the given string and assigns it to the Erc20Address field.
func (o *FastWithdraw) SetErc20Address(v string) {
	o.Erc20Address = &v
}

// GetLpAccountId returns the LpAccountId field value if set, zero value otherwise.
func (o *FastWithdraw) GetLpAccountId() string {
	if o == nil || IsNil(o.LpAccountId) {
		var ret string
		return ret
	}
	return *o.LpAccountId
}

// GetLpAccountIdOk returns a tuple with the LpAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetLpAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.LpAccountId) {
		return nil, false
	}
	return o.LpAccountId, true
}

// HasLpAccountId returns a boolean if a field has been set.
func (o *FastWithdraw) HasLpAccountId() bool {
	if o != nil && !IsNil(o.LpAccountId) {
		return true
	}

	return false
}

// SetLpAccountId gets a reference to the given string and assigns it to the LpAccountId field.
func (o *FastWithdraw) SetLpAccountId(v string) {
	o.LpAccountId = &v
}

// GetLpAccountL2Key returns the LpAccountL2Key field value if set, zero value otherwise.
func (o *FastWithdraw) GetLpAccountL2Key() string {
	if o == nil || IsNil(o.LpAccountL2Key) {
		var ret string
		return ret
	}
	return *o.LpAccountL2Key
}

// GetLpAccountL2KeyOk returns a tuple with the LpAccountL2Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetLpAccountL2KeyOk() (*string, bool) {
	if o == nil || IsNil(o.LpAccountL2Key) {
		return nil, false
	}
	return o.LpAccountL2Key, true
}

// HasLpAccountL2Key returns a boolean if a field has been set.
func (o *FastWithdraw) HasLpAccountL2Key() bool {
	if o != nil && !IsNil(o.LpAccountL2Key) {
		return true
	}

	return false
}

// SetLpAccountL2Key gets a reference to the given string and assigns it to the LpAccountL2Key field.
func (o *FastWithdraw) SetLpAccountL2Key(v string) {
	o.LpAccountL2Key = &v
}

// GetClientFastWithdrawId returns the ClientFastWithdrawId field value if set, zero value otherwise.
func (o *FastWithdraw) GetClientFastWithdrawId() string {
	if o == nil || IsNil(o.ClientFastWithdrawId) {
		var ret string
		return ret
	}
	return *o.ClientFastWithdrawId
}

// GetClientFastWithdrawIdOk returns a tuple with the ClientFastWithdrawId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetClientFastWithdrawIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientFastWithdrawId) {
		return nil, false
	}
	return o.ClientFastWithdrawId, true
}

// HasClientFastWithdrawId returns a boolean if a field has been set.
func (o *FastWithdraw) HasClientFastWithdrawId() bool {
	if o != nil && !IsNil(o.ClientFastWithdrawId) {
		return true
	}

	return false
}

// SetClientFastWithdrawId gets a reference to the given string and assigns it to the ClientFastWithdrawId field.
func (o *FastWithdraw) SetClientFastWithdrawId(v string) {
	o.ClientFastWithdrawId = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *FastWithdraw) GetFee() string {
	if o == nil || IsNil(o.Fee) {
		var ret string
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetFeeOk() (*string, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *FastWithdraw) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given string and assigns it to the Fee field.
func (o *FastWithdraw) SetFee(v string) {
	o.Fee = &v
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *FastWithdraw) GetChainId() string {
	if o == nil || IsNil(o.ChainId) {
		var ret string
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetChainIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChainId) {
		return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *FastWithdraw) HasChainId() bool {
	if o != nil && !IsNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given string and assigns it to the ChainId field.
func (o *FastWithdraw) SetChainId(v string) {
	o.ChainId = &v
}

// GetL2Nonce returns the L2Nonce field value if set, zero value otherwise.
func (o *FastWithdraw) GetL2Nonce() string {
	if o == nil || IsNil(o.L2Nonce) {
		var ret string
		return ret
	}
	return *o.L2Nonce
}

// GetL2NonceOk returns a tuple with the L2Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL2NonceOk() (*string, bool) {
	if o == nil || IsNil(o.L2Nonce) {
		return nil, false
	}
	return o.L2Nonce, true
}

// HasL2Nonce returns a boolean if a field has been set.
func (o *FastWithdraw) HasL2Nonce() bool {
	if o != nil && !IsNil(o.L2Nonce) {
		return true
	}

	return false
}

// SetL2Nonce gets a reference to the given string and assigns it to the L2Nonce field.
func (o *FastWithdraw) SetL2Nonce(v string) {
	o.L2Nonce = &v
}

// GetL2ExpireTime returns the L2ExpireTime field value if set, zero value otherwise.
func (o *FastWithdraw) GetL2ExpireTime() string {
	if o == nil || IsNil(o.L2ExpireTime) {
		var ret string
		return ret
	}
	return *o.L2ExpireTime
}

// GetL2ExpireTimeOk returns a tuple with the L2ExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL2ExpireTimeOk() (*string, bool) {
	if o == nil || IsNil(o.L2ExpireTime) {
		return nil, false
	}
	return o.L2ExpireTime, true
}

// HasL2ExpireTime returns a boolean if a field has been set.
func (o *FastWithdraw) HasL2ExpireTime() bool {
	if o != nil && !IsNil(o.L2ExpireTime) {
		return true
	}

	return false
}

// SetL2ExpireTime gets a reference to the given string and assigns it to the L2ExpireTime field.
func (o *FastWithdraw) SetL2ExpireTime(v string) {
	o.L2ExpireTime = &v
}

// GetL2Signature returns the L2Signature field value if set, zero value otherwise.
func (o *FastWithdraw) GetL2Signature() L2Signature {
	if o == nil || IsNil(o.L2Signature) {
		var ret L2Signature
		return ret
	}
	return *o.L2Signature
}

// GetL2SignatureOk returns a tuple with the L2Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL2SignatureOk() (*L2Signature, bool) {
	if o == nil || IsNil(o.L2Signature) {
		return nil, false
	}
	return o.L2Signature, true
}

// HasL2Signature returns a boolean if a field has been set.
func (o *FastWithdraw) HasL2Signature() bool {
	if o != nil && !IsNil(o.L2Signature) {
		return true
	}

	return false
}

// SetL2Signature gets a reference to the given L2Signature and assigns it to the L2Signature field.
func (o *FastWithdraw) SetL2Signature(v L2Signature) {
	o.L2Signature = &v
}

// GetExtraType returns the ExtraType field value if set, zero value otherwise.
func (o *FastWithdraw) GetExtraType() string {
	if o == nil || IsNil(o.ExtraType) {
		var ret string
		return ret
	}
	return *o.ExtraType
}

// GetExtraTypeOk returns a tuple with the ExtraType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetExtraTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraType) {
		return nil, false
	}
	return o.ExtraType, true
}

// HasExtraType returns a boolean if a field has been set.
func (o *FastWithdraw) HasExtraType() bool {
	if o != nil && !IsNil(o.ExtraType) {
		return true
	}

	return false
}

// SetExtraType gets a reference to the given string and assigns it to the ExtraType field.
func (o *FastWithdraw) SetExtraType(v string) {
	o.ExtraType = &v
}

// GetExtraDataJson returns the ExtraDataJson field value if set, zero value otherwise.
func (o *FastWithdraw) GetExtraDataJson() string {
	if o == nil || IsNil(o.ExtraDataJson) {
		var ret string
		return ret
	}
	return *o.ExtraDataJson
}

// GetExtraDataJsonOk returns a tuple with the ExtraDataJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetExtraDataJsonOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraDataJson) {
		return nil, false
	}
	return o.ExtraDataJson, true
}

// HasExtraDataJson returns a boolean if a field has been set.
func (o *FastWithdraw) HasExtraDataJson() bool {
	if o != nil && !IsNil(o.ExtraDataJson) {
		return true
	}

	return false
}

// SetExtraDataJson gets a reference to the given string and assigns it to the ExtraDataJson field.
func (o *FastWithdraw) SetExtraDataJson(v string) {
	o.ExtraDataJson = &v
}

// GetFactRegistryAddress returns the FactRegistryAddress field value if set, zero value otherwise.
func (o *FastWithdraw) GetFactRegistryAddress() string {
	if o == nil || IsNil(o.FactRegistryAddress) {
		var ret string
		return ret
	}
	return *o.FactRegistryAddress
}

// GetFactRegistryAddressOk returns a tuple with the FactRegistryAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetFactRegistryAddressOk() (*string, bool) {
	if o == nil || IsNil(o.FactRegistryAddress) {
		return nil, false
	}
	return o.FactRegistryAddress, true
}

// HasFactRegistryAddress returns a boolean if a field has been set.
func (o *FastWithdraw) HasFactRegistryAddress() bool {
	if o != nil && !IsNil(o.FactRegistryAddress) {
		return true
	}

	return false
}

// SetFactRegistryAddress gets a reference to the given string and assigns it to the FactRegistryAddress field.
func (o *FastWithdraw) SetFactRegistryAddress(v string) {
	o.FactRegistryAddress = &v
}

// GetFact returns the Fact field value if set, zero value otherwise.
func (o *FastWithdraw) GetFact() string {
	if o == nil || IsNil(o.Fact) {
		var ret string
		return ret
	}
	return *o.Fact
}

// GetFactOk returns a tuple with the Fact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetFactOk() (*string, bool) {
	if o == nil || IsNil(o.Fact) {
		return nil, false
	}
	return o.Fact, true
}

// HasFact returns a boolean if a field has been set.
func (o *FastWithdraw) HasFact() bool {
	if o != nil && !IsNil(o.Fact) {
		return true
	}

	return false
}

// SetFact gets a reference to the given string and assigns it to the Fact field.
func (o *FastWithdraw) SetFact(v string) {
	o.Fact = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FastWithdraw) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FastWithdraw) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FastWithdraw) SetStatus(v string) {
	o.Status = &v
}

// GetCollateralTransactionId returns the CollateralTransactionId field value if set, zero value otherwise.
func (o *FastWithdraw) GetCollateralTransactionId() string {
	if o == nil || IsNil(o.CollateralTransactionId) {
		var ret string
		return ret
	}
	return *o.CollateralTransactionId
}

// GetCollateralTransactionIdOk returns a tuple with the CollateralTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetCollateralTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CollateralTransactionId) {
		return nil, false
	}
	return o.CollateralTransactionId, true
}

// HasCollateralTransactionId returns a boolean if a field has been set.
func (o *FastWithdraw) HasCollateralTransactionId() bool {
	if o != nil && !IsNil(o.CollateralTransactionId) {
		return true
	}

	return false
}

// SetCollateralTransactionId gets a reference to the given string and assigns it to the CollateralTransactionId field.
func (o *FastWithdraw) SetCollateralTransactionId(v string) {
	o.CollateralTransactionId = &v
}

// GetCensorTxId returns the CensorTxId field value if set, zero value otherwise.
func (o *FastWithdraw) GetCensorTxId() string {
	if o == nil || IsNil(o.CensorTxId) {
		var ret string
		return ret
	}
	return *o.CensorTxId
}

// GetCensorTxIdOk returns a tuple with the CensorTxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetCensorTxIdOk() (*string, bool) {
	if o == nil || IsNil(o.CensorTxId) {
		return nil, false
	}
	return o.CensorTxId, true
}

// HasCensorTxId returns a boolean if a field has been set.
func (o *FastWithdraw) HasCensorTxId() bool {
	if o != nil && !IsNil(o.CensorTxId) {
		return true
	}

	return false
}

// SetCensorTxId gets a reference to the given string and assigns it to the CensorTxId field.
func (o *FastWithdraw) SetCensorTxId(v string) {
	o.CensorTxId = &v
}

// GetCensorTime returns the CensorTime field value if set, zero value otherwise.
func (o *FastWithdraw) GetCensorTime() string {
	if o == nil || IsNil(o.CensorTime) {
		var ret string
		return ret
	}
	return *o.CensorTime
}

// GetCensorTimeOk returns a tuple with the CensorTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetCensorTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CensorTime) {
		return nil, false
	}
	return o.CensorTime, true
}

// HasCensorTime returns a boolean if a field has been set.
func (o *FastWithdraw) HasCensorTime() bool {
	if o != nil && !IsNil(o.CensorTime) {
		return true
	}

	return false
}

// SetCensorTime gets a reference to the given string and assigns it to the CensorTime field.
func (o *FastWithdraw) SetCensorTime(v string) {
	o.CensorTime = &v
}

// GetCensorFailCode returns the CensorFailCode field value if set, zero value otherwise.
func (o *FastWithdraw) GetCensorFailCode() string {
	if o == nil || IsNil(o.CensorFailCode) {
		var ret string
		return ret
	}
	return *o.CensorFailCode
}

// GetCensorFailCodeOk returns a tuple with the CensorFailCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetCensorFailCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CensorFailCode) {
		return nil, false
	}
	return o.CensorFailCode, true
}

// HasCensorFailCode returns a boolean if a field has been set.
func (o *FastWithdraw) HasCensorFailCode() bool {
	if o != nil && !IsNil(o.CensorFailCode) {
		return true
	}

	return false
}

// SetCensorFailCode gets a reference to the given string and assigns it to the CensorFailCode field.
func (o *FastWithdraw) SetCensorFailCode(v string) {
	o.CensorFailCode = &v
}

// GetCensorFailReason returns the CensorFailReason field value if set, zero value otherwise.
func (o *FastWithdraw) GetCensorFailReason() string {
	if o == nil || IsNil(o.CensorFailReason) {
		var ret string
		return ret
	}
	return *o.CensorFailReason
}

// GetCensorFailReasonOk returns a tuple with the CensorFailReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetCensorFailReasonOk() (*string, bool) {
	if o == nil || IsNil(o.CensorFailReason) {
		return nil, false
	}
	return o.CensorFailReason, true
}

// HasCensorFailReason returns a boolean if a field has been set.
func (o *FastWithdraw) HasCensorFailReason() bool {
	if o != nil && !IsNil(o.CensorFailReason) {
		return true
	}

	return false
}

// SetCensorFailReason gets a reference to the given string and assigns it to the CensorFailReason field.
func (o *FastWithdraw) SetCensorFailReason(v string) {
	o.CensorFailReason = &v
}

// GetL2TxId returns the L2TxId field value if set, zero value otherwise.
func (o *FastWithdraw) GetL2TxId() string {
	if o == nil || IsNil(o.L2TxId) {
		var ret string
		return ret
	}
	return *o.L2TxId
}

// GetL2TxIdOk returns a tuple with the L2TxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL2TxIdOk() (*string, bool) {
	if o == nil || IsNil(o.L2TxId) {
		return nil, false
	}
	return o.L2TxId, true
}

// HasL2TxId returns a boolean if a field has been set.
func (o *FastWithdraw) HasL2TxId() bool {
	if o != nil && !IsNil(o.L2TxId) {
		return true
	}

	return false
}

// SetL2TxId gets a reference to the given string and assigns it to the L2TxId field.
func (o *FastWithdraw) SetL2TxId(v string) {
	o.L2TxId = &v
}

// GetL2HandleTime returns the L2HandleTime field value if set, zero value otherwise.
func (o *FastWithdraw) GetL2HandleTime() string {
	if o == nil || IsNil(o.L2HandleTime) {
		var ret string
		return ret
	}
	return *o.L2HandleTime
}

// GetL2HandleTimeOk returns a tuple with the L2HandleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL2HandleTimeOk() (*string, bool) {
	if o == nil || IsNil(o.L2HandleTime) {
		return nil, false
	}
	return o.L2HandleTime, true
}

// HasL2HandleTime returns a boolean if a field has been set.
func (o *FastWithdraw) HasL2HandleTime() bool {
	if o != nil && !IsNil(o.L2HandleTime) {
		return true
	}

	return false
}

// SetL2HandleTime gets a reference to the given string and assigns it to the L2HandleTime field.
func (o *FastWithdraw) SetL2HandleTime(v string) {
	o.L2HandleTime = &v
}

// GetL2RejectCode returns the L2RejectCode field value if set, zero value otherwise.
func (o *FastWithdraw) GetL2RejectCode() string {
	if o == nil || IsNil(o.L2RejectCode) {
		var ret string
		return ret
	}
	return *o.L2RejectCode
}

// GetL2RejectCodeOk returns a tuple with the L2RejectCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL2RejectCodeOk() (*string, bool) {
	if o == nil || IsNil(o.L2RejectCode) {
		return nil, false
	}
	return o.L2RejectCode, true
}

// HasL2RejectCode returns a boolean if a field has been set.
func (o *FastWithdraw) HasL2RejectCode() bool {
	if o != nil && !IsNil(o.L2RejectCode) {
		return true
	}

	return false
}

// SetL2RejectCode gets a reference to the given string and assigns it to the L2RejectCode field.
func (o *FastWithdraw) SetL2RejectCode(v string) {
	o.L2RejectCode = &v
}

// GetL2RejectReason returns the L2RejectReason field value if set, zero value otherwise.
func (o *FastWithdraw) GetL2RejectReason() string {
	if o == nil || IsNil(o.L2RejectReason) {
		var ret string
		return ret
	}
	return *o.L2RejectReason
}

// GetL2RejectReasonOk returns a tuple with the L2RejectReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL2RejectReasonOk() (*string, bool) {
	if o == nil || IsNil(o.L2RejectReason) {
		return nil, false
	}
	return o.L2RejectReason, true
}

// HasL2RejectReason returns a boolean if a field has been set.
func (o *FastWithdraw) HasL2RejectReason() bool {
	if o != nil && !IsNil(o.L2RejectReason) {
		return true
	}

	return false
}

// SetL2RejectReason gets a reference to the given string and assigns it to the L2RejectReason field.
func (o *FastWithdraw) SetL2RejectReason(v string) {
	o.L2RejectReason = &v
}

// GetL1ConfirmedTx returns the L1ConfirmedTx field value if set, zero value otherwise.
func (o *FastWithdraw) GetL1ConfirmedTx() L1Tx {
	if o == nil || IsNil(o.L1ConfirmedTx) {
		var ret L1Tx
		return ret
	}
	return *o.L1ConfirmedTx
}

// GetL1ConfirmedTxOk returns a tuple with the L1ConfirmedTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL1ConfirmedTxOk() (*L1Tx, bool) {
	if o == nil || IsNil(o.L1ConfirmedTx) {
		return nil, false
	}
	return o.L1ConfirmedTx, true
}

// HasL1ConfirmedTx returns a boolean if a field has been set.
func (o *FastWithdraw) HasL1ConfirmedTx() bool {
	if o != nil && !IsNil(o.L1ConfirmedTx) {
		return true
	}

	return false
}

// SetL1ConfirmedTx gets a reference to the given L1Tx and assigns it to the L1ConfirmedTx field.
func (o *FastWithdraw) SetL1ConfirmedTx(v L1Tx) {
	o.L1ConfirmedTx = &v
}

// GetL1ConfirmedTime returns the L1ConfirmedTime field value if set, zero value otherwise.
func (o *FastWithdraw) GetL1ConfirmedTime() string {
	if o == nil || IsNil(o.L1ConfirmedTime) {
		var ret string
		return ret
	}
	return *o.L1ConfirmedTime
}

// GetL1ConfirmedTimeOk returns a tuple with the L1ConfirmedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL1ConfirmedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.L1ConfirmedTime) {
		return nil, false
	}
	return o.L1ConfirmedTime, true
}

// HasL1ConfirmedTime returns a boolean if a field has been set.
func (o *FastWithdraw) HasL1ConfirmedTime() bool {
	if o != nil && !IsNil(o.L1ConfirmedTime) {
		return true
	}

	return false
}

// SetL1ConfirmedTime gets a reference to the given string and assigns it to the L1ConfirmedTime field.
func (o *FastWithdraw) SetL1ConfirmedTime(v string) {
	o.L1ConfirmedTime = &v
}

// GetL1CompletedTime returns the L1CompletedTime field value if set, zero value otherwise.
func (o *FastWithdraw) GetL1CompletedTime() string {
	if o == nil || IsNil(o.L1CompletedTime) {
		var ret string
		return ret
	}
	return *o.L1CompletedTime
}

// GetL1CompletedTimeOk returns a tuple with the L1CompletedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL1CompletedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.L1CompletedTime) {
		return nil, false
	}
	return o.L1CompletedTime, true
}

// HasL1CompletedTime returns a boolean if a field has been set.
func (o *FastWithdraw) HasL1CompletedTime() bool {
	if o != nil && !IsNil(o.L1CompletedTime) {
		return true
	}

	return false
}

// SetL1CompletedTime gets a reference to the given string and assigns it to the L1CompletedTime field.
func (o *FastWithdraw) SetL1CompletedTime(v string) {
	o.L1CompletedTime = &v
}

// GetL1RejectedReasonCode returns the L1RejectedReasonCode field value if set, zero value otherwise.
func (o *FastWithdraw) GetL1RejectedReasonCode() string {
	if o == nil || IsNil(o.L1RejectedReasonCode) {
		var ret string
		return ret
	}
	return *o.L1RejectedReasonCode
}

// GetL1RejectedReasonCodeOk returns a tuple with the L1RejectedReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL1RejectedReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.L1RejectedReasonCode) {
		return nil, false
	}
	return o.L1RejectedReasonCode, true
}

// HasL1RejectedReasonCode returns a boolean if a field has been set.
func (o *FastWithdraw) HasL1RejectedReasonCode() bool {
	if o != nil && !IsNil(o.L1RejectedReasonCode) {
		return true
	}

	return false
}

// SetL1RejectedReasonCode gets a reference to the given string and assigns it to the L1RejectedReasonCode field.
func (o *FastWithdraw) SetL1RejectedReasonCode(v string) {
	o.L1RejectedReasonCode = &v
}

// GetL1RejectedReasonMsg returns the L1RejectedReasonMsg field value if set, zero value otherwise.
func (o *FastWithdraw) GetL1RejectedReasonMsg() string {
	if o == nil || IsNil(o.L1RejectedReasonMsg) {
		var ret string
		return ret
	}
	return *o.L1RejectedReasonMsg
}

// GetL1RejectedReasonMsgOk returns a tuple with the L1RejectedReasonMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetL1RejectedReasonMsgOk() (*string, bool) {
	if o == nil || IsNil(o.L1RejectedReasonMsg) {
		return nil, false
	}
	return o.L1RejectedReasonMsg, true
}

// HasL1RejectedReasonMsg returns a boolean if a field has been set.
func (o *FastWithdraw) HasL1RejectedReasonMsg() bool {
	if o != nil && !IsNil(o.L1RejectedReasonMsg) {
		return true
	}

	return false
}

// SetL1RejectedReasonMsg gets a reference to the given string and assigns it to the L1RejectedReasonMsg field.
func (o *FastWithdraw) SetL1RejectedReasonMsg(v string) {
	o.L1RejectedReasonMsg = &v
}

// GetRiskSignature returns the RiskSignature field value if set, zero value otherwise.
func (o *FastWithdraw) GetRiskSignature() L2Signature {
	if o == nil || IsNil(o.RiskSignature) {
		var ret L2Signature
		return ret
	}
	return *o.RiskSignature
}

// GetRiskSignatureOk returns a tuple with the RiskSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetRiskSignatureOk() (*L2Signature, bool) {
	if o == nil || IsNil(o.RiskSignature) {
		return nil, false
	}
	return o.RiskSignature, true
}

// HasRiskSignature returns a boolean if a field has been set.
func (o *FastWithdraw) HasRiskSignature() bool {
	if o != nil && !IsNil(o.RiskSignature) {
		return true
	}

	return false
}

// SetRiskSignature gets a reference to the given L2Signature and assigns it to the RiskSignature field.
func (o *FastWithdraw) SetRiskSignature(v L2Signature) {
	o.RiskSignature = &v
}

// GetTransferOutId returns the TransferOutId field value if set, zero value otherwise.
func (o *FastWithdraw) GetTransferOutId() string {
	if o == nil || IsNil(o.TransferOutId) {
		var ret string
		return ret
	}
	return *o.TransferOutId
}

// GetTransferOutIdOk returns a tuple with the TransferOutId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetTransferOutIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransferOutId) {
		return nil, false
	}
	return o.TransferOutId, true
}

// HasTransferOutId returns a boolean if a field has been set.
func (o *FastWithdraw) HasTransferOutId() bool {
	if o != nil && !IsNil(o.TransferOutId) {
		return true
	}

	return false
}

// SetTransferOutId gets a reference to the given string and assigns it to the TransferOutId field.
func (o *FastWithdraw) SetTransferOutId(v string) {
	o.TransferOutId = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *FastWithdraw) GetCreatedTime() string {
	if o == nil || IsNil(o.CreatedTime) {
		var ret string
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetCreatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *FastWithdraw) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given string and assigns it to the CreatedTime field.
func (o *FastWithdraw) SetCreatedTime(v string) {
	o.CreatedTime = &v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *FastWithdraw) GetUpdatedTime() string {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret string
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastWithdraw) GetUpdatedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *FastWithdraw) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given string and assigns it to the UpdatedTime field.
func (o *FastWithdraw) SetUpdatedTime(v string) {
	o.UpdatedTime = &v
}

func (o FastWithdraw) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FastWithdraw) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.CoinId) {
		toSerialize["coinId"] = o.CoinId
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.EthAddress) {
		toSerialize["ethAddress"] = o.EthAddress
	}
	if !IsNil(o.Erc20Address) {
		toSerialize["erc20Address"] = o.Erc20Address
	}
	if !IsNil(o.LpAccountId) {
		toSerialize["lpAccountId"] = o.LpAccountId
	}
	if !IsNil(o.LpAccountL2Key) {
		toSerialize["lpAccountL2Key"] = o.LpAccountL2Key
	}
	if !IsNil(o.ClientFastWithdrawId) {
		toSerialize["clientFastWithdrawId"] = o.ClientFastWithdrawId
	}
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	if !IsNil(o.ChainId) {
		toSerialize["chainId"] = o.ChainId
	}
	if !IsNil(o.L2Nonce) {
		toSerialize["l2Nonce"] = o.L2Nonce
	}
	if !IsNil(o.L2ExpireTime) {
		toSerialize["l2ExpireTime"] = o.L2ExpireTime
	}
	if !IsNil(o.L2Signature) {
		toSerialize["l2Signature"] = o.L2Signature
	}
	if !IsNil(o.ExtraType) {
		toSerialize["extraType"] = o.ExtraType
	}
	if !IsNil(o.ExtraDataJson) {
		toSerialize["extraDataJson"] = o.ExtraDataJson
	}
	if !IsNil(o.FactRegistryAddress) {
		toSerialize["factRegistryAddress"] = o.FactRegistryAddress
	}
	if !IsNil(o.Fact) {
		toSerialize["fact"] = o.Fact
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CollateralTransactionId) {
		toSerialize["collateralTransactionId"] = o.CollateralTransactionId
	}
	if !IsNil(o.CensorTxId) {
		toSerialize["censorTxId"] = o.CensorTxId
	}
	if !IsNil(o.CensorTime) {
		toSerialize["censorTime"] = o.CensorTime
	}
	if !IsNil(o.CensorFailCode) {
		toSerialize["censorFailCode"] = o.CensorFailCode
	}
	if !IsNil(o.CensorFailReason) {
		toSerialize["censorFailReason"] = o.CensorFailReason
	}
	if !IsNil(o.L2TxId) {
		toSerialize["l2TxId"] = o.L2TxId
	}
	if !IsNil(o.L2HandleTime) {
		toSerialize["l2HandleTime"] = o.L2HandleTime
	}
	if !IsNil(o.L2RejectCode) {
		toSerialize["l2RejectCode"] = o.L2RejectCode
	}
	if !IsNil(o.L2RejectReason) {
		toSerialize["l2RejectReason"] = o.L2RejectReason
	}
	if !IsNil(o.L1ConfirmedTx) {
		toSerialize["l1ConfirmedTx"] = o.L1ConfirmedTx
	}
	if !IsNil(o.L1ConfirmedTime) {
		toSerialize["l1ConfirmedTime"] = o.L1ConfirmedTime
	}
	if !IsNil(o.L1CompletedTime) {
		toSerialize["l1CompletedTime"] = o.L1CompletedTime
	}
	if !IsNil(o.L1RejectedReasonCode) {
		toSerialize["l1RejectedReasonCode"] = o.L1RejectedReasonCode
	}
	if !IsNil(o.L1RejectedReasonMsg) {
		toSerialize["l1RejectedReasonMsg"] = o.L1RejectedReasonMsg
	}
	if !IsNil(o.RiskSignature) {
		toSerialize["riskSignature"] = o.RiskSignature
	}
	if !IsNil(o.TransferOutId) {
		toSerialize["transferOutId"] = o.TransferOutId
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["createdTime"] = o.CreatedTime
	}
	if !IsNil(o.UpdatedTime) {
		toSerialize["updatedTime"] = o.UpdatedTime
	}
	return toSerialize, nil
}

type NullableFastWithdraw struct {
	value *FastWithdraw
	isSet bool
}

func (v NullableFastWithdraw) Get() *FastWithdraw {
	return v.value
}

func (v *NullableFastWithdraw) Set(val *FastWithdraw) {
	v.value = val
	v.isSet = true
}

func (v NullableFastWithdraw) IsSet() bool {
	return v.isSet
}

func (v *NullableFastWithdraw) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFastWithdraw(val *FastWithdraw) *NullableFastWithdraw {
	return &NullableFastWithdraw{value: val, isSet: true}
}

func (v NullableFastWithdraw) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFastWithdraw) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


