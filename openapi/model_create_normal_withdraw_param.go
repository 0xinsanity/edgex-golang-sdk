/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateNormalWithdrawParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNormalWithdrawParam{}

// CreateNormalWithdrawParam 创建普通提现单-请求
type CreateNormalWithdrawParam struct {
	// 账户id
	AccountId *string `json:"accountId,omitempty"`
	// 币id
	CoinId *string `json:"coinId,omitempty"`
	// 提现数量
	Amount *string `json:"amount,omitempty"`
	// 提现到的地址。如果为空，则提到本账号对应的地址。
	EthAddress *string `json:"ethAddress,omitempty"`
	// 客户自定义id，用于签名&幂等校验。必须填写。
	ClientWithdrawId *string `json:"clientWithdrawId,omitempty"`
	// 过期时间
	ExpireTime *string `json:"expireTime,omitempty"`
	// 提交l2的签名
	L2Signature *string `json:"l2Signature,omitempty"`
}

// NewCreateNormalWithdrawParam instantiates a new CreateNormalWithdrawParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNormalWithdrawParam() *CreateNormalWithdrawParam {
	this := CreateNormalWithdrawParam{}
	return &this
}

// NewCreateNormalWithdrawParamWithDefaults instantiates a new CreateNormalWithdrawParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNormalWithdrawParamWithDefaults() *CreateNormalWithdrawParam {
	this := CreateNormalWithdrawParam{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CreateNormalWithdrawParam) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNormalWithdrawParam) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CreateNormalWithdrawParam) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CreateNormalWithdrawParam) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCoinId returns the CoinId field value if set, zero value otherwise.
func (o *CreateNormalWithdrawParam) GetCoinId() string {
	if o == nil || IsNil(o.CoinId) {
		var ret string
		return ret
	}
	return *o.CoinId
}

// GetCoinIdOk returns a tuple with the CoinId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNormalWithdrawParam) GetCoinIdOk() (*string, bool) {
	if o == nil || IsNil(o.CoinId) {
		return nil, false
	}
	return o.CoinId, true
}

// HasCoinId returns a boolean if a field has been set.
func (o *CreateNormalWithdrawParam) HasCoinId() bool {
	if o != nil && !IsNil(o.CoinId) {
		return true
	}

	return false
}

// SetCoinId gets a reference to the given string and assigns it to the CoinId field.
func (o *CreateNormalWithdrawParam) SetCoinId(v string) {
	o.CoinId = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CreateNormalWithdrawParam) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNormalWithdrawParam) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CreateNormalWithdrawParam) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *CreateNormalWithdrawParam) SetAmount(v string) {
	o.Amount = &v
}

// GetEthAddress returns the EthAddress field value if set, zero value otherwise.
func (o *CreateNormalWithdrawParam) GetEthAddress() string {
	if o == nil || IsNil(o.EthAddress) {
		var ret string
		return ret
	}
	return *o.EthAddress
}

// GetEthAddressOk returns a tuple with the EthAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNormalWithdrawParam) GetEthAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EthAddress) {
		return nil, false
	}
	return o.EthAddress, true
}

// HasEthAddress returns a boolean if a field has been set.
func (o *CreateNormalWithdrawParam) HasEthAddress() bool {
	if o != nil && !IsNil(o.EthAddress) {
		return true
	}

	return false
}

// SetEthAddress gets a reference to the given string and assigns it to the EthAddress field.
func (o *CreateNormalWithdrawParam) SetEthAddress(v string) {
	o.EthAddress = &v
}

// GetClientWithdrawId returns the ClientWithdrawId field value if set, zero value otherwise.
func (o *CreateNormalWithdrawParam) GetClientWithdrawId() string {
	if o == nil || IsNil(o.ClientWithdrawId) {
		var ret string
		return ret
	}
	return *o.ClientWithdrawId
}

// GetClientWithdrawIdOk returns a tuple with the ClientWithdrawId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNormalWithdrawParam) GetClientWithdrawIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientWithdrawId) {
		return nil, false
	}
	return o.ClientWithdrawId, true
}

// HasClientWithdrawId returns a boolean if a field has been set.
func (o *CreateNormalWithdrawParam) HasClientWithdrawId() bool {
	if o != nil && !IsNil(o.ClientWithdrawId) {
		return true
	}

	return false
}

// SetClientWithdrawId gets a reference to the given string and assigns it to the ClientWithdrawId field.
func (o *CreateNormalWithdrawParam) SetClientWithdrawId(v string) {
	o.ClientWithdrawId = &v
}

// GetExpireTime returns the ExpireTime field value if set, zero value otherwise.
func (o *CreateNormalWithdrawParam) GetExpireTime() string {
	if o == nil || IsNil(o.ExpireTime) {
		var ret string
		return ret
	}
	return *o.ExpireTime
}

// GetExpireTimeOk returns a tuple with the ExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNormalWithdrawParam) GetExpireTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireTime) {
		return nil, false
	}
	return o.ExpireTime, true
}

// HasExpireTime returns a boolean if a field has been set.
func (o *CreateNormalWithdrawParam) HasExpireTime() bool {
	if o != nil && !IsNil(o.ExpireTime) {
		return true
	}

	return false
}

// SetExpireTime gets a reference to the given string and assigns it to the ExpireTime field.
func (o *CreateNormalWithdrawParam) SetExpireTime(v string) {
	o.ExpireTime = &v
}

// GetL2Signature returns the L2Signature field value if set, zero value otherwise.
func (o *CreateNormalWithdrawParam) GetL2Signature() string {
	if o == nil || IsNil(o.L2Signature) {
		var ret string
		return ret
	}
	return *o.L2Signature
}

// GetL2SignatureOk returns a tuple with the L2Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNormalWithdrawParam) GetL2SignatureOk() (*string, bool) {
	if o == nil || IsNil(o.L2Signature) {
		return nil, false
	}
	return o.L2Signature, true
}

// HasL2Signature returns a boolean if a field has been set.
func (o *CreateNormalWithdrawParam) HasL2Signature() bool {
	if o != nil && !IsNil(o.L2Signature) {
		return true
	}

	return false
}

// SetL2Signature gets a reference to the given string and assigns it to the L2Signature field.
func (o *CreateNormalWithdrawParam) SetL2Signature(v string) {
	o.L2Signature = &v
}

func (o CreateNormalWithdrawParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNormalWithdrawParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.CoinId) {
		toSerialize["coinId"] = o.CoinId
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.EthAddress) {
		toSerialize["ethAddress"] = o.EthAddress
	}
	if !IsNil(o.ClientWithdrawId) {
		toSerialize["clientWithdrawId"] = o.ClientWithdrawId
	}
	if !IsNil(o.ExpireTime) {
		toSerialize["expireTime"] = o.ExpireTime
	}
	if !IsNil(o.L2Signature) {
		toSerialize["l2Signature"] = o.L2Signature
	}
	return toSerialize, nil
}

type NullableCreateNormalWithdrawParam struct {
	value *CreateNormalWithdrawParam
	isSet bool
}

func (v NullableCreateNormalWithdrawParam) Get() *CreateNormalWithdrawParam {
	return v.value
}

func (v *NullableCreateNormalWithdrawParam) Set(val *CreateNormalWithdrawParam) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNormalWithdrawParam) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNormalWithdrawParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNormalWithdrawParam(val *CreateNormalWithdrawParam) *NullableCreateNormalWithdrawParam {
	return &NullableCreateNormalWithdrawParam{value: val, isSet: true}
}

func (v NullableCreateNormalWithdrawParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNormalWithdrawParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


