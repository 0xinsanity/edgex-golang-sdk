/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OpenTpSlParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenTpSlParam{}

// OpenTpSlParam 开仓止盈止损参数
type OpenTpSlParam struct {
	// 买卖方向,此字段必填
	Side *string `json:"side,omitempty"`
	// 委托价格(最差可接受的价格), 实际为decimal类型。此字段必填，市价单时填0
	Price *string `json:"price,omitempty"`
	// 委托数量, 实际为decimal类型。此字段必填
	Size *string `json:"size,omitempty"`
	// 客户自定义id，用于签名&幂等校验。此字段必填
	ClientOrderId *string `json:"clientOrderId,omitempty"`
	// 触发价格。此字段必填
	TriggerPrice *string `json:"triggerPrice,omitempty"`
	// 价格类型。最新市价[默认],标记价格。此字段必填。
	TriggerPriceType *string `json:"triggerPriceType,omitempty"`
	// 过期时间。
	ExpireTime *string `json:"expireTime,omitempty"`
	// l2签名nonce。取sha256(client_order_id) 前32个bit
	L2Nonce *string `json:"l2Nonce,omitempty"`
	// l2签名委托价值(实际成交价必须等于或优于 l2_value / l2_price), 与 price x size 的值可能不一样。实际为decimal类型
	L2Value *string `json:"l2Value,omitempty"`
	// l2签名委托数量, 与size字段可能不一样。实际为decimal类型
	L2Size *string `json:"l2Size,omitempty"`
	// l2签名最高可以接受的下单费用
	L2LimitFee *string `json:"l2LimitFee,omitempty"`
	// l2签名过期时间. unix时间的小时数，至少要比 expire_time 晚10个小时
	L2ExpireTime *string `json:"l2ExpireTime,omitempty"`
	// l2签名
	L2Signature *string `json:"l2Signature,omitempty"`
}

// NewOpenTpSlParam instantiates a new OpenTpSlParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenTpSlParam() *OpenTpSlParam {
	this := OpenTpSlParam{}
	return &this
}

// NewOpenTpSlParamWithDefaults instantiates a new OpenTpSlParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenTpSlParamWithDefaults() *OpenTpSlParam {
	this := OpenTpSlParam{}
	return &this
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetSide() string {
	if o == nil || IsNil(o.Side) {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetSideOk() (*string, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *OpenTpSlParam) SetSide(v string) {
	o.Side = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *OpenTpSlParam) SetPrice(v string) {
	o.Price = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *OpenTpSlParam) SetSize(v string) {
	o.Size = &v
}

// GetClientOrderId returns the ClientOrderId field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetClientOrderId() string {
	if o == nil || IsNil(o.ClientOrderId) {
		var ret string
		return ret
	}
	return *o.ClientOrderId
}

// GetClientOrderIdOk returns a tuple with the ClientOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetClientOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientOrderId) {
		return nil, false
	}
	return o.ClientOrderId, true
}

// HasClientOrderId returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasClientOrderId() bool {
	if o != nil && !IsNil(o.ClientOrderId) {
		return true
	}

	return false
}

// SetClientOrderId gets a reference to the given string and assigns it to the ClientOrderId field.
func (o *OpenTpSlParam) SetClientOrderId(v string) {
	o.ClientOrderId = &v
}

// GetTriggerPrice returns the TriggerPrice field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetTriggerPrice() string {
	if o == nil || IsNil(o.TriggerPrice) {
		var ret string
		return ret
	}
	return *o.TriggerPrice
}

// GetTriggerPriceOk returns a tuple with the TriggerPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetTriggerPriceOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerPrice) {
		return nil, false
	}
	return o.TriggerPrice, true
}

// HasTriggerPrice returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasTriggerPrice() bool {
	if o != nil && !IsNil(o.TriggerPrice) {
		return true
	}

	return false
}

// SetTriggerPrice gets a reference to the given string and assigns it to the TriggerPrice field.
func (o *OpenTpSlParam) SetTriggerPrice(v string) {
	o.TriggerPrice = &v
}

// GetTriggerPriceType returns the TriggerPriceType field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetTriggerPriceType() string {
	if o == nil || IsNil(o.TriggerPriceType) {
		var ret string
		return ret
	}
	return *o.TriggerPriceType
}

// GetTriggerPriceTypeOk returns a tuple with the TriggerPriceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetTriggerPriceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerPriceType) {
		return nil, false
	}
	return o.TriggerPriceType, true
}

// HasTriggerPriceType returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasTriggerPriceType() bool {
	if o != nil && !IsNil(o.TriggerPriceType) {
		return true
	}

	return false
}

// SetTriggerPriceType gets a reference to the given string and assigns it to the TriggerPriceType field.
func (o *OpenTpSlParam) SetTriggerPriceType(v string) {
	o.TriggerPriceType = &v
}

// GetExpireTime returns the ExpireTime field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetExpireTime() string {
	if o == nil || IsNil(o.ExpireTime) {
		var ret string
		return ret
	}
	return *o.ExpireTime
}

// GetExpireTimeOk returns a tuple with the ExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetExpireTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireTime) {
		return nil, false
	}
	return o.ExpireTime, true
}

// HasExpireTime returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasExpireTime() bool {
	if o != nil && !IsNil(o.ExpireTime) {
		return true
	}

	return false
}

// SetExpireTime gets a reference to the given string and assigns it to the ExpireTime field.
func (o *OpenTpSlParam) SetExpireTime(v string) {
	o.ExpireTime = &v
}

// GetL2Nonce returns the L2Nonce field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetL2Nonce() string {
	if o == nil || IsNil(o.L2Nonce) {
		var ret string
		return ret
	}
	return *o.L2Nonce
}

// GetL2NonceOk returns a tuple with the L2Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetL2NonceOk() (*string, bool) {
	if o == nil || IsNil(o.L2Nonce) {
		return nil, false
	}
	return o.L2Nonce, true
}

// HasL2Nonce returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasL2Nonce() bool {
	if o != nil && !IsNil(o.L2Nonce) {
		return true
	}

	return false
}

// SetL2Nonce gets a reference to the given string and assigns it to the L2Nonce field.
func (o *OpenTpSlParam) SetL2Nonce(v string) {
	o.L2Nonce = &v
}

// GetL2Value returns the L2Value field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetL2Value() string {
	if o == nil || IsNil(o.L2Value) {
		var ret string
		return ret
	}
	return *o.L2Value
}

// GetL2ValueOk returns a tuple with the L2Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetL2ValueOk() (*string, bool) {
	if o == nil || IsNil(o.L2Value) {
		return nil, false
	}
	return o.L2Value, true
}

// HasL2Value returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasL2Value() bool {
	if o != nil && !IsNil(o.L2Value) {
		return true
	}

	return false
}

// SetL2Value gets a reference to the given string and assigns it to the L2Value field.
func (o *OpenTpSlParam) SetL2Value(v string) {
	o.L2Value = &v
}

// GetL2Size returns the L2Size field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetL2Size() string {
	if o == nil || IsNil(o.L2Size) {
		var ret string
		return ret
	}
	return *o.L2Size
}

// GetL2SizeOk returns a tuple with the L2Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetL2SizeOk() (*string, bool) {
	if o == nil || IsNil(o.L2Size) {
		return nil, false
	}
	return o.L2Size, true
}

// HasL2Size returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasL2Size() bool {
	if o != nil && !IsNil(o.L2Size) {
		return true
	}

	return false
}

// SetL2Size gets a reference to the given string and assigns it to the L2Size field.
func (o *OpenTpSlParam) SetL2Size(v string) {
	o.L2Size = &v
}

// GetL2LimitFee returns the L2LimitFee field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetL2LimitFee() string {
	if o == nil || IsNil(o.L2LimitFee) {
		var ret string
		return ret
	}
	return *o.L2LimitFee
}

// GetL2LimitFeeOk returns a tuple with the L2LimitFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetL2LimitFeeOk() (*string, bool) {
	if o == nil || IsNil(o.L2LimitFee) {
		return nil, false
	}
	return o.L2LimitFee, true
}

// HasL2LimitFee returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasL2LimitFee() bool {
	if o != nil && !IsNil(o.L2LimitFee) {
		return true
	}

	return false
}

// SetL2LimitFee gets a reference to the given string and assigns it to the L2LimitFee field.
func (o *OpenTpSlParam) SetL2LimitFee(v string) {
	o.L2LimitFee = &v
}

// GetL2ExpireTime returns the L2ExpireTime field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetL2ExpireTime() string {
	if o == nil || IsNil(o.L2ExpireTime) {
		var ret string
		return ret
	}
	return *o.L2ExpireTime
}

// GetL2ExpireTimeOk returns a tuple with the L2ExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetL2ExpireTimeOk() (*string, bool) {
	if o == nil || IsNil(o.L2ExpireTime) {
		return nil, false
	}
	return o.L2ExpireTime, true
}

// HasL2ExpireTime returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasL2ExpireTime() bool {
	if o != nil && !IsNil(o.L2ExpireTime) {
		return true
	}

	return false
}

// SetL2ExpireTime gets a reference to the given string and assigns it to the L2ExpireTime field.
func (o *OpenTpSlParam) SetL2ExpireTime(v string) {
	o.L2ExpireTime = &v
}

// GetL2Signature returns the L2Signature field value if set, zero value otherwise.
func (o *OpenTpSlParam) GetL2Signature() string {
	if o == nil || IsNil(o.L2Signature) {
		var ret string
		return ret
	}
	return *o.L2Signature
}

// GetL2SignatureOk returns a tuple with the L2Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenTpSlParam) GetL2SignatureOk() (*string, bool) {
	if o == nil || IsNil(o.L2Signature) {
		return nil, false
	}
	return o.L2Signature, true
}

// HasL2Signature returns a boolean if a field has been set.
func (o *OpenTpSlParam) HasL2Signature() bool {
	if o != nil && !IsNil(o.L2Signature) {
		return true
	}

	return false
}

// SetL2Signature gets a reference to the given string and assigns it to the L2Signature field.
func (o *OpenTpSlParam) SetL2Signature(v string) {
	o.L2Signature = &v
}

func (o OpenTpSlParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenTpSlParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.ClientOrderId) {
		toSerialize["clientOrderId"] = o.ClientOrderId
	}
	if !IsNil(o.TriggerPrice) {
		toSerialize["triggerPrice"] = o.TriggerPrice
	}
	if !IsNil(o.TriggerPriceType) {
		toSerialize["triggerPriceType"] = o.TriggerPriceType
	}
	if !IsNil(o.ExpireTime) {
		toSerialize["expireTime"] = o.ExpireTime
	}
	if !IsNil(o.L2Nonce) {
		toSerialize["l2Nonce"] = o.L2Nonce
	}
	if !IsNil(o.L2Value) {
		toSerialize["l2Value"] = o.L2Value
	}
	if !IsNil(o.L2Size) {
		toSerialize["l2Size"] = o.L2Size
	}
	if !IsNil(o.L2LimitFee) {
		toSerialize["l2LimitFee"] = o.L2LimitFee
	}
	if !IsNil(o.L2ExpireTime) {
		toSerialize["l2ExpireTime"] = o.L2ExpireTime
	}
	if !IsNil(o.L2Signature) {
		toSerialize["l2Signature"] = o.L2Signature
	}
	return toSerialize, nil
}

type NullableOpenTpSlParam struct {
	value *OpenTpSlParam
	isSet bool
}

func (v NullableOpenTpSlParam) Get() *OpenTpSlParam {
	return v.value
}

func (v *NullableOpenTpSlParam) Set(val *OpenTpSlParam) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenTpSlParam) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenTpSlParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenTpSlParam(val *OpenTpSlParam) *NullableOpenTpSlParam {
	return &NullableOpenTpSlParam{value: val, isSet: true}
}

func (v NullableOpenTpSlParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenTpSlParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


