/*
Http Gateway

Contains interface documents such as accounts, assets, transactions, etc.

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClaimFaucetCoin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimFaucetCoin{}

// ClaimFaucetCoin 领取水龙头体验代币-响应
type ClaimFaucetCoin struct {
	// 是否领取成功
	IsSuccess *bool `json:"isSuccess,omitempty"`
	// 下次可领取时间
	NextClaimTime *string `json:"nextClaimTime,omitempty"`
}

// NewClaimFaucetCoin instantiates a new ClaimFaucetCoin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimFaucetCoin() *ClaimFaucetCoin {
	this := ClaimFaucetCoin{}
	return &this
}

// NewClaimFaucetCoinWithDefaults instantiates a new ClaimFaucetCoin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimFaucetCoinWithDefaults() *ClaimFaucetCoin {
	this := ClaimFaucetCoin{}
	return &this
}

// GetIsSuccess returns the IsSuccess field value if set, zero value otherwise.
func (o *ClaimFaucetCoin) GetIsSuccess() bool {
	if o == nil || IsNil(o.IsSuccess) {
		var ret bool
		return ret
	}
	return *o.IsSuccess
}

// GetIsSuccessOk returns a tuple with the IsSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimFaucetCoin) GetIsSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuccess) {
		return nil, false
	}
	return o.IsSuccess, true
}

// HasIsSuccess returns a boolean if a field has been set.
func (o *ClaimFaucetCoin) HasIsSuccess() bool {
	if o != nil && !IsNil(o.IsSuccess) {
		return true
	}

	return false
}

// SetIsSuccess gets a reference to the given bool and assigns it to the IsSuccess field.
func (o *ClaimFaucetCoin) SetIsSuccess(v bool) {
	o.IsSuccess = &v
}

// GetNextClaimTime returns the NextClaimTime field value if set, zero value otherwise.
func (o *ClaimFaucetCoin) GetNextClaimTime() string {
	if o == nil || IsNil(o.NextClaimTime) {
		var ret string
		return ret
	}
	return *o.NextClaimTime
}

// GetNextClaimTimeOk returns a tuple with the NextClaimTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimFaucetCoin) GetNextClaimTimeOk() (*string, bool) {
	if o == nil || IsNil(o.NextClaimTime) {
		return nil, false
	}
	return o.NextClaimTime, true
}

// HasNextClaimTime returns a boolean if a field has been set.
func (o *ClaimFaucetCoin) HasNextClaimTime() bool {
	if o != nil && !IsNil(o.NextClaimTime) {
		return true
	}

	return false
}

// SetNextClaimTime gets a reference to the given string and assigns it to the NextClaimTime field.
func (o *ClaimFaucetCoin) SetNextClaimTime(v string) {
	o.NextClaimTime = &v
}

func (o ClaimFaucetCoin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimFaucetCoin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsSuccess) {
		toSerialize["isSuccess"] = o.IsSuccess
	}
	if !IsNil(o.NextClaimTime) {
		toSerialize["nextClaimTime"] = o.NextClaimTime
	}
	return toSerialize, nil
}

type NullableClaimFaucetCoin struct {
	value *ClaimFaucetCoin
	isSet bool
}

func (v NullableClaimFaucetCoin) Get() *ClaimFaucetCoin {
	return v.value
}

func (v *NullableClaimFaucetCoin) Set(val *ClaimFaucetCoin) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimFaucetCoin) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimFaucetCoin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimFaucetCoin(val *ClaimFaucetCoin) *NullableClaimFaucetCoin {
	return &NullableClaimFaucetCoin{value: val, isSet: true}
}

func (v NullableClaimFaucetCoin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimFaucetCoin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


